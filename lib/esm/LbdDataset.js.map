{"version":3,"sources":["../../src/LbdDataset.ts"],"names":["LbdDataset","constructor","session","url","fetch","accessService","AccessService","dataService","DataService","lbdService","LBDService","checkExistence","status","method","then","result","init","data","headers","i","json","distributions","getDistributions","create","options","makePublic","datasetUrl","datasetId","split","length","res","createContainer","aclDefault","ACL","default","Authorization","agentClass","FOAF","Agent","sparqlUpdate","undefined","deleteFile","q","DCAT","Dataset","DCTERMS","creator","info","webId","identifier","Object","keys","q0","key","Array","isArray","forEach","item","t","startsWith","delete","deleteContainer","update","query","addDistribution","distribution","mimetype","distributionId","dist","LbdDistribution","dataset","distributionUrls","map","id","push"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\nimport DataService from \"./helpers/data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./helpers/vocab/lbds\";\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./helpers/functions\"\nimport {v4} from \"uuid\"\nimport { ACL, DCAT, DCTERMS, FOAF, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport LbdDistribution from './LbdDistribution'\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\n\nexport default class LbdDataset {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public url: string;\n  public distributions: LbdDistribution[]\n  public data: object[];\n  private session: BrowserSession | NodeSession\n\n  constructor(session: BrowserSession | NodeSession, url: string) {\n    this.session = session\n    this.fetch = session.fetch;\n    this.url = url\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  /**\n   * \n   * @returns boolean: this dataset exists or not\n   */\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * @description Draw this dataset into your application (async)\n   */\n  public async init() {\n    this.data = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.distributions = await this.getDistributions()\n  }\n\n  /**\n   * @description create this dataset within the active project\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @param makePublic initial access rights for the dataset (boolean)\n   */\n  public async create(\n    options: object = {},\n    makePublic?: boolean,\n  ) {\n    const datasetUrl = this.url\n    const datasetId = this.url.split('/')[this.url.split(\"/\").length - 2]\n    const status = await this.fetch(datasetUrl, {method: \"HEAD\"}).then(res => res.status)\n    if (status !== 200) {\n      await this.dataService.createContainer(datasetUrl, makePublic)\n\n      //workaround to allow inherited access rights\n\n      if (makePublic) {\n        let aclDefault = `INSERT {?rule <${ACL.default}> <${datasetUrl}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`\n        await this.dataService.sparqlUpdate(datasetUrl + \".acl\", aclDefault)\n      }\n\n      if (makePublic === undefined) {\n        this.dataService.deleteFile(datasetUrl + \".acl\")\n      }\n    }\n\n    let q = `INSERT DATA {<${datasetUrl}> a <${DCAT.Dataset}> ; <${DCTERMS.creator}> <${this.session.info.webId}> ; <${DCTERMS.identifier}> \"${datasetId}\". }`\n\n    await this.dataService.sparqlUpdate(datasetUrl, q)\n    \n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `\n      for (const key of Object.keys(options)) {\n        if (Array.isArray(options[key])) {\n          options[key].forEach((item :string) => {\n            let t\n            if (item.startsWith(\"http\")) {\n              t = `<${item}>`\n            } else {\n              t = `\"${item}\"`\n            }\n            q0 += `<${datasetUrl}> <${key}> ${t} .`\n          })\n        } else {\n          let t\n          if (options[key].startsWith(\"http\")) {\n            t = `<${options[key]}>`\n          } else {\n            t = `\"${options[key]}\"`\n          }\n          q0 += `<${datasetUrl}> <${key}> ${t} .`\n        }\n      }    \n      q0 += \"}\"\n      await this.dataService.sparqlUpdate(datasetUrl, q0)\n    }\n    await this.init()\n  }\n\n  /**\n   * @description delete this dataset\n   * @returns void\n   */\n  public async delete() {\n    await this.dataService.deleteContainer(this.url, true)\n    return\n  }\n\n  /**\n   * @description Update the dataset with SPARQL (dangerous - watch out!)\n   * @param query The SPARQL query with which to update the dataset\n   */\n  public async update(query) {\n      await this.dataService.sparqlUpdate(this.url, query)\n  }\n\n  /////////////////////////////////////////////////////////\n  //////////////////// DISTRIBUTIONS///////////////////////\n  /////////////////////////////////////////////////////////\n  /**\n   * @description create a distribution for this dataset\n   * @param distribution The file to upload as a dump of the dataset\n   * @param mimetype The mimetype of the distribution (if omitted it is guessed)\n   * @param options options (currently not implemented)\n   * @param distributionId the ID of the distribution - normally UUID, but can be overridden\n   * @param makePublic initial access rights for the dataset (boolean)\n   * @returns the distribution object\n   */\n  public async addDistribution(distribution: File | Buffer, mimetype? ,options: object = {}, distributionId: string = v4(), makePublic: boolean = false) {      \n    const dist = new LbdDistribution(this.session, this, distributionId)\n    await dist.create(distribution, {}, mimetype, makePublic)\n    return dist\n  }\n\n  /**\n   * @description get an Array of distribution URLs of this dataset\n   * @returns an Array of distribution URLs\n   */\n  public getDistributions() {\n      const dataset = extract(this.data, this.url)\n      if (dataset[DCAT.distribution]) {\n        const distributionUrls = dataset[DCAT.distribution].map(i => i[\"@id\"])\n        const distributions = []\n        for (const url of distributionUrls) {\n          const id = url.split('/')[url.split('/').length -1]\n          const dist = new LbdDistribution(this.session, this, id)\n          distributions.push(dist)\n        }\n        return distributions\n      } else return []\n  }\n\n}\n\n"],"file":"LbdDataset.js"}