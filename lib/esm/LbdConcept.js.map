{"version":3,"sources":["../../src/LbdConcept.ts"],"names":["LbdConcept","constructor","session","registry","aliases","fetch","accessService","AccessService","dataService","DataService","references","create","id","distribution","url","q0","LBD","Concept","sparqlUpdate","push","initialized","init","data","delete","Error","alias","includes","addAlias","proj","LbdProject","replace","theOtherConcept","getConcept","OWL","sameAs","ref","startsWith","locRef","addReference","identifier","dataset","referenceId","regdist","referenceUrl","identifierId","identifierUrl","alignment","hasReference","inDataset","hasIdentifier","inDistribution","error","console","log","deleteReference","getIdentifierType","isInt","n","XSD","anyURI","integer","formatted","float","string"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\r\nimport DataService from \"./helpers/data-service\";\r\n\r\nimport LBD from \"./helpers/vocab/lbds\";\r\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\r\nimport {LbdService} from \"./LbdService\";\r\nimport {extract} from \"./helpers/functions\"\r\nimport {v4} from \"uuid\"\r\nimport { DCAT, DCTERMS, OWL, RDFS, XSD } from \"@inrupt/vocab-common-rdf\";\r\nimport mime from \"mime-types\"\r\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\r\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\r\nimport {LbdProject} from \"./LbdProject\";\r\nimport { getQueryResult } from \"./helpers/utils\";\r\n\r\nexport class LbdConcept {\r\n  public fetch;\r\n  public accessService: AccessService;\r\n  public dataService: DataService;\r\n  private session: BrowserSession | NodeSession\r\n  public references: object[]\r\n  public aliases: string[]\r\n  public registry: string\r\n  public initialized: boolean\r\n\r\n  constructor(session: BrowserSession | NodeSession, registry: string) {\r\n    this.aliases = []\r\n    this.session = session\r\n    this.fetch = session.fetch;\r\n    this.accessService = new AccessService(session.fetch);\r\n    this.dataService = new DataService(session.fetch);\r\n    this.registry = registry\r\n    this.references = []\r\n  }\r\n\r\n  /**\r\n   * create this concept on a project (in a Pod) - asynchronous\r\n   */\r\n  public async create(id?) {\r\n    if (!id) {\r\n      id = v4()\r\n    }\r\n    const distribution = this.registry + 'data'\r\n    const url = distribution + \"#\" + id\r\n    const q0 = `INSERT DATA {<${url}> a <${LBD.Concept}> }`\r\n    await this.dataService.sparqlUpdate(distribution, q0)\r\n    this.aliases.push(url)\r\n    this.initialized = true\r\n  }\r\n\r\n  /**\r\n   * @description initialise an already existing concept in your application\r\n   * @param data {aliases: string[], references: {dataset, distribution, identifier}[]\r\n   */\r\n  public init(data: {aliases: string[], references: {dataset: string, distribution: string, identifier: string}[]}) {\r\n    this.aliases = data.aliases\r\n    if (data.references) {\r\n      this.references = data.references\r\n    } else {\r\n      this.references = []\r\n    }\r\n    this.initialized = true\r\n  }\r\n\r\n  /**\r\n   * @description delete this concept from the reference registry\r\n   */\r\n  public async delete() {\r\n    if (!this.initialized) throw new Error(\"Please initialize the Concept first using this.initialize() or this.create()\")\r\n    const distribution = this.registry + 'data'\r\n    for (const alias  of this.aliases) {\r\n      if (alias.includes(this.registry)) {\r\n        const q0 = `DELETE {\r\n          <${alias}> ?p ?o .\r\n        } WHERE {\r\n          <${alias}> ?p ?o .\r\n        }`\r\n        await this.dataService.sparqlUpdate(distribution, q0)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  public async addAlias(url, registry) {\r\n    const proj = new LbdProject(this.session, this.registry.replace(\"local/references/\", \"\"))\r\n    const theOtherConcept = await proj.getConcept(url)\r\n\r\n    for (const alias  of this.aliases) {\r\n      if (alias.includes(registry)) {\r\n\r\n        let q0 = `INSERT DATA {\r\n          <${alias}> <${OWL.sameAs}> <${url}> .\r\n          `\r\n        for (const ref of theOtherConcept.references) {\r\n          if (ref[\"identifier\"].startsWith(\"http\")) {\r\n            for (const locRef of this.references) {\r\n              if (locRef[\"identifier\"].startsWith(\"http\")) {\r\n                q0 += `<${ref[\"identifier\"]}> <${OWL.sameAs}> <${locRef[\"identifier\"]}> .\r\n                <${locRef[\"identifier\"]}> <${OWL.sameAs}> <${ref[\"identifier\"]}> .`\r\n              }\r\n            }\r\n          }\r\n        }\r\n      q0 += \"}\"\r\n       await this.dataService.sparqlUpdate(registry + \"data\", q0)\r\n\r\n      }\r\n    }\r\n\r\n    this.aliases.push(url)\r\n    return\r\n  }\r\n\r\n  // public async alignLocalAliases(url) {\r\n  //   const registry = this.registry\r\n  //   for (const alias  of this.aliases) {\r\n  //     if (alias.includes(registry)) {\r\n\r\n  //       const q0 = `INSERT DATA {\r\n  //         <${alias}> <${OWL.sameAs}> <${url}> .\r\n  //      }`\r\n  //      await this.dataService.sparqlUpdate(this.registry + \"data\", q0)\r\n  //     }\r\n  //   }\r\n\r\n  //   this.aliases.push(url)\r\n  //   return\r\n  // }\r\n\r\n  /**\r\n   * @description Add a reference to this concept\r\n   * @param identifier the identifier\r\n   * @param dataset the dataset that contains this reference\r\n   * @param distribution the distribution that contains this reference\r\n   * @returns \r\n   */\r\n  public async addReference(identifier: string, dataset: string, distribution: string) {\r\n    try {\r\n      if (!this.initialized) throw new Error(\"Please initialize the Concept first using this.initialize() or this.create()\")\r\n      const registry = this.registry\r\n      const referenceId = v4()\r\n      const regdist = registry + \"data\"\r\n      const referenceUrl = regdist + \"#\" + referenceId\r\n      const identifierId = v4()\r\n      const identifierUrl = regdist + \"#\" + identifierId\r\n  \r\n      // const idLiteral = this.getIdentifierType(identifier)\r\n      for (const alias  of this.aliases) {\r\n        if (alias.includes(registry)) {\r\n  \r\n          let id, alignment\r\n          alignment = \"\"\r\n          if (identifier.startsWith(\"http\")) {\r\n            id = `<${identifier}>`\r\n            for (const ref of this.references) {\r\n              if (ref[\"identifier\"].startsWith(\"http\")) {\r\n                alignment += `${id} <${OWL.sameAs}> <${ref[\"identifier\"]}> .\r\n                <${ref[\"identifier\"]}> <${OWL.sameAs}> ${id} .`\r\n              }\r\n            }\r\n\r\n          }\r\n          else {\r\n            id = `\"${identifier}\"`;\r\n          }\r\n\r\n\r\n          let q0 = `INSERT DATA {\r\n            <${alias}> <${LBD.hasReference}> <${referenceUrl}> .\r\n            <${referenceUrl}> <${LBD.inDataset}> <${dataset}> ;\r\n              <${LBD.hasIdentifier}> <${identifierUrl}> .\r\n            <${identifierUrl}> <https://w3id.org/lbdserver#value> ${id} ;\r\n            <${LBD.inDistribution}> <${distribution}> .\r\n            `\r\n         if (alignment) {\r\n           q0 += alignment\r\n         }\r\n         q0 += \"}\"\r\n\r\n         await this.dataService.sparqlUpdate(regdist, q0)\r\n        }\r\n      }\r\n      this.references.push({\r\n        dataset,\r\n        distribution,\r\n        identifier\r\n      })\r\n      return referenceUrl\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * @description Delete a reference for this concept\r\n   * @param referenceUrl the URL of the reference to delete\r\n   */\r\n  public async deleteReference(referenceUrl) {\r\n    const regdist = this.registry + \"data\"\r\n    const q0 = `DELETE {\r\n      ?a ?b <${referenceUrl}> .\r\n      <${referenceUrl}> ?p ?o ; ?q ?x.\r\n      ?x ?y ?z.\r\n    } WHERE {\r\n      ?a ?b <${referenceUrl}> .\r\n      <${referenceUrl}> ?p ?o ; ?q ?x.\r\n      ?x ?y ?z.\r\n    }`\r\n    await this.dataService.sparqlUpdate(regdist, q0)\r\n\r\n    // const q1 = `DELETE {<${this.url}> <${LBD.hasReference}> <${referenceUrl}> .}`\r\n    // await this.dataService.sparqlUpdate(regdist, q1)\r\n  }\r\n\r\n  private getIdentifierType(identifier: string | number) {\r\n    function isInt(n) {\r\n      return n % 1 === 0;\r\n   }\r\n\r\n    if (typeof identifier === \"string\" && identifier.startsWith(\"http\")) {\r\n      return `\"${identifier}\"^^<${XSD.anyURI}>`\r\n    } else {\r\n      if (typeof identifier === \"number\") {\r\n        if (isInt(identifier)) {\r\n          return `\"${identifier}\"^^<${XSD.integer}>`\r\n        } else {\r\n          return {formatted: `\"${identifier}\"^^<${XSD.float}>`}\r\n        }\r\n      } else {\r\n        return `\"${identifier}\"^^<${XSD.string}>`\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n"],"file":"LbdConcept.js"}