{"version":3,"sources":["../../src/LbdConcept.ts"],"names":["LbdConcept","constructor","session","registry","aliases","fetch","accessService","AccessService","dataService","DataService","references","create","id","distribution","url","q0","LBD","Concept","sparqlUpdate","push","initialized","init","data","delete","Error","alias","includes","addReference","identifier","dataset","referenceId","regdist","referenceUrl","identifierId","identifierUrl","hasReference","inDataset","hasIdentifier","inDistribution","error","console","log","deleteReference","getIdentifierType","isInt","n","startsWith","XSD","anyURI","integer","formatted","float","string"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\nimport DataService from \"./helpers/data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./helpers/vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./helpers/functions\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS, XSD } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\nimport LbdProject from \"./LbdProject\";\nimport { getQueryResult } from \"./helpers/utils\";\n\nexport default class LbdConcept {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  private session: BrowserSession | NodeSession\n  public references: object[]\n  public aliases: string[]\n  public registry: string\n  public initialized: boolean\n\n  constructor(session: BrowserSession | NodeSession, registry) {\n    this.aliases = []\n    this.session = session\n    this.fetch = session.fetch;\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.registry = registry\n    this.references = []\n  }\n\n  /**\n   * create this concept on a project (in a Pod) - asynchronous\n   */\n  public async create() {\n    const id = v4()\n    const distribution = this.registry + 'data'\n    const url = distribution + \"#\" + id\n    const q0 = `INSERT DATA {<${url}> a <${LBD.Concept}> }`\n    await this.dataService.sparqlUpdate(distribution, q0)\n    this.aliases.push(url)\n    this.initialized = true\n  }\n\n\n  /**\n   * @description initialise an already existing concept in your application\n   * @param data {aliases: string[], references: {dataset, distribution, identifier}[]\n   */\n  public init(data: {aliases: string[], references: {dataset: string, distribution: string, identifier: string}[]}) {\n    this.aliases = data.aliases\n    this.references = data.references\n    this.initialized = true\n  }\n\n  /**\n   * @description delete this concept from the reference registry\n   */\n  public async delete() {\n    if (!this.initialized) throw new Error(\"Please initialize the Concept first using this.initialize() or this.create()\")\n    const distribution = this.registry + 'data'\n    for (const alias  of this.aliases) {\n      if (alias.includes(this.registry)) {\n        const q0 = `DELETE {\n          <${alias}> ?p ?o .\n        } WHERE {\n          <${alias}> ?p ?o .\n        }`\n        await this.dataService.sparqlUpdate(distribution, q0)\n      }\n    }\n\n  }\n\n  /**\n   * @description Add a reference to this concept\n   * @param identifier the identifier\n   * @param dataset the dataset that contains this reference\n   * @param distribution the distribution that contains this reference\n   * @returns \n   */\n  public async addReference(identifier: string, dataset: string, distribution: string) {\n    try {\n      if (!this.initialized) throw new Error(\"Please initialize the Concept first using this.initialize() or this.create()\")\n      const registry = this.registry\n      const referenceId = v4()\n      const regdist = registry + \"data\"\n      const referenceUrl = regdist + \"#\" + referenceId\n      const identifierId = v4()\n      const identifierUrl = regdist + \"#\" + identifierId\n  \n      // const idLiteral = this.getIdentifierType(identifier)\n      for (const alias  of this.aliases) {\n        if (alias.includes(registry)) {\n  \n          const q0 = `INSERT DATA {\n            <${alias}> <${LBD.hasReference}> <${referenceUrl}> .\n            <${referenceUrl}> <${LBD.inDataset}> <${dataset}> ;\n              <${LBD.hasIdentifier}> <${identifierUrl}> .\n            <${identifierUrl}> <http://schema.org/value> \"${identifier}\" ;\n            <${LBD.inDistribution}> <${distribution}> .\n         }`\n         await this.dataService.sparqlUpdate(regdist, q0)\n        }\n      }\n      \n      this.references.push({\n        dataset,\n        distribution,\n        identifier\n      })\n      return referenceUrl\n    } catch (error) {\n      console.log('error', error)\n    }\n\n\n  }\n\n  /**\n   * @description Delete a reference for this concept\n   * @param referenceUrl the URL of the reference to delete\n   */\n  public async deleteReference(referenceUrl) {\n    const regdist = this.registry + \"data\"\n    const q0 = `DELETE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    } WHERE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    }`\n    await this.dataService.sparqlUpdate(regdist, q0)\n\n    // const q1 = `DELETE {<${this.url}> <${LBD.hasReference}> <${referenceUrl}> .}`\n    // await this.dataService.sparqlUpdate(regdist, q1)\n  }\n\n  private getIdentifierType(identifier: string | number) {\n    function isInt(n) {\n      return n % 1 === 0;\n   }\n\n    if (typeof identifier === \"string\" && identifier.startsWith(\"http\")) {\n      return `\"${identifier}\"^^<${XSD.anyURI}>`\n    } else {\n      if (typeof identifier === \"number\") {\n        if (isInt(identifier)) {\n          return `\"${identifier}\"^^<${XSD.integer}>`\n        } else {\n          return {formatted: `\"${identifier}\"^^<${XSD.float}>`}\n        }\n      } else {\n        return `\"${identifier}\"^^<${XSD.string}>`\n      }\n    }\n  }\n}\n\n"],"file":"LbdConcept.js"}