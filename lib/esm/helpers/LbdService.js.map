{"version":3,"sources":["../../../src/helpers/LbdService.ts"],"names":["LBDService","verbose","constructor","session","fetch","accessService","AccessService","dataService","DataService","validateWebId","webId","lbdLoc","getProjectRegistry","length","getAllProjects","aggregator","data","headers","Accept","then","t","json","myProjects","LDP","contains","map","i","stakeholder","myEngine","q","LBD","hasProjectRegistry","location","query","sources","res","bindings","bind","get","value","catch","err","undefined","getInbox","inbox","createProjectRegistry","url","publiclyAccessible","info","replace","q0","sparqlUpdate","q1","Aggregator","accessRights","actor","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","error","console","log","removeProjectRegistry","deleteContainer"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport { urlJoin } from \"url-join-ts\";\nimport DataService from \"./data-service\";\nimport { computeChecksumMd5 } from \"./utils\";\nimport { newEngine, IQueryResultBindings } from \"@comunica/actor-init-sparql\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  createSolidDataset,\n  buildThing,\n  getSolidDataset,\n  createThing,\n  setThing,\n  setUrl,\n  addUrl,\n  getThingAll,\n  getUrlAll,\n  setDatetime,\n  saveSolidDatasetAt,\n} from \"@inrupt/solid-client\";\nimport { extract } from \"./functions\";\nimport { RDF, SCHEMA_INRUPT, DCAT, LDP, AS, XSD, FOAF, DCTERMS } from \"@inrupt/vocab-common-rdf\";\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\nimport { v4 } from \"uuid\";\n\nexport default class LBDService {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  private session: BrowserSession | NodeSession;\n\n  constructor(session: BrowserSession | NodeSession, verbose: boolean = false) {\n    this.session = session;\n    this.fetch = session.fetch;\n    this.verbose = verbose;\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// PREPARATION //////////////////////\n  /////////////////////////////////////////////////////////\n  public async validateWebId(webId: string) {\n    const lbdLoc = await this.getProjectRegistry(webId);\n    if (lbdLoc && lbdLoc.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  public async getAllProjects(aggregator) {\n    const data = await this.fetch(aggregator, {\n      headers: { Accept: \"application/ld+json\" },\n    }).then((t) => t.json());\n    const myProjects = extract(data, aggregator)[LDP.contains].map(\n      (i) => i[\"@id\"]\n    );\n    return myProjects;\n  }\n\n  public async getProjectRegistry(\n    stakeholder: string\n  ): Promise<string | undefined> {\n    const myEngine = newEngine();\n    const q = `select ?loc where {<${stakeholder}> <${LBD.hasProjectRegistry}> ?loc}`;\n    const location = await myEngine\n      .query(q, { sources: [stakeholder], fetch: this.fetch })\n      .then((res: IQueryResultBindings) => res.bindings())\n      .then((bind: any) => bind.map((i) => i.get(\"?loc\").value))\n      .catch((err: Error) => {\n        throw err;\n      });\n    if (location && location.length > 0) {\n      return location[0];\n    } else {\n      return undefined;\n    }\n  }\n\n  public async getInbox(stakeholder: string): Promise<string | undefined> {\n    const myEngine = newEngine();\n    const q = `select ?inbox where {<${stakeholder}> <${LDP.inbox}> ?inbox}`;\n    const inbox = await myEngine\n      .query(q, { sources: [stakeholder], fetch: this.fetch })\n      .then((res: IQueryResultBindings) => res.bindings())\n      .then((bind: any) => bind.map((i) => i.get(\"?inbox\").value))\n      .catch((err: Error) => {\n        throw err;\n      });\n    if (inbox && inbox.length > 0) {\n      return inbox[0];\n    } else {\n      return undefined;\n    }\n  }\n\n//   public async inviteStakeholder(stakeholder: string, projectId: string) {\n//     const inbox = await this.getInbox(stakeholder);\n//     const id = v4();\n//     const url = inbox + id;\n//     const message = `<>\n//   a <${AS.Announce}> ;\n//   <${AS.actor}> <${this.session.info.webId}> ;\n//   <${AS.object}> <#invite> ;\n//   <${AS.target}> <${stakeholder}> ;\n//   <${AS.updated}> \"${new Date().toISOString()}\"^^${XSD.dateTime} .\n\n// <#invite> a ${LBD.ProjectInvite}; \n//   <${FOAF.primaryTopic}> <#project> .\n// <#project> a <${LBD.Project}> ;\n//     <${DCTERMS.identifier} \"${projectId}\" .\n//   `;\n\n//   const options = {\n//     method: \"POST\",\n//     body: message,\n//   }\n//     // await this.session.fetch()\n//   }\n\n  public async createProjectRegistry(\n    url: string = undefined,\n    publiclyAccessible: boolean = true\n  ): Promise<string> {\n    try {\n      const stakeholder = this.session.info.webId\n      if (!url) url = stakeholder.replace(\"/profile/card#me\", \"/lbd/\");\n      \n      const q0 = `INSERT DATA {\n          <${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .\n        }`;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n\n      // create the LBD registry (container / Aggregator)\n      const q1 = `INSERT DATA {\n        <${url}> a <${LBD.Aggregator}> .\n      }`;\n\n      // the updates immediately creates the container\n      await this.dataService.sparqlUpdate(url, q1);\n\n      let accessRights: AccessRights;\n      let actor: string | undefined;\n      if (publiclyAccessible) {\n        accessRights = {\n          read: true,\n          append: false,\n          write: false,\n          control: false,\n        };\n      } else {\n        accessRights = { read: true, append: true, write: true, control: true };\n        actor = stakeholder;\n      }\n      await this.accessService.setResourceAccess(\n        url,\n        accessRights,\n        ResourceType.CONTAINER,\n        actor\n      );\n      return url;\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n\n  public async removeProjectRegistry(stakeholder: string, url: string) {\n    try {\n      const q0 = `DELETE {<${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .}\n      WHERE {<${stakeholder}> <${LBD.hasProjectRegistry}> ?reg .}\n      `;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n      await this.dataService.deleteContainer(url, true);\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n}\n"],"file":"LbdService.js"}