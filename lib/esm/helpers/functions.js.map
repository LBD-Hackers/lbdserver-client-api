{"version":3,"sources":["../../../src/helpers/functions.ts"],"names":["QueryEngine","require","N3","DataFactory","namedNode","literal","defaultGraph","quad","variable","translate","toSparql","extract","jsonld","uri","Object","assign","filter","i","prefixes","inference","myEngine","registries","fetch","store","Promise","resolve","reject","q","quadStream","queryQuads","sources","on","res","subject","id","replaceAll","object","startsWith","predicate","value","addQuad","err","streamToString","stream","chunks","chunk","push","Buffer","from","concat","toString","query","options","asStream","variables","mutateQuery","console","log","newQ","Store","result","data","resultToString","JSON","parse","findLowerLevel","obj","type","bgp","input","translation","usedVariables","Set","aliasNumber","aliases","pattern","patterns","item","keys","termType","has","newVName","newV","add","forEach","alias","newPattern","Array"],"mappings":"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","sourcesContent":["const QueryEngine = require('@comunica/query-sparql').QueryEngine;\r\nconst N3 = require('n3');\r\nconst { DataFactory } = N3;\r\nconst { namedNode, literal, defaultGraph, quad, variable } = DataFactory;\r\nconst {translate, toSparql} = require(\"sparqlalgebrajs\")\r\n\r\nfunction extract(jsonld: object[], uri: string) {\r\n  return Object.assign({}, ...jsonld.filter((i) => i[\"@id\"] === uri));\r\n}\r\n\r\nconst prefixes = `\r\nprefix owl: <http://www.w3.org/2002/07/owl#> \r\nprefix beo: <http://pi.pauwel.be/voc/buildingelement#>\r\nprefix props: <http://example.org/props#> \r\nprefix lbds: <https://w3id.org/lbdserver#>\r\nprefix schema: <http://schema.org/>\r\n`\r\n\r\nfunction inference(myEngine, { registries, fetch, store }): Promise<void> {\r\n  return new Promise(async (resolve, reject) => {\r\n      const q = prefixes + `\r\n      CONSTRUCT {\r\n       ?s1 owl:sameAs ?s2 .\r\n       ?s2 owl:sameAs ?s1 .\r\n      } WHERE {\r\n          ?concept1 lbds:hasReference/lbds:hasIdentifier/<http://schema.org/value> ?s1 .\r\n          ?concept2 lbds:hasReference/lbds:hasIdentifier/<http://schema.org/value> ?s2 .\r\n          ?concept1 owl:sameAs ?concept2 .\r\n      }`\r\n      const quadStream = await myEngine.queryQuads(q, {\r\n          sources: registries,\r\n          fetch\r\n      });\r\n\r\n      quadStream.on('data', (res) => {\r\n\r\n            const subject = res.subject.id.replaceAll('\"', '')\r\n            const object = res.object.id.replaceAll('\"', '')\r\n          if (subject.startsWith(\"http\") && object.startsWith(\"http\")) {\r\n            const q = quad(\r\n                namedNode(subject),\r\n                namedNode(res.predicate.value),\r\n                namedNode(object),\r\n                defaultGraph()\r\n            )\r\n            store.addQuad(q)\r\n          }\r\n\r\n      });\r\n\r\n      quadStream.on('error', (err) => {\r\n        reject(err)\r\n    });\r\n\r\n      quadStream.on('end', () => {\r\n          resolve()\r\n      })\r\n  })\r\n}\r\n\r\nfunction streamToString (stream): Promise<string> {\r\n  const chunks = [];\r\n  return new Promise((resolve, reject) => {\r\n    stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)));\r\n    stream.on('error', (err) => reject(err));\r\n    stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));\r\n  })\r\n}\r\n\r\nasync function query(q, options) {\r\n      let { sources, fetch, store, registries, asStream} = options\r\n      const {query, variables } = await mutateQuery(q)\r\n    //   const vars = variables.map((v: any) => v.value)\r\n\r\n        console.log('sources', sources)\r\n    console.log('registries', registries)\r\n    console.log('query', query)\r\n\r\n      const newQ = prefixes + \"Select * where {?s1 owl:sameAs ?s2} \"\r\n      const myEngine = new QueryEngine();\r\n      if (!store) store = new N3.Store();\r\n      \r\n      await inference(myEngine, { registries, fetch, store })\r\n      const result = await myEngine.query(query, { sources: [...sources, store], fetch })\r\n      const { data } = await myEngine.resultToString(result,\r\n          'application/sparql-results+json');\r\n      if (asStream) {\r\n          return data\r\n      } else {\r\n          return JSON.parse(await streamToString(data))\r\n      }\r\n}\r\n\r\nfunction findLowerLevel(obj, variables) {\r\n  if (!variables) variables = obj.variables\r\n  if (obj.type === \"bgp\") {\r\n      return {bgp: obj, variables}\r\n  } else {\r\n      return findLowerLevel(obj.input, variables)\r\n  }\r\n}\r\n\r\nasync function mutateQuery(query) {\r\n  const translation = translate(query);\r\n  const {bgp, variables} = findLowerLevel(translation, translation.variables)\r\n  const usedVariables = new Set()\r\n  let aliasNumber = 1\r\n  let aliases = {}\r\n  for (const pattern of bgp.patterns) {\r\n      for (const item of Object.keys(pattern)) {\r\n       if (pattern[item].termType === \"Variable\") {\r\n          if (usedVariables.has(pattern[item])) {\r\n              const newVName = `${pattern[item].value}_alias${aliasNumber}`\r\n              if (!aliases[pattern[item].value]) aliases[pattern[item].value] = []\r\n\r\n              aliases[pattern[item].value].push(newVName)\r\n              aliasNumber += 1\r\n              const newV = {termType: \"Variable\", value: newVName}\r\n              pattern[item] = newV\r\n          }\r\n          usedVariables.add(pattern[item])\r\n       }\r\n         \r\n      }\r\n  }\r\n  Object.keys(aliases).forEach(item => {\r\n      aliases[item].forEach(alias => {\r\n          const newPattern = quad(\r\n              variable(item),\r\n              namedNode(\"http://www.w3.org/2002/07/owl#sameAs\"),\r\n              variable(alias),\r\n              defaultGraph()\r\n          )\r\n          bgp.patterns.push(newPattern)\r\n      })\r\n  })\r\n  const q = {type: \"project\", input: {type: \"bgp\", patterns: bgp.patterns}, variables: Array.from(usedVariables)}\r\n  return {query: toSparql(q), variables: Array.from(usedVariables)}\r\n}\r\n\r\nexport { extract, streamToString, query };\r\n"],"file":"functions.js"}