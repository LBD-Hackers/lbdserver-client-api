{"version":3,"sources":["../../../src/helpers/functions.ts"],"names":["QueryEngine","require","N3","DataFactory","namedNode","literal","defaultGraph","quad","variable","translate","toSparql","extract","jsonld","uri","Object","assign","filter","i","prefixes","inference","myEngine","registries","fetch","store","Promise","resolve","reject","start","Date","q","quadStream","queryQuads","sources","on","res","subject","id","predicate","value","object","addQuad","err","duration","getTime","console","log","streamToString","stream","chunks","chunk","push","Buffer","from","concat","toString","query","options","asStream","queryEngine","variables","mutateQuery","result","data","resultToString","JSON","parse","findLowerLevel","obj","type","bgp","input","translation","usedVariables","Set","aliasNumber","aliases","pattern","patterns","item","keys","termType","has","newVName","newV","add","forEach","alias","newPattern","Array"],"mappings":";;;;;;;;;AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,wBAAD,CAAP,CAAkCD,WAAtD;;AACA,MAAME,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAkBD,EAAxB;AACA,MAAM;AAAEE,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA,YAAtB;AAAoCC,EAAAA,IAApC;AAA0CC,EAAAA;AAA1C,IAAuDL,WAA7D;;AACA,MAAM;AAACM,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,IAAwBT,OAAO,CAAC,iBAAD,CAArC;;AAEA,SAASU,OAAT,CAAiBC,MAAjB,EAAmCC,GAAnC,EAAgD;AAC9C,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,GAAGH,MAAM,CAACI,MAAP,CAAeC,CAAD,IAAOA,CAAC,CAAC,KAAD,CAAD,KAAaJ,GAAlC,CAArB,CAAP;AACD;;AAED,MAAMK,QAAQ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA,CANA;;AAQA,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA;AAArB,CAA7B,EAA0E;AACxE,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACE,UAAMC,CAAC,GAAGX,QAAQ,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAZM;AAaA,UAAMY,UAAU,GAAG,MAAMV,QAAQ,CAACW,UAAT,CAAoBF,CAApB,EAAuB;AAC5CG,MAAAA,OAAO,EAAEX,UADmC;AAE5CC,MAAAA;AAF4C,KAAvB,CAAzB;AAKAQ,IAAAA,UAAU,CAACG,EAAX,CAAc,MAAd,EAAuBC,GAAD,IAAS;AAC7B;AACI,YAAML,CAAC,GAAGtB,IAAI,CACVH,SAAS,CAAC8B,GAAG,CAACC,OAAJ,CAAYC,EAAb,CADC,EAEVhC,SAAS,CAAC8B,GAAG,CAACG,SAAJ,CAAcC,KAAf,CAFC,EAGVlC,SAAS,CAAC8B,GAAG,CAACK,MAAJ,CAAWH,EAAZ,CAHC,EAIV9B,YAAY,EAJF,CAAd;AAMAiB,MAAAA,KAAK,CAACiB,OAAN,CAAcX,CAAd;AAGL,KAXD;AAaAC,IAAAA,UAAU,CAACG,EAAX,CAAc,OAAd,EAAwBQ,GAAD,IAAS;AAC9Bf,MAAAA,MAAM,CAACe,GAAD,CAAN;AACH,KAFC;AAIAX,IAAAA,UAAU,CAACG,EAAX,CAAc,KAAd,EAAqB,MAAM;AACzB,YAAMS,QAAQ,GAAG,IAAId,IAAJ,GAAWe,OAAX,KAAuBhB,KAAK,CAACgB,OAAN,EAAxC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCH,QAAlC;AACEjB,MAAAA,OAAO;AACV,KAJD;AAKH,GA1CM,CAAP;AA2CD;;AAED,SAASqB,cAAT,CAAyBC,MAAzB,EAAkD;AAChD,QAAMC,MAAM,GAAG,EAAf;AACA,SAAO,IAAIxB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCqB,IAAAA,MAAM,CAACd,EAAP,CAAU,MAAV,EAAmBgB,KAAD,IAAWD,MAAM,CAACE,IAAP,CAAYC,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAZ,CAA7B;AACAF,IAAAA,MAAM,CAACd,EAAP,CAAU,OAAV,EAAoBQ,GAAD,IAASf,MAAM,CAACe,GAAD,CAAlC;AACAM,IAAAA,MAAM,CAACd,EAAP,CAAU,KAAV,EAAiB,MAAMR,OAAO,CAAC0B,MAAM,CAACE,MAAP,CAAcL,MAAd,EAAsBM,QAAtB,CAA+B,MAA/B,CAAD,CAA9B;AACD,GAJM,CAAP;AAKD;;AAED,eAAeC,KAAf,CAAqB1B,CAArB,EAAwB2B,OAAxB,EAAiC;AAC3B,MAAI;AAAExB,IAAAA,OAAF;AAAWV,IAAAA,KAAX;AAAkBC,IAAAA,KAAlB;AAAyBF,IAAAA,UAAzB;AAAqCoC,IAAAA,QAArC;AAA+CC,IAAAA;AAA/C,MAA8DF,OAAlE;AACA,QAAM;AAACD,IAAAA,KAAD;AAAQI,IAAAA;AAAR,MAAsB,MAAMC,WAAW,CAAC/B,CAAD,CAA7C,CAF2B,CAI3B;;AACA,MAAI,CAAC6B,WAAL,EAAkBA,WAAW,GAAG,IAAI1D,WAAJ,EAAd,CALS,CAM3B;AAEA;;AACA,QAAM6D,MAAM,GAAG,MAAMH,WAAW,CAACH,KAAZ,CAAkBA,KAAlB,EAAyB;AAAEvB,IAAAA,OAAO,EAAE,CAAC,GAAGA,OAAJ,EAAa,GAAGX,UAAhB,CAAX;AAAwCC,IAAAA;AAAxC,GAAzB,CAArB;AACA,QAAM;AAAEwC,IAAAA;AAAF,MAAW,MAAMJ,WAAW,CAACK,cAAZ,CAA2BF,MAA3B,EACnB,iCADmB,CAAvB;;AAEA,MAAIJ,QAAJ,EAAc;AACV,WAAOK,IAAP;AACH,GAFD,MAEO;AACH,WAAOE,IAAI,CAACC,KAAL,CAAW,MAAMnB,cAAc,CAACgB,IAAD,CAA/B,CAAP;AACH;AACN;;AAED,SAASI,cAAT,CAAwBC,GAAxB,EAA6BR,SAA7B,EAAwC;AACtC,MAAI,CAACA,SAAL,EAAgBA,SAAS,GAAGQ,GAAG,CAACR,SAAhB;;AAChB,MAAIQ,GAAG,CAACC,IAAJ,KAAa,KAAjB,EAAwB;AACpB,WAAO;AAACC,MAAAA,GAAG,EAAEF,GAAN;AAAWR,MAAAA;AAAX,KAAP;AACH,GAFD,MAEO;AACH,WAAOO,cAAc,CAACC,GAAG,CAACG,KAAL,EAAYX,SAAZ,CAArB;AACH;AACF;;AAED,eAAeC,WAAf,CAA2BL,KAA3B,EAAkC;AAChC,QAAMgB,WAAW,GAAG9D,SAAS,CAAC8C,KAAD,CAA7B;AACA,QAAM;AAACc,IAAAA,GAAD;AAAMV,IAAAA;AAAN,MAAmBO,cAAc,CAACK,WAAD,EAAcA,WAAW,CAACZ,SAA1B,CAAvC;AACA,QAAMa,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,MAAMC,OAAX,IAAsBP,GAAG,CAACQ,QAA1B,EAAoC;AAChC,SAAK,MAAMC,IAAX,IAAmBhE,MAAM,CAACiE,IAAP,CAAYH,OAAZ,CAAnB,EAAyC;AACxC,UAAIA,OAAO,CAACE,IAAD,CAAP,CAAcE,QAAd,KAA2B,UAA/B,EAA2C;AACxC,YAAIR,aAAa,CAACS,GAAd,CAAkBL,OAAO,CAACE,IAAD,CAAzB,CAAJ,EAAsC;AAClC,gBAAMI,QAAQ,GAAI,GAAEN,OAAO,CAACE,IAAD,CAAP,CAAcxC,KAAM,SAAQoC,WAAY,EAA5D;AACA,cAAI,CAACC,OAAO,CAACC,OAAO,CAACE,IAAD,CAAP,CAAcxC,KAAf,CAAZ,EAAmCqC,OAAO,CAACC,OAAO,CAACE,IAAD,CAAP,CAAcxC,KAAf,CAAP,GAA+B,EAA/B;AAEnCqC,UAAAA,OAAO,CAACC,OAAO,CAACE,IAAD,CAAP,CAAcxC,KAAf,CAAP,CAA6BY,IAA7B,CAAkCgC,QAAlC;AACAR,UAAAA,WAAW,IAAI,CAAf;AACA,gBAAMS,IAAI,GAAG;AAACH,YAAAA,QAAQ,EAAE,UAAX;AAAuB1C,YAAAA,KAAK,EAAE4C;AAA9B,WAAb;AACAN,UAAAA,OAAO,CAACE,IAAD,CAAP,GAAgBK,IAAhB;AACH;;AACDX,QAAAA,aAAa,CAACY,GAAd,CAAkBR,OAAO,CAACE,IAAD,CAAzB;AACF;AAED;AACJ;;AACDhE,EAAAA,MAAM,CAACiE,IAAP,CAAYJ,OAAZ,EAAqBU,OAArB,CAA6BP,IAAI,IAAI;AACjCH,IAAAA,OAAO,CAACG,IAAD,CAAP,CAAcO,OAAd,CAAsBC,KAAK,IAAI;AAC3B,YAAMC,UAAU,GAAGhF,IAAI,CACnBC,QAAQ,CAACsE,IAAD,CADW,EAEnB1E,SAAS,CAAC,sCAAD,CAFU,EAGnBI,QAAQ,CAAC8E,KAAD,CAHW,EAInBhF,YAAY,EAJO,CAAvB;AAMA+D,MAAAA,GAAG,CAACQ,QAAJ,CAAa3B,IAAb,CAAkBqC,UAAlB;AACH,KARD;AASH,GAVD;AAWA,QAAM1D,CAAC,GAAG;AAACuC,IAAAA,IAAI,EAAE,SAAP;AAAkBE,IAAAA,KAAK,EAAE;AAACF,MAAAA,IAAI,EAAE,KAAP;AAAcS,MAAAA,QAAQ,EAAER,GAAG,CAACQ;AAA5B,KAAzB;AAAgElB,IAAAA,SAAS,EAAE6B,KAAK,CAACpC,IAAN,CAAWoB,aAAX;AAA3E,GAAV;AACA,SAAO;AAACjB,IAAAA,KAAK,EAAE7C,QAAQ,CAACmB,CAAD,CAAhB;AAAqB8B,IAAAA,SAAS,EAAE6B,KAAK,CAACpC,IAAN,CAAWoB,aAAX;AAAhC,GAAP;AACD","sourcesContent":["const QueryEngine = require('@comunica/query-sparql').QueryEngine;\r\nconst N3 = require('n3');\r\nconst { DataFactory } = N3;\r\nconst { namedNode, literal, defaultGraph, quad, variable } = DataFactory;\r\nconst {translate, toSparql} = require(\"sparqlalgebrajs\")\r\n\r\nfunction extract(jsonld: object[], uri: string) {\r\n  return Object.assign({}, ...jsonld.filter((i) => i[\"@id\"] === uri));\r\n}\r\n\r\nconst prefixes = `\r\nprefix owl: <http://www.w3.org/2002/07/owl#> \r\nprefix beo: <http://pi.pauwel.be/voc/buildingelement#>\r\nprefix props: <http://example.org/props#> \r\nprefix lbds: <https://w3id.org/lbdserver#>\r\nprefix schema: <http://schema.org/>\r\n`\r\n\r\nfunction inference(myEngine, { registries, fetch, store }): Promise<void> {\r\n  return new Promise(async (resolve, reject) => {\r\n    const start = new Date()\r\n      const q = prefixes + `\r\n      CONSTRUCT {\r\n       ?s1 owl:sameAs ?s2 .\r\n       ?s2 owl:sameAs ?s1 .\r\n      } WHERE {\r\n          {?concept1 lbds:hasReference/lbds:hasIdentifier/<https://w3id.org/lbdserver#value> ?s1 .\r\n          ?concept2 lbds:hasReference/lbds:hasIdentifier/<https://w3id.org/lbdserver#value> ?s2 .\r\n          ?concept1 owl:sameAs ?concept2 .} UNION {\r\n            ?concept1 lbds:hasReference/lbds:hasIdentifier/<https://w3id.org/lbdserver#value> ?s1, ?s2 .\r\n          }\r\n          FILTER(isIRI(?s1) && isIRI(?s2))\r\n          FILTER(?s1 != ?s2)\r\n      }`\r\n      const quadStream = await myEngine.queryQuads(q, {\r\n          sources: registries,\r\n          fetch\r\n      });\r\n\r\n      quadStream.on('data', (res) => {\r\n        // console.log('res.subject, res.object.id', res.subject.id, res.object.id)\r\n            const q = quad(\r\n                namedNode(res.subject.id),\r\n                namedNode(res.predicate.value),\r\n                namedNode(res.object.id),\r\n                defaultGraph()\r\n            )\r\n            store.addQuad(q)\r\n          \r\n\r\n      });\r\n\r\n      quadStream.on('error', (err) => {\r\n        reject(err)\r\n    });\r\n\r\n      quadStream.on('end', () => {\r\n        const duration = new Date().getTime() - start.getTime()\r\n        console.log('duration inference', duration)\r\n          resolve()\r\n      })\r\n  })\r\n}\r\n\r\nfunction streamToString (stream): Promise<string> {\r\n  const chunks = [];\r\n  return new Promise((resolve, reject) => {\r\n    stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)));\r\n    stream.on('error', (err) => reject(err));\r\n    stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));\r\n  })\r\n}\r\n\r\nasync function query(q, options) {\r\n      let { sources, fetch, store, registries, asStream, queryEngine} = options\r\n      const {query, variables } = await mutateQuery(q)\r\n\r\n      // const newQ = prefixes + \"Select * where {?s1 owl:sameAs ?s2} \"\r\n      if (!queryEngine) queryEngine = new QueryEngine();\r\n      // if (!store) store = new N3.Store();\r\n      \r\n      // await inference(myEngine, { registries, fetch, store })\r\n      const result = await queryEngine.query(query, { sources: [...sources, ...registries], fetch })\r\n      const { data } = await queryEngine.resultToString(result,\r\n          'application/sparql-results+json');\r\n      if (asStream) {\r\n          return data\r\n      } else {\r\n          return JSON.parse(await streamToString(data))\r\n      }\r\n}\r\n\r\nfunction findLowerLevel(obj, variables) {\r\n  if (!variables) variables = obj.variables\r\n  if (obj.type === \"bgp\") {\r\n      return {bgp: obj, variables}\r\n  } else {\r\n      return findLowerLevel(obj.input, variables)\r\n  }\r\n}\r\n\r\nasync function mutateQuery(query) {\r\n  const translation = translate(query);\r\n  const {bgp, variables} = findLowerLevel(translation, translation.variables)\r\n  const usedVariables = new Set()\r\n  let aliasNumber = 1\r\n  let aliases = {}\r\n  for (const pattern of bgp.patterns) {\r\n      for (const item of Object.keys(pattern)) {\r\n       if (pattern[item].termType === \"Variable\") {\r\n          if (usedVariables.has(pattern[item])) {\r\n              const newVName = `${pattern[item].value}_alias${aliasNumber}`\r\n              if (!aliases[pattern[item].value]) aliases[pattern[item].value] = []\r\n\r\n              aliases[pattern[item].value].push(newVName)\r\n              aliasNumber += 1\r\n              const newV = {termType: \"Variable\", value: newVName}\r\n              pattern[item] = newV\r\n          }\r\n          usedVariables.add(pattern[item])\r\n       }\r\n         \r\n      }\r\n  }\r\n  Object.keys(aliases).forEach(item => {\r\n      aliases[item].forEach(alias => {\r\n          const newPattern = quad(\r\n              variable(item),\r\n              namedNode(\"http://www.w3.org/2002/07/owl#sameAs\"),\r\n              variable(alias),\r\n              defaultGraph()\r\n          )\r\n          bgp.patterns.push(newPattern)\r\n      })\r\n  })\r\n  const q = {type: \"project\", input: {type: \"bgp\", patterns: bgp.patterns}, variables: Array.from(usedVariables)}\r\n  return {query: toSparql(q), variables: Array.from(usedVariables)}\r\n}\r\n\r\n\r\nexport { extract, streamToString, query };\r\n"],"file":"functions.js"}