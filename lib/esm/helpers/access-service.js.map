{"version":3,"sources":["../../../src/helpers/access-service.ts"],"names":["AccessService","verbose","constructor","fetch","makePublic","resourceURL","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","makeFilePublic","FILE","type","userWebID","resourceWithAcl","DATASET","resourceAcl","getResourceAcl","updatedAcl","undefined","newAccess","logAccessInfo","datasetWithAcl","Error","access","resource","agent","console","log","JSON","stringify","controlRead","controlWrite"],"mappings":"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","sourcesContent":["// Import from \"@inrupt/solid-client\"\r\nimport {\r\n    getSolidDatasetWithAcl,\r\n    setPublicResourceAccess,\r\n    hasResourceAcl,\r\n    hasAccessibleAcl,\r\n    getResourceAcl,\r\n    createAclFromFallbackAcl,\r\n    hasFallbackAcl,\r\n    saveAclFor,\r\n    setAgentResourceAccess,\r\n    getFileWithAcl\r\n} from \"@inrupt/solid-client\";\r\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\r\n\r\nexport default class AccessService{\r\n\r\n    public fetch;\r\n    public verbose: boolean = false;\r\n\r\n    constructor(fetch: any, verbose: boolean = false){\r\n        this.fetch = fetch;\r\n        this.verbose = verbose;\r\n    }\r\n\r\n    // Make a resource public\r\n    public async makePublic(resourceURL: string) {\r\n        // I would by default not grant the public appending rights...\r\n        const accessRights: AccessRights = { read: true, append: false, write: false, control: false };\r\n        return this.setResourceAccess(resourceURL, accessRights, ResourceType.CONTAINER);\r\n    }\r\n\r\n    public async makeFilePublic(resourceURL: string) {\r\n        const accessRights: AccessRights = { read: true, append: true, write: false, control: false };\r\n        return this.setResourceAccess(resourceURL, accessRights, ResourceType.FILE);\r\n    }\r\n\r\n    public async setResourceAccess(resourceURL: string, accessRights: AccessRights, type: ResourceType, userWebID?: string){\r\n\r\n        // Get resource with ACL\r\n        let resourceWithAcl: any\r\n        if(type == ResourceType.DATASET || type == ResourceType.CONTAINER){\r\n            resourceWithAcl = await getSolidDatasetWithAcl(resourceURL, {fetch: this.fetch});\r\n        }\r\n\r\n        if(type == ResourceType.FILE){\r\n            resourceWithAcl = await getFileWithAcl(resourceURL, {fetch: this.fetch});\r\n        }\r\n        \r\n        // Get resource ACL\r\n        const resourceAcl = await this.getResourceAcl(resourceWithAcl);\r\n        \r\n        // Update ACL access\r\n        let updatedAcl;\r\n\r\n        // If no user webID provided, set the public access\r\n        if(!userWebID || userWebID == undefined){\r\n            updatedAcl = setPublicResourceAccess(\r\n                resourceAcl,\r\n                accessRights,\r\n            );\r\n        }\r\n        \r\n        // If user webID provided, set the access for that particular user\r\n        else{\r\n            updatedAcl = setAgentResourceAccess(\r\n                resourceAcl,\r\n                userWebID,\r\n                accessRights,\r\n            );\r\n        }\r\n\r\n        // Save ACL\r\n        const newAccess = await saveAclFor(resourceWithAcl, updatedAcl, {fetch: this.fetch});\r\n\r\n        this.verbose && this.logAccessInfo(accessRights, resourceURL);\r\n\r\n        return newAccess;\r\n\r\n    }\r\n\r\n    // Obtain the SolidDataset's own ACL, if available,\r\n    // or initialise a new one, if possible:\r\n    private async getResourceAcl(datasetWithAcl: any){\r\n\r\n        let resourceAcl;\r\n        if (!hasResourceAcl(datasetWithAcl)) {\r\n        if (!hasAccessibleAcl(datasetWithAcl)) {\r\n            throw new Error(\r\n            \"The current user does not have permission to change access rights to this Resource.\"\r\n            );\r\n        }\r\n        if (!hasFallbackAcl(datasetWithAcl)) {\r\n            throw new Error(\r\n            \"The current user does not have permission to see who currently has access to this Resource.\"\r\n            );\r\n            // Alternatively, initialise a new empty ACL as follows,\r\n            // but be aware that if you do not give someone Control access,\r\n            // **nobody will ever be able to change Access permissions in the future**:\r\n            // resourceAcl = createAcl(myDatasetWithAcl);\r\n        }\r\n            resourceAcl = createAclFromFallbackAcl(datasetWithAcl);\r\n        } else {\r\n            resourceAcl = getResourceAcl(datasetWithAcl);\r\n        }\r\n\r\n        return resourceAcl;\r\n    }\r\n\r\n    private logAccessInfo(access: any, resource: string, agent: string = \"\"){\r\n        if (access === null) {\r\n            console.log(\"Could not load access details for this Resource.\");\r\n        } else {\r\n            if(!agent) console.log(`${agent}'s Access:: `, JSON.stringify(access));\r\n            else console.log(`Public Access:: `, JSON.stringify(access));\r\n            console.log(\"...\", agent, (access.read ? 'CAN' : 'CANNOT'), \"read the Resource\", resource);\r\n            console.log(\"...\", agent, (access.append ? 'CAN' : 'CANNOT'), \"add data to the Resource\", resource);\r\n            console.log(\"...\", agent, (access.write ? 'CAN' : 'CANNOT'), \"change data in the Resource\", resource);\r\n\r\n            if ('controlRead' in access){\r\n                console.log(\"...\", agent, (access.controlRead ? 'CAN' : 'CANNOT'), \"see access to the Resource\", resource);\r\n                console.log(\"...\", agent, (access.controlWrite ? 'CAN' : 'CANNOT'), \"change access to the Resource\", resource);\r\n            }else{\r\n                console.log(\"...\", agent, (access.control ? 'CAN' : 'CANNOT'), \"change access to the Resource\", resource);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}"],"file":"access-service.js"}