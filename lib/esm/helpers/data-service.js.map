{"version":3,"file":"data-service.js","names":["DataService","verbose","constructor","fetch","accessService","AccessService","writeFileToPod","file","targetFileURL","makePublic","contentType","requestOptions","method","headers","body","redirect","makeFilePublic","getFile","fileURL","console","log","deleteFile","sparqlUpdate","fileUrl","query","response","deleteContainer","containerURL","includeSubContainers","dataset","containerResources","resource","createContainer","datasetWithAcl"],"sources":["../../../src/helpers/data-service.ts"],"sourcesContent":["// Import from \"@inrupt/solid-client\"\r\nimport {\r\n    getSolidDataset,\r\n    getFile,\r\n    createContainerAt,\r\n    deleteFile,\r\n    deleteContainer,\r\n    getContainedResourceUrlAll,\r\n    overwriteFile,\r\n    getSourceUrl,\r\n    isContainer\r\n} from \"@inrupt/solid-client\";\r\nimport AccessService from \"./access-service\";\r\nimport { Mimetype } from \"./BaseDefinitions\";\r\n\r\nexport default class DataService{\r\n\r\n    public fetch;\r\n    public verbose: boolean = false;\r\n    public accessService: AccessService;\r\n\r\n    constructor(fetch: any, verbose: boolean = false){\r\n        this.fetch = fetch;\r\n        this.verbose = verbose;\r\n        this.accessService = new AccessService(fetch);\r\n    }\r\n\r\n    /**\r\n     * FILES\r\n     */\r\n\r\n    // Upload File to the targetFileURL.\r\n    // If the targetFileURL exists, overwrite the file.\r\n    // If the targetFileURL does not exist, create the file at the location.\r\n    public async writeFileToPod(file: File|Buffer, targetFileURL: string, makePublic: boolean = false, contentType: string) {\r\n\r\n        var requestOptions = {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": contentType,\r\n            },\r\n            body: file,\r\n            redirect: \"follow\",\r\n          };\r\n          await this.fetch(targetFileURL, requestOptions);\r\n\r\n\r\n        // const savedFile = await overwriteFile(\r\n        //   targetFileURL,                            // URL for the file.\r\n        //   file,                                     // File\r\n        //   { contentType, fetch: this.fetch }        // mimetype if known, fetch from the authenticated session\r\n        // );\r\n        // this.verbose && console.log(`File saved at ${getSourceUrl(savedFile)}`);\r\n\r\n        if(makePublic){\r\n            await this.accessService.makeFilePublic(targetFileURL);\r\n        }\r\n\r\n        // return savedFile;\r\n\r\n    }\r\n\r\n\r\n    public async getFile(fileURL: string) {\r\n        this.verbose && console.log(`Getting file ${fileURL}...`);\r\n        return getFile(\r\n            fileURL,                // File in Pod to Read\r\n            { fetch: this.fetch }   // fetch from authenticated session\r\n        );\r\n    }\r\n\r\n    public async deleteFile(fileURL: string) {\r\n        this.verbose && console.log(`Deleting file ${fileURL}...`);\r\n        return deleteFile(\r\n            fileURL,                // File in Pod to Read\r\n            { fetch: this.fetch }   // fetch from authenticated session\r\n        );\r\n    }\r\n\r\n    /**\r\n     * SPARQL\r\n     */\r\n    public async sparqlUpdate(fileUrl: string, query: string) {\r\n    var requestOptions = {\r\n        method: \"PATCH\",\r\n        headers: { \"Content-Type\": \"application/sparql-update\" },\r\n        body: query,\r\n        redirect: \"follow\",\r\n    };\r\n    \r\n        const response =  await this.fetch(fileUrl, requestOptions);\r\n        return response\r\n    }\r\n\r\n\r\n    /**\r\n     * CONTAINERS\r\n     */\r\n\r\n    public async deleteContainer(containerURL: string, includeSubContainers: boolean = true) {\r\n\r\n        // If deleting subcontainers, we need to first get these\r\n        if(includeSubContainers){\r\n            // console.log(`Deleting container ${containerURL} including its subfolders...`);\r\n            const dataset = await getSolidDataset( containerURL, { fetch: this.fetch } );\r\n            const containerResources = await getContainedResourceUrlAll( dataset );\r\n\r\n            // Delete resources (containers and files)\r\n            for(let resource of containerResources){\r\n                if(isContainer(resource)){\r\n                    await this.deleteContainer(resource, true);\r\n                }\r\n                else{\r\n                    await this.deleteFile(resource);\r\n                }\r\n            }\r\n        }\r\n\r\n        // console.log(`Deleting container ${containerURL}...`);\r\n        return deleteContainer( containerURL, { fetch: this.fetch } );\r\n        \r\n    }\r\n\r\n    public async createContainer(containerURL: string, makePublic: boolean = false) {\r\n        \r\n        this.verbose && console.log(`Creating container ${containerURL}...`);\r\n\r\n        const datasetWithAcl = await createContainerAt(\r\n            containerURL,           // File in Pod to Read\r\n            { fetch: this.fetch }   // fetch from authenticated session\r\n        );\r\n\r\n        if(makePublic){\r\n            await this.accessService.makePublic(containerURL);\r\n        }\r\n\r\n        return datasetWithAcl;\r\n    }\r\n\r\n}"],"mappings":"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"}