{"version":3,"sources":["../../../src/helpers/data-service.ts"],"names":["DataService","verbose","constructor","fetch","accessService","AccessService","writeFileToPod","file","targetFileURL","makePublic","contentType","requestOptions","method","headers","body","redirect","makeFilePublic","getFile","fileURL","console","log","deleteFile","sparqlUpdate","fileUrl","query","response","deleteContainer","containerURL","includeSubContainers","dataset","containerResources","resource","createContainer","datasetWithAcl"],"mappings":"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","sourcesContent":["// Import from \"@inrupt/solid-client\"\nimport {\n    getSolidDataset,\n    getFile,\n    createContainerAt,\n    deleteFile,\n    deleteContainer,\n    getContainedResourceUrlAll,\n    overwriteFile,\n    getSourceUrl,\n    isContainer\n} from \"@inrupt/solid-client\";\nimport AccessService from \"./access-service\";\nimport { Mimetype } from \"./BaseDefinitions\";\n\nexport default class DataService{\n\n    public fetch;\n    public verbose: boolean = false;\n    public accessService: AccessService;\n\n    constructor(fetch: any, verbose: boolean = false){\n        this.fetch = fetch;\n        this.verbose = verbose;\n        this.accessService = new AccessService(fetch);\n    }\n\n    /**\n     * FILES\n     */\n\n    // Upload File to the targetFileURL.\n    // If the targetFileURL exists, overwrite the file.\n    // If the targetFileURL does not exist, create the file at the location.\n    public async writeFileToPod(file: File|Buffer, targetFileURL: string, makePublic: boolean = false, contentType: string) {\n\n        var requestOptions = {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": contentType,\n            },\n            body: file,\n            redirect: \"follow\",\n          };\n          await this.fetch(targetFileURL, requestOptions);\n\n\n        // const savedFile = await overwriteFile(\n        //   targetFileURL,                            // URL for the file.\n        //   file,                                     // File\n        //   { contentType, fetch: this.fetch }        // mimetype if known, fetch from the authenticated session\n        // );\n        // this.verbose && console.log(`File saved at ${getSourceUrl(savedFile)}`);\n\n        if(makePublic){\n            await this.accessService.makeFilePublic(targetFileURL);\n        }\n\n        // return savedFile;\n\n    }\n\n\n    public async getFile(fileURL: string) {\n        this.verbose && console.log(`Getting file ${fileURL}...`);\n        return getFile(\n            fileURL,                // File in Pod to Read\n            { fetch: this.fetch }   // fetch from authenticated session\n        );\n    }\n\n    public async deleteFile(fileURL: string) {\n        this.verbose && console.log(`Deleting file ${fileURL}...`);\n        return deleteFile(\n            fileURL,                // File in Pod to Read\n            { fetch: this.fetch }   // fetch from authenticated session\n        );\n    }\n\n    /**\n     * SPARQL\n     */\n    public async sparqlUpdate(fileUrl: string, query: string) {\n    var requestOptions = {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/sparql-update\" },\n        body: query,\n        redirect: \"follow\",\n    };\n    \n        const response =  await this.fetch(fileUrl, requestOptions);\n        return response\n    }\n\n\n    /**\n     * CONTAINERS\n     */\n\n    public async deleteContainer(containerURL: string, includeSubContainers: boolean = true) {\n\n        // If deleting subcontainers, we need to first get these\n        if(includeSubContainers){\n            console.log(`Deleting container ${containerURL} including its subfolders...`);\n            const dataset = await getSolidDataset( containerURL, { fetch: this.fetch } );\n            const containerResources = await getContainedResourceUrlAll( dataset );\n\n            // Delete resources (containers and files)\n            for(let resource of containerResources){\n                if(isContainer(resource)){\n                    await this.deleteContainer(resource, true);\n                }\n                else{\n                    await this.deleteFile(resource);\n                }\n            }\n        }\n\n        console.log(`Deleting container ${containerURL}...`);\n        return deleteContainer( containerURL, { fetch: this.fetch } );\n        \n    }\n\n    public async createContainer(containerURL: string, makePublic: boolean = false) {\n        \n        this.verbose && console.log(`Creating container ${containerURL}...`);\n\n        const datasetWithAcl = await createContainerAt(\n            containerURL,           // File in Pod to Read\n            { fetch: this.fetch }   // fetch from authenticated session\n        );\n\n        if(makePublic){\n            await this.accessService.makePublic(containerURL);\n        }\n\n        return datasetWithAcl;\n    }\n\n}"],"file":"data-service.js"}