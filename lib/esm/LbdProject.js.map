{"version":3,"sources":["../../src/LbdProject.ts"],"names":["LbdProject","constructor","session","accessPoint","endsWith","fetch","localProject","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LbdService","checkExistence","status","method","then","result","init","data","headers","Accept","i","json","create","existingPartialProjects","options","makePublic","local","push","createContainer","aclDefault","ACL","default","Authorization","agentClass","FOAF","Agent","sparqlUpdate","createRegistryContainer","LBD","hasDatasetRegistry","referenceContainerUrl","hasReferenceRegistry","hasServiceRegistry","part","addPartialProject","q","DCTERMS","creator","info","webId","Object","keys","q0","key","referenceMeta","LbdDataset","addDistribution","Buffer","from","aggregates","addStakeholder","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","delete","deleteContainer","findAllPartialProjects","findPartialProject","repo","getProjectRegistry","partialProjectOfStakeholder","addPartialProjectByStakeholder","partialProjectUrl","containerName","property","containerUrl","addDataset","id","subject","datasetRegistry","datasetUrl","theDataset","deleteDataset","ds","deleteDatasetById","datasetId","getAllDatasetUrls","myEngine","sources","partials","p","dsReg","query","LDP","contains","results","resultToString","asStream","parsed","bindings","map","value","addConcept","referenceRegistry","ref","LbdConcept","getReferenceRegistry","getDatasetRegistry","getAllReferenceRegistries","registries","partial","reg","deleteConcept","url","parts","pop","join","getConceptByIdentifier","identifier","dataset","distribution","queryEngine","QueryEngine","startsWith","hasReference","inDataset","hasIdentifier","queryBindings","r","toArray","raw","get","theConcept","getConcept","undefined","getConceptByIdentifierOld","rq","DCAT","downloadURL","accessURL","bindingsStream","res","item","downloadURLs","OWL","sameAs","aliases","Set","forEach","bi","add","concept","references","v","values","idQ","inDistribution","response","b","conceptRegistry","q_alias","bindingsStream0","Array","alias","q1","Concept","directQuery"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\r\nimport DataService from \"./helpers/data-service\";\r\nimport {LbdConcept} from \"./LbdConcept\";\r\nimport {\r\n  newEngine,\r\n  IQueryResultBindings,\r\n  ActorInitSparql,\r\n} from \"@comunica/actor-init-sparql\";\r\nimport {LbdDataset} from \"./LbdDataset\";\r\nimport LBD from \"./helpers/vocab/lbds\";\r\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\r\nimport {LbdService} from \"./LbdService\";\r\nimport { extract, query } from \"./helpers/functions\";\r\nimport { v4 } from \"uuid\";\r\nimport { ACL, DCAT, DCTERMS, FOAF, OWL } from \"@inrupt/vocab-common-rdf\";\r\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\r\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\r\nimport { LDP } from \"@inrupt/vocab-common-rdf\";\r\nimport { getQueryResult, parseStream } from \"./helpers/utils\";\r\nimport { QueryEngine } from \"@comunica/query-sparql\";\r\n\r\nexport class LbdProject {\r\n  public fetch;\r\n  public accessService: AccessService;\r\n  public dataService: DataService;\r\n  public lbdService: LbdService;\r\n  public projectId: string;\r\n  public accessPoint: string;\r\n  public data: object[];\r\n\r\n  public session: BrowserSession | NodeSession;\r\n\r\n  // include queryEngine to allow caching of querydata etc.\r\n  public localProject: string;\r\n\r\n  /**\r\n   * \r\n   * @param session an (authenticated) Solid session\r\n   * @param accessPoint The main accesspoint of the project. This is an aggregator containing the different partial projects of the LBDserver instance\r\n   */\r\n  constructor(\r\n    session: BrowserSession | NodeSession,\r\n    accessPoint: string\r\n      ) {\r\n    if (!accessPoint.endsWith(\"/\")) accessPoint += \"/\";\r\n    this.session = session;\r\n    this.fetch = session.fetch;\r\n    this.accessPoint = accessPoint;\r\n    this.localProject = accessPoint + \"local/\";\r\n    this.projectId = accessPoint.split(\"/\")[accessPoint.split(\"/\").length - 2];\r\n    this.accessService = new AccessService(session.fetch);\r\n    this.dataService = new DataService(session.fetch);\r\n    this.lbdService = new LbdService(session);\r\n  }\r\n\r\n  /**\r\n   * @description Checks whether a project with this access point already exists\r\n   * @returns Boolean: true = the project exists / false = the project doesn't exist\r\n   */\r\n  public async checkExistence() {\r\n    const status = await this.fetch(this.accessPoint, { method: \"HEAD\" }).then(\r\n      (result) => result.status\r\n    );\r\n    if (status === 200) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /** \r\n   * @description Initialize the project in your application. In short, this adds project metadata to your LbdProject instance\r\n   */\r\n  public async init() {\r\n    const data = await this.fetch(this.localProject, {\r\n      headers: { Accept: \"application/ld+json\" },\r\n    }).then((i) => i.json());\r\n    this.data = data;\r\n    return data;\r\n  }\r\n\r\n\r\n  /**\r\n   * @description Create an LBDserver project on your Pod\r\n   * @param existingPartialProjects optional: if the project is already initialized on other stakeholder pods. Adds the existing partial projects to the Pod-specific access point\r\n   * @param options Metadata for the project. To be in format {[predicate]: value}\r\n   * @param makePublic access rights: true = public; false = only the creator\r\n   */\r\n  public async create(\r\n    existingPartialProjects: string[] = [],\r\n    options: object = {},\r\n    makePublic: boolean = false\r\n  ) {\r\n    const local = this.accessPoint + \"local/\";\r\n    existingPartialProjects.push(local);\r\n\r\n    // create global access point\r\n    await this.dataService.createContainer(this.accessPoint, makePublic);\r\n    await this.dataService.createContainer(local, makePublic);\r\n    if (makePublic) {\r\n      let aclDefault = `INSERT {?rule <${ACL.default}> <${local}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`;\r\n      await this.dataService.sparqlUpdate(local + \".acl\", aclDefault);\r\n    }\r\n\r\n    // create different registries\r\n    await this.createRegistryContainer(\r\n      \"datasets/\",\r\n      makePublic,\r\n      LBD.hasDatasetRegistry\r\n    );\r\n    const referenceContainerUrl = await this.createRegistryContainer(\r\n      \"references/\",\r\n      makePublic,\r\n      LBD.hasReferenceRegistry\r\n    );\r\n    await this.createRegistryContainer(\r\n      \"services/\",\r\n      makePublic,\r\n      LBD.hasServiceRegistry\r\n    );\r\n\r\n    for (const part of existingPartialProjects) {\r\n      await this.addPartialProject(part);\r\n    }\r\n\r\n    let q = `INSERT DATA {<${this.accessPoint}> <${DCTERMS.creator}> \"${this.session.info.webId}\" . }`;\r\n    await this.dataService.sparqlUpdate(local, q);\r\n    await this.dataService.sparqlUpdate(this.accessPoint, q);\r\n\r\n    // create optional metadata (e.g. label etc.)\r\n    if (Object.keys(options).length > 0) {\r\n      let q0 = `INSERT DATA { `;\r\n      for (const key of Object.keys(options)) {\r\n        q0 += `<${this.accessPoint}> <${key}> \"${options[key]}\" .`;\r\n      }\r\n      q0 += \"}\";\r\n      await this.dataService.sparqlUpdate(this.accessPoint, q0);\r\n    }\r\n\r\n    const referenceMeta = new LbdDataset(this.session, referenceContainerUrl);\r\n    await referenceMeta.create();\r\n    await referenceMeta.addDistribution(\r\n      Buffer.from(\"\"),\r\n      \"text/turtle\",\r\n      {},\r\n      \"data\",\r\n      makePublic\r\n    );\r\n    await this.init();\r\n  }\r\n\r\n  /**\r\n   * @description Add a partial project to a Pod-specific access point\r\n   * @param part Partial project to add to a Pod-specific access point\r\n   */\r\n  public async addPartialProject(part: string) {\r\n    const q0 = `INSERT DATA {\r\n        <${this.accessPoint}> <${LBD.aggregates}> <${part}> .\r\n        }`;\r\n    await this.dataService.sparqlUpdate(this.accessPoint, q0);\r\n  }\r\n\r\n  /**\r\n   * @description Add a stakeholder to an LBDserver project\r\n   * @param webId The WebID/card of the stakeholder\r\n   * @param accessRights the access rights this stakeholder should have.\r\n   */\r\n  public async addStakeholder(\r\n    webId: string,\r\n    accessRights: AccessRights = {\r\n      read: true,\r\n      append: false,\r\n      write: false,\r\n      control: false,\r\n    }\r\n  ) {\r\n    await this.accessService.setResourceAccess(\r\n      this.accessPoint,\r\n      accessRights,\r\n      ResourceType.CONTAINER,\r\n      webId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @description delete an LBDserver project (locally)\r\n   */\r\n  public async delete() {\r\n    await this.dataService.deleteContainer(this.accessPoint, true);\r\n  }\r\n\r\n  /**\r\n   * @description find all the partial projects from the indicated project access point\r\n   */\r\n  public async findAllPartialProjects() {\r\n    return await getQueryResult(\r\n      this.accessPoint,\r\n      LBD.aggregates,\r\n      this.fetch,\r\n      false\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @description Find the partial project provided by this stakeholder\r\n   * @param webId The webID of the stakeholder whom's partial project you want to find\r\n   * @returns The URL of the partial project\r\n   */\r\n  public async findPartialProject(webId: string) {\r\n    const repo = await this.lbdService.getProjectRegistry(webId);\r\n    // console.log('repo', repo)\r\n    const partialProjectOfStakeholder = repo + this.projectId + \"/local/\";\r\n    return partialProjectOfStakeholder\r\n    // console.log('partialProjectOfStakeholder', partialProjectOfStakeholder)\r\n    // const status = await this.fetch(partialProjectOfStakeholder, {\r\n    //   method: \"HEAD\",\r\n    // }).then((res) => res.status);\r\n    // if (status === 200) {\r\n    //   return partialProjectOfStakeholder;\r\n    // } else {\r\n    //   throw new Error(\r\n    //     `UNAUTHORIZED: This repository does not exist or you don't have the required access rights`\r\n    //   );\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * @description Add this stakeholder's partial project corresponding with this project (same GUID)\r\n   * @param webId The webID of the stakeholder whom's partial project you want to add\r\n   * @returns the URL of the partial project\r\n   */\r\n  public async addPartialProjectByStakeholder(webId: string) {\r\n    const partialProjectUrl = await this.findPartialProject(webId);\r\n    await this.addPartialProject(partialProjectUrl);\r\n    return partialProjectUrl;\r\n  }\r\n\r\n  private async createRegistryContainer(containerName, makePublic, property) {\r\n    if (!containerName.endsWith(\"/\")) containerName += \"/\";\r\n\r\n    const containerUrl = this.localProject + containerName;\r\n    await this.dataService.createContainer(containerUrl, makePublic);\r\n    const q0 = `INSERT DATA {\r\n        <${this.localProject}> <${property}> <${containerUrl}> .\r\n      }`;\r\n    await this.dataService.sparqlUpdate(this.localProject, q0);\r\n    return containerUrl;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  /////////////////////// DATASETS ////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description Add a dataset to the project\r\n   * @param makePublic initial access rights for the dataset\r\n   * @param id optional id for the dataset - a GUID is created by default\r\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\r\n   * @returns\r\n   */\r\n  public async addDataset(\r\n    options: object = {},\r\n    makePublic: boolean = false,\r\n    id: string = v4()\r\n  ): Promise<LbdDataset> {\r\n    const subject = extract(this.data, this.localProject);\r\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"];\r\n    const datasetUrl = datasetRegistry + id + \"/\";\r\n    const theDataset = new LbdDataset(this.session, datasetUrl);\r\n    await theDataset.create(options, makePublic);\r\n    return theDataset;\r\n  }\r\n\r\n  /**\r\n   * @description Delete a dataset by URL\r\n   * @param datasetUrl The URL of the dataset \r\n   */\r\n  public async deleteDataset(datasetUrl: string) {\r\n    if (!datasetUrl.endsWith(\"/\")) datasetUrl += \"/\";\r\n    const ds = new LbdDataset(this.session, datasetUrl);\r\n    await ds.delete();\r\n  }\r\n\r\n  /**\r\n   * @description delete a dataset by its ID\r\n   * @param datasetId The GUID of the dataset to be deleted\r\n   */\r\n  public async deleteDatasetById(datasetId: string) {\r\n    const subject = extract(this.data, this.localProject);\r\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"];\r\n    const datasetUrl = datasetRegistry + datasetId + \"/\";\r\n    const ds = new LbdDataset(this.session, datasetUrl);\r\n    await ds.delete();\r\n  }\r\n\r\n  /**\r\n   * @description Get all datasets within this project\r\n   * @param options {query: query to override, asStream: consume the results as a stream, local: query only the local project}\r\n   * @returns \r\n   */\r\n  public async getAllDatasetUrls(options?: {\r\n    query: string;\r\n    asStream: boolean;\r\n    local: boolean;\r\n  }) {\r\n    const myEngine = newEngine();\r\n    const subject = extract(this.data, this.localProject);\r\n    const sources = [];\r\n    if (options && options.local) {\r\n      sources.push(subject[LBD.hasDatasetRegistry][0][\"@id\"]);\r\n    } else {\r\n      const partials = await this.findAllPartialProjects();\r\n      for (const p of partials) {\r\n        const dsReg = await getQueryResult(\r\n          p,\r\n          LBD.hasDatasetRegistry,\r\n          this.fetch,\r\n          true\r\n        );\r\n        sources.push(dsReg);\r\n      }\r\n    }\r\n    let q;\r\n    if (!options || !options.query) {\r\n      q = `SELECT ?dataset WHERE {?registry <${LDP.contains}> ?dataset}`;\r\n    } else {\r\n      q = options.query;\r\n    }\r\n\r\n    const results = await myEngine.query(q, { sources, fetch: this.fetch });\r\n    const { data } = await myEngine.resultToString(\r\n      results,\r\n      \"application/sparql-results+json\"\r\n    );\r\n    if (options && options.asStream) {\r\n      return data;\r\n    } else {\r\n      const parsed = await parseStream(data);\r\n      return parsed[\"results\"].bindings.map((i) => i[\"dataset\"].value);\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  ////////////////////// REFERENCES////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description Add a concept to the local project registry\r\n   * @returns an LBDconcept Instance\r\n   */\r\n  public async addConcept(id?): Promise<LbdConcept> {\r\n    const subject = extract(this.data, this.localProject);\r\n    const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"];\r\n    const ref = new LbdConcept(this.session, referenceRegistry);\r\n    await ref.create(id);\r\n    return ref;\r\n  }\r\n\r\n  public getReferenceRegistry() {\r\n    const subject = extract(this.data, this.localProject);\r\n    return subject[LBD.hasReferenceRegistry][0][\"@id\"];\r\n  }\r\n\r\n  public getDatasetRegistry() {\r\n    const subject = extract(this.data, this.localProject);\r\n    return subject[LBD.hasDatasetRegistry][0][\"@id\"];\r\n  }\r\n\r\n  private async getAllReferenceRegistries() {\r\n    const partials = await this.findAllPartialProjects()\r\n    const registries = []\r\n\r\n    for (const partial of partials) {\r\n      const reg = await getQueryResult(partial, LBD.hasReferenceRegistry, this.fetch, true)\r\n      registries.push(reg + \"data\")\r\n    }\r\n\r\n    return registries\r\n  }\r\n\r\n  /**\r\n   * @description delete a concept by ID\r\n   * @param url the URL of the concept to be deleted\r\n   */\r\n  public async deleteConcept(url: string) {\r\n    const parts = url.split(\"/\");\r\n    const id = parts.pop();\r\n    const referenceRegistry = parts.join(\"/\");\r\n    const ref = new LbdConcept(this.session, referenceRegistry);\r\n    await ref.delete();\r\n  }\r\n\r\n  /**\r\n   * @description Find the main concept by one of its representations: an identifier and a dataset\r\n   * @param identifier the Identifier of the representation\r\n   * @param dataset the dataset where the representation resides\r\n   * @param distribution (optional) the distribution of the representation\r\n   * @returns \r\n   */\r\n  public async getConceptByIdentifier(\r\n    identifier: string,\r\n    dataset: string,\r\n    distribution?: string,\r\n    options?: {queryEngine: QueryEngine}\r\n  ) {\r\n    let myEngine\r\n    if (options && options.queryEngine) {\r\n      myEngine = options.queryEngine\r\n    } else {\r\n      myEngine = new QueryEngine()\r\n    }\r\n\r\n    // find all the reference registries of the aggregated partial projects\r\n    const partials = await this.findAllPartialProjects();\r\n    let sources = [];\r\n    for (const p of partials) {\r\n      const referenceRegistry = await getQueryResult(\r\n        p,\r\n        LBD.hasReferenceRegistry,\r\n        this.fetch,\r\n        true\r\n      );\r\n\r\n      sources.push(referenceRegistry + \"data\")\r\n    }\r\n\r\n    let id\r\n    if (identifier.startsWith(\"http\")) id = `<${identifier}>`\r\n    else id = `\"${identifier}\"`\r\n    const q = `SELECT ?concept WHERE {\r\n      ?concept <${LBD.hasReference}> ?ref .\r\n      ?ref <${LBD.inDataset}> <${dataset}> ;\r\n        <${LBD.hasIdentifier}> ?idUrl .\r\n      ?idUrl <http://schema.org/value> ${id} .\r\n  } LIMIT 1`;\r\n\r\n    const results = await myEngine.queryBindings(q, { sources, fetch: this.fetch })\r\n      .then(r => r.toArray())\r\n\r\n      if (results.length > 0 ) {\r\n        const raw = results[0].get('concept').value\r\n        const theConcept = await this.getConcept(raw)\r\n        return theConcept\r\n      } else {\r\n        return undefined\r\n      }\r\n\r\n\r\n    //     const aliases = {}\r\n    //     asJson[\"results\"].bindings.forEach(item => {\r\n    //       const alias = item[\"alias\"].value\r\n    //       const distribution = item[\"dist\"].value\r\n    //       const dataset = item[\"dataset\"].value\r\n    //       const identifier = item[\"identifier\"].value\r\n\r\n    //       if (!Object.keys(aliases).includes(alias)) {\r\n    //         aliases[alias] = []\r\n    //       }\r\n    // -    })\r\n  }\r\n\r\n    /**\r\n   * @description Find the main concept by one of its representations: an identifier and a dataset\r\n   * @param identifier the Identifier of the representation\r\n   * @param dataset the dataset where the representation resides\r\n   * @param distribution (optional) the distribution of the representation\r\n   * @returns \r\n   */\r\n     public async getConceptByIdentifierOld(\r\n      identifier: string,\r\n      dataset: string,\r\n      distribution?: string,\r\n      options?: {queryEngine: QueryEngine}\r\n    ) {\r\n      let myEngine\r\n      if (options && options.queryEngine) {\r\n        myEngine = options.queryEngine\r\n      } else {\r\n        myEngine = new QueryEngine()\r\n      }\r\n  \r\n      // find all the reference registries of the aggregated partial projects\r\n      const partials = await this.findAllPartialProjects();\r\n      let sources = [];\r\n      for (const p of partials) {\r\n        const referenceRegistry = await getQueryResult(\r\n          p,\r\n          LBD.hasReferenceRegistry,\r\n          this.fetch,\r\n          true\r\n        );\r\n  \r\n        const rq = `SELECT ?downloadURL ?dist WHERE {<${referenceRegistry}> <${DCAT.distribution}> ?dist . ?dist <${DCAT.downloadURL}> ?downloadURL . OPTIONAL {?dist <${DCAT.accessURL}> ?accessURL .}}`;\r\n        const bindingsStream = await myEngine.queryBindings(rq, { sources: [referenceRegistry], fetch: this.fetch })\r\n        const results = await bindingsStream.toArray()\r\n        .then(res => res.map(item => {\r\n          return {\r\n          downloadURL: item.get(\"downloadURL\").value,\r\n          accessURL: item.get(\"accessURL\") && item.get(\"accessURL\").value,\r\n        }}))\r\n  \r\n        sources = [...sources, ...results];\r\n      }\r\n  \r\n      const downloadURLs = sources.map((item) => item.downloadURL);\r\n      let id\r\n      if (identifier.startsWith(\"http\")) id = `<${identifier}>`\r\n      else id = `\"${identifier}\"`\r\n      const q = `SELECT ?concept ?alias WHERE {\r\n        ?concept <${LBD.hasReference}> ?ref .\r\n        ?ref <${LBD.inDataset}> <${dataset}> ;\r\n          <${LBD.hasIdentifier}> ?idUrl .\r\n        ?idUrl <http://schema.org/value> ${id} .\r\n        OPTIONAL {?concept <${OWL.sameAs}> ?alias}\r\n    }`;\r\n  \r\n      const aliases = new Set<any>();\r\n      await myEngine.queryBindings(q, { sources: downloadURLs, fetch: this.fetch })\r\n        .then(r => r.toArray())\r\n        .then(bindings =>\r\n          bindings.forEach((bi) => {\r\n            aliases.add(bi.get(\"concept\").value)\r\n            if (bi.get(\"alias\")) aliases.add(bi.get(\"alias\").value);\r\n          })\r\n        );\r\n  \r\n        const concept = {\r\n          aliases: [],\r\n          references: [] \r\n        }\r\n  \r\n        for (let v of aliases.values()) {\r\n          concept.aliases.push(v)\r\n          const idQ = `SELECT ?dataset ?dist ?identifier WHERE {\r\n            <${v}> <${LBD.hasReference}> ?ref .\r\n            ?ref <${LBD.inDataset}> ?dataset ;\r\n              <${LBD.hasIdentifier}> ?idUrl .\r\n            ?idUrl <http://schema.org/value> ?identifier ;\r\n              <${LBD.inDistribution}> ?dist .\r\n          }`\r\n          const bindings = await myEngine.queryBindings(idQ, {sources: downloadURLs, fetch: this.fetch}).then(response=> response.toArray())\r\n          bindings.map(b => {\r\n            concept.references.push({\r\n              dataset: b.get(\"dataset\").value,\r\n              distribution: b.get(\"dist\").value,\r\n              identifier: b.get(\"identifier\").value\r\n            })\r\n        })\r\n      }\r\n  \r\n      const subject = extract(this.data, this.localProject);\r\n      const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"];\r\n      const theConcept = new LbdConcept(this.session, referenceRegistry)\r\n      theConcept.init(concept)\r\n      return theConcept\r\n      //     const aliases = {}\r\n      //     asJson[\"results\"].bindings.forEach(item => {\r\n      //       const alias = item[\"alias\"].value\r\n      //       const distribution = item[\"dist\"].value\r\n      //       const dataset = item[\"dataset\"].value\r\n      //       const identifier = item[\"identifier\"].value\r\n  \r\n      //       if (!Object.keys(aliases).includes(alias)) {\r\n      //         aliases[alias] = []\r\n      //       }\r\n      // -    })\r\n    }\r\n\r\n  public async getConcept(\r\n    url,\r\n    options?: {queryEngine: QueryEngine}\r\n  ) {\r\n    let myEngine\r\n    if (options && options.queryEngine) {\r\n      myEngine = options.queryEngine\r\n    } else {\r\n      myEngine = new QueryEngine()\r\n    }\r\n\r\n    const concept = {\r\n      aliases: [],\r\n      references: [] \r\n    }\r\n\r\n    // find all the aliases\r\n    const conceptRegistry = url.split('#')[0] + ''\r\n    const q_alias = `SELECT ?alias\r\n    WHERE {\r\n      <${url}> <${OWL.sameAs}> ?alias\r\n    }` \r\n\r\n    const aliases = new Set<string>()\r\n    aliases.add(url)\r\n\r\n    const bindingsStream0 = await myEngine.queryBindings(q_alias, {sources: [conceptRegistry], fetch: this.fetch})\r\n    await bindingsStream0.toArray().then(res => res.forEach(b => {  \r\n      aliases.add(b.get('alias').value)\r\n    }))\r\n\r\n    concept.aliases = Array.from(aliases)\r\n\r\n    for (const alias of concept.aliases) {\r\n      const reg = alias.split('#')[0]\r\n      const q1 = `SELECT ?dataset ?distribution ?id\r\n      WHERE {\r\n        <${alias}> a <${LBD.Concept}> ;\r\n        <${LBD.hasReference}> ?ref .\r\n        ?ref <${LBD.hasIdentifier}> ?identifier ;\r\n           <${LBD.inDataset}> ?dataset .\r\n        ?identifier <${LBD.inDistribution}> ?distribution ;\r\n            <http://schema.org/value> ?id .  \r\n      }` \r\n  \r\n  \r\n      const bindingsStream = await myEngine.queryBindings(q1, {sources: [reg], fetch: this.fetch})\r\n      await bindingsStream.toArray().then(res => res.forEach(b => {  \r\n        \r\n        concept.references.push({\r\n              dataset: b.get(\"dataset\").value,\r\n              distribution: b.get(\"distribution\").value,\r\n              identifier: b.get(\"id\").value\r\n        })\r\n      }))\r\n    }\r\n\r\n    const theConcept = new LbdConcept(this.session, conceptRegistry)\r\n    theConcept.init(concept)\r\n\r\n    return theConcept\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  /////////////////////// QUERY ///////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description a direct query on project resources\r\n   * @param q The SPARQL query (string)\r\n   * @param sources The sources (array)\r\n   * @param asStream Whether to be consumed as a stream or not (default: false)\r\n   * @returns \r\n   */\r\n  public async directQuery(q: string, sources: string[], options?: {asStream: boolean}) {\r\n    const registries = await this.getAllReferenceRegistries()\r\n    const results = await query(q, {sources, fetch: this.fetch, registries, ...options})\r\n    return results\r\n  }\r\n\r\n\r\n  // /**\r\n  //  * @description A query where datasets take the \r\n  //  * @param q \r\n  //  * @param datasets \r\n  //  * @param asStream \r\n  //  */\r\n  // public async indirectQuery(q: string, datasets: string[], asStream: boolean = false) {\r\n\r\n  // }\r\n}\r\n"],"file":"LbdProject.js"}