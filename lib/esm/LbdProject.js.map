{"version":3,"file":"LbdProject.js","names":["LbdProject","constructor","session","accessPoint","endsWith","fetch","localProject","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LbdService","checkExistence","status","method","then","result","init","data","headers","Accept","i","json","create","existingPartialProjects","options","makePublic","local","push","createContainer","aclDefault","ACL","default","Authorization","agentClass","FOAF","Agent","sparqlUpdate","createRegistryContainer","LBDS","hasDatasetRegistry","referenceContainerUrl","hasReferenceRegistry","hasServiceRegistry","part","addPartialProject","q","DCTERMS","creator","info","webId","DCAT","Catalog","PartialProject","dcatQ","Project","dataset","ldpAggregator","getProjectRegistry","aggreQ","Object","keys","q0","key","referenceMeta","LbdDataset","addDistribution","Buffer","from","getRdfEndpoints","queryEngine","QueryEngine","contentTypes","query","RDFS","label","mime","slice","partialProjects","getAllPartialProjects","satellites","getSatellites","sources","map","item","p","includes","rdfSources","queryBindings","r","toArray","forEach","value","get","a","getDatasetsByContentType","allDatasets","source","myDS","url","id","dist","LbdDistribution","contentType","distributions","addSatellite","satelliteURL","conformsTo","standard","startsWith","toLowerCase","Error","serviceId","service","endpointURL","error","console","log","addStakeholder","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","delete","deleteContainer","res","getPartialProject","repo","partialProjectOfStakeholder","addPartialProjectByStakeholder","partialProjectUrl","containerName","property","containerUrl","type","replace","Dataset","addDataset","subject","datasetRegistry","datasetUrl","theDataset","deleteDataset","ds","deleteDatasetById","datasetId","getAllDatasetUrls","partials","dsReg","LDP","contains","results","resultToString","invalidateCache","invalidateHttpCache","asStream","parsed","bindings","addConcept","referenceRegistry","ref","LbdConcept","getReferenceRegistry","getDatasetRegistry","getAllReferenceRegistries","deleteConcept","parts","pop","join","getConceptByIdentifier","identifier","distribution","myEngine","hasReference","inDataset","hasIdentifier","inDistribution","raw","theConcept","getConcept","undefined","conceptRegistry","concept","aliases","references","q_alias","OWL","sameAs","Set","add","bindingsStream0","b","Array","alias","reg","q1","Concept","bindingsStream","getConceptsByIdentifier","identifiers","q3","mediaType","substring","d","aliasQuery","allConcepts","myRes","registry","c","substr","mediatype","mt","directQuery","registries","newOptions","s","queryAll"],"sources":["../../src/LbdProject.ts"],"sourcesContent":["import AccessService from \"./helpers/access-service\";\r\nimport DataService from \"./helpers/data-service\";\r\nimport { LbdConcept } from \"./LbdConcept\";\r\nimport { LbdDataset } from \"./LbdDataset\";\r\nimport LBDS from \"./helpers/vocab/lbds\";\r\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\r\nimport { LbdService } from \"./LbdService\";\r\nimport { extract, query } from \"./helpers/functions\";\r\nimport { v4 } from \"uuid\";\r\nimport { ACL, DCAT, DCTERMS, FOAF, OWL, RDFS } from \"@inrupt/vocab-common-rdf\";\r\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\r\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\r\nimport { LDP } from \"@inrupt/vocab-common-rdf\";\r\nimport { getQueryResult, parseStream } from \"./helpers/utils\";\r\nimport { QueryEngine } from \"@comunica/query-sparql\";\r\nimport { Buffer } from \"buffer\";\r\nimport { LbdDistribution } from \".\";\r\n\r\nexport class LbdProject {\r\n  public fetch;\r\n  public accessService: AccessService;\r\n  public dataService: DataService;\r\n  public lbdService: LbdService;\r\n  public projectId: string;\r\n  public accessPoint: string;\r\n  public data: object[];\r\n  public session: any;\r\n\r\n  // include queryEngine to allow caching of querydata etc.\r\n  public localProject: string;\r\n\r\n  /**\r\n   * \r\n   * @param session an (authenticated) Solid session\r\n   * @param accessPoint The main accesspoint of the project. This is an aggregator containing the different partial projects of the LBDserver instance\r\n   */\r\n  constructor(\r\n    session: any,\r\n    accessPoint: string\r\n  ) {\r\n    if (!accessPoint.endsWith(\"/\")) accessPoint += \"/\";\r\n    this.session = session;\r\n    this.fetch = session.fetch;\r\n    this.accessPoint = accessPoint;\r\n    this.localProject = accessPoint + \"local/\";\r\n    this.projectId = accessPoint.split(\"/\")[accessPoint.split(\"/\").length - 2];\r\n    this.accessService = new AccessService(session.fetch);\r\n    this.dataService = new DataService(session.fetch);\r\n    this.lbdService = new LbdService(session);\r\n  }\r\n\r\n  /**\r\n   * @description Checks whether a project with this access point already exists\r\n   * @returns Boolean: true = the project exists / false = the project doesn't exist\r\n   */\r\n  public async checkExistence() {\r\n    const status = await this.fetch(this.accessPoint, { method: \"HEAD\" }).then(\r\n      (result) => result.status\r\n    );\r\n    if (status === 200) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /** \r\n   * @description Initialize the project in your application. In short, this adds project metadata to your LbdProject instance\r\n   */\r\n  public async init() {\r\n    const data = await this.fetch(this.localProject, {\r\n      headers: { Accept: \"application/ld+json\" },\r\n    }).then((i) => i.json());\r\n    this.data = data;\r\n    return data;\r\n  }\r\n\r\n\r\n  /**\r\n   * @description Create an LBDserver project on your Pod\r\n   * @param existingPartialProjects optional: if the project is already initialized on other stakeholder pods. Adds the existing partial projects to the Pod-specific access point\r\n   * @param options Metadata for the project. To be in format {[predicate]: value}\r\n   * @param makePublic access rights: true = public; false = only the creator\r\n   */\r\n  public async create(\r\n    existingPartialProjects: string[] = [],\r\n    options: object = {},\r\n    makePublic: boolean = false\r\n  ) {\r\n    const local = this.accessPoint + \"local/\";\r\n    existingPartialProjects.push(local);\r\n\r\n    // create global access point\r\n    await this.dataService.createContainer(this.accessPoint, makePublic);\r\n    await this.dataService.createContainer(local, makePublic);\r\n\r\n    if (makePublic) {\r\n      let aclDefault = `INSERT {?rule <${ACL.default}> <${local}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`;\r\n      await this.dataService.sparqlUpdate(local + \".acl\", aclDefault);\r\n    }\r\n\r\n    // create different registries\r\n    await this.createRegistryContainer(\r\n      \"datasets/\",\r\n      makePublic,\r\n      LBDS.hasDatasetRegistry\r\n    );\r\n    const referenceContainerUrl = await this.createRegistryContainer(\r\n      \"references/\",\r\n      makePublic,\r\n      LBDS.hasReferenceRegistry\r\n    );\r\n    await this.createRegistryContainer(\r\n      \"services/\",\r\n      makePublic,\r\n      LBDS.hasServiceRegistry\r\n    );\r\n\r\n    for (const part of existingPartialProjects) {\r\n      await this.addPartialProject(part);\r\n    }\r\n\r\n    let q = `INSERT DATA {<${this.accessPoint}> <${DCTERMS.creator}> \"${this.session.info.webId}\"; a <${DCAT.Catalog}>, <${LBDS.PartialProject}> .}`;\r\n\r\n    let dcatQ = `INSERT DATA {<${this.accessPoint}> a <${DCAT.Catalog}>, <${LBDS.Project}> ;\r\n    <${DCAT.dataset}> <${local}> .  \r\n  }`;\r\n\r\n    const ldpAggregator = await this.lbdService.getProjectRegistry()\r\n    let aggreQ = `INSERT DATA {<${ldpAggregator}> <${DCAT.dataset}> <${this.accessPoint}> .}`\r\n\r\n    await this.dataService.sparqlUpdate(ldpAggregator, aggreQ)\r\n    await this.dataService.sparqlUpdate(local, q);\r\n    await this.dataService.sparqlUpdate(this.accessPoint, dcatQ);\r\n\r\n    // create optional metadata (e.g. label etc.)\r\n    if (Object.keys(options).length > 0) {\r\n      let q0 = `INSERT DATA { `;\r\n      for (const key of Object.keys(options)) {\r\n        q0 += `<${this.accessPoint}> <${key}> \"${options[key]}\" .`;\r\n      }\r\n      q0 += \"}\";\r\n      await this.dataService.sparqlUpdate(this.accessPoint, q0);\r\n    }\r\n\r\n    const referenceMeta = new LbdDataset(this.session, referenceContainerUrl);\r\n    await referenceMeta.create();\r\n    await referenceMeta.addDistribution(\r\n      Buffer.from(\"\"),\r\n      \"text/turtle\",\r\n      {},\r\n      \"data\",\r\n      makePublic\r\n    );\r\n    await this.init();\r\n  }\r\n\r\n  public async getRdfEndpoints(queryEngine= new QueryEngine()) {\r\n    const contentTypes = [\"text/turtle\"]\r\n    let query = `PREFIX dcat: <http://www.w3.org/ns/dcat#>\r\n    SELECT ?ds ?label ?d ?mt WHERE {\r\n        ?ds  <${RDFS.label}> ?label ;\r\n        dcat:distribution ?d .\r\n        ?d dcat:mediaType ?mt .\r\n        FILTER contains(str(?ds), \"datasets\") \r\n        `\r\n\r\n      query += `FILTER regex(str(?mt), \"`\r\n      for (const mime of contentTypes) {\r\n        query += `${mime}|`\r\n      }\r\n      query = query.slice(0, query.length - 1) + `\")}`\r\n\r\n\r\n    const partialProjects = await this.getAllPartialProjects(queryEngine)\r\n    const satellites = await this.getSatellites(\"sparql\", { queryEngine, partialProjects })\r\n    const sources = Object.keys(satellites).map(item => {\r\n      return satellites[item] + \"/sparql\"\r\n    })\r\n\r\n    for (const p of partialProjects) {\r\n      if (!Object.keys(satellites).includes(p)) {\r\n        const rdfSources: any = []\r\n        const q = `SELECT ?dataset WHERE {?registry <${DCAT.dataset}> ?dataset}`;\r\n        await queryEngine.queryBindings(q, { sources: [p + \"datasets/\"], fetch: this.fetch })\r\n          .then(r => r.toArray())\r\n          .then(i => i.forEach(item => {\r\n            const value: string = item.get('dataset')!.value\r\n            rdfSources.push(value)\r\n          }))\r\n        await queryEngine.queryBindings(query, {sources: rdfSources, fetch: this.fetch})\r\n        .then(i => i.toArray())\r\n        .then(a => a.forEach(item => sources.push(item.get('d')!.value)))\r\n      }\r\n    }\r\n\r\n    return sources\r\n  }\r\n\r\n  public async getDatasetsByContentType(contentTypes: string[], queryEngine = new QueryEngine()) {\r\n    let query = `PREFIX dcat: <http://www.w3.org/ns/dcat#>\r\n    SELECT ?ds ?label ?d ?mt WHERE {\r\n        ?ds  <${RDFS.label}> ?label ;\r\n        dcat:distribution ?d .\r\n        ?d dcat:mediaType ?mt .\r\n        FILTER contains(str(?ds), \"datasets\") \r\n        `\r\n\r\n    if (contentTypes.length > 0) {\r\n      query += `FILTER regex(str(?mt), \"`\r\n      for (const mime of contentTypes) {\r\n        query += `${mime}|`\r\n      }\r\n      query = query.slice(0, query.length - 1) + `\")}`\r\n    } else {\r\n      query += \"}\"\r\n    }\r\n\r\n    const partialProjects = await this.getAllPartialProjects(queryEngine)\r\n    const satellites = await this.getSatellites(\"sparql\", { queryEngine, partialProjects })\r\n    const sources = Object.keys(satellites).map(item => {\r\n      return satellites[item] + \"/sparql\"\r\n    })\r\n\r\n    for (const p of partialProjects) {\r\n      if (!Object.keys(satellites).includes(p)) {\r\n        const q = `SELECT ?dataset WHERE {?registry <${DCAT.dataset}> ?dataset}`;\r\n        await queryEngine.queryBindings(q, { sources: [p + \"datasets/\"], fetch: this.fetch })\r\n          .then(r => r.toArray())\r\n          .then(i => i.forEach(item => {\r\n            const value: string = item.get('dataset')!.value\r\n            sources.push(value)\r\n          }))\r\n      }\r\n    }\r\n\r\n    const allDatasets: object[] = []\r\n    for (const source of sources) {\r\n      await queryEngine.queryBindings(query, { sources: [source], fetch: this.fetch })\r\n        .then(i => i.toArray())\r\n        .then(async (i) => {\r\n          for (const result of i) {\r\n            const myDS = new LbdDataset(this.session, result.get('ds').value)\r\n            const url = result.get('d').value\r\n            const id = url.split('/')[url.split('/').length - 1]\r\n            const dist = new LbdDistribution(this.session, myDS, id)\r\n            dist.contentType = result.get('mt').value\r\n            myDS.distributions = [dist]\r\n            allDatasets.push(myDS)\r\n          }\r\n        })\r\n    }\r\n    return allDatasets\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param satelliteURL The url (endpoint) of the satellite\r\n   * @param conformsTo The standard to which the query part of the satellite conforms\r\n   * @returns \r\n   */\r\n  public async addSatellite(satelliteURL: string, conformsTo: string) {\r\n    try {\r\n      let standard\r\n      if (!satelliteURL.endsWith(\"/\")) satelliteURL += \"/\"\r\n      if (conformsTo.startsWith(\"http\")) standard = conformsTo\r\n      else {\r\n        switch (conformsTo.toLowerCase()) {\r\n          case \"sparql\":\r\n            standard = \"https://www.w3.org/TR/sparql11-query/\";\r\n            break;\r\n          default:\r\n            throw new Error('Could not determine standard')\r\n        }\r\n      }\r\n\r\n      const serviceId = v4()\r\n      const q = `INSERT DATA {\r\n        <${this.localProject}> <${DCAT.service}> <#${serviceId}> .\r\n        <#${serviceId}> a <${DCAT.DataService}> ;\r\n          <${DCAT.endpointURL}> <${satelliteURL}> ;\r\n          <${DCTERMS.conformsTo}> <${standard}> .\r\n      }`\r\n\r\n      await this.dataService.sparqlUpdate(this.localProject, q)\r\n      return satelliteURL\r\n    } catch (error) {\r\n      console.log('error', error)\r\n      throw error\r\n    }\r\n\r\n  }\r\n\r\n\r\n  public async getSatellites(conformsTo: string, options?: { queryEngine?: QueryEngine, partialProjects?: string[] }) {\r\n    try {\r\n\r\n      let queryEngine, partialProjects, standard\r\n\r\n      (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine();\r\n      (options && options.partialProjects) ? partialProjects = options.partialProjects : partialProjects = [this.localProject];\r\n\r\n      if (conformsTo.startsWith(\"http\")) standard = conformsTo\r\n      else {\r\n        switch (conformsTo) {\r\n          case \"sparql\":\r\n            standard = \"https://www.w3.org/TR/sparql11-query/\";\r\n            break;\r\n          default:\r\n            throw new Error('Could not determine standard')\r\n        }\r\n      }\r\n\r\n      const q = `select ?project ?url where {\r\n      ?project <${DCAT.service}> ?sat .\r\n      ?sat a <${DCAT.DataService}> ;\r\n        <${DCAT.endpointURL}> ?url ;\r\n        <${DCTERMS.conformsTo}> <${standard}> .\r\n    }`\r\n\r\n      const result = await queryEngine.queryBindings(q, { sources: partialProjects, fetch: this.fetch }).then(r => r.toArray())\r\n      if (result) {\r\n        const r = {}\r\n        result.forEach(i => { r[i.get('project').value] = i.get('url').value })\r\n        return r\r\n      } else {\r\n        return\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log('error', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description Add a partial project to a Pod-specific access point\r\n   * @param part Partial project to add to a Pod-specific access point\r\n   */\r\n  public async addPartialProject(part: string) {\r\n    const q0 = `INSERT DATA {\r\n        <${this.accessPoint}> <${DCAT.dataset}> <${part}> .\r\n        }`;\r\n    await this.dataService.sparqlUpdate(this.accessPoint, q0);\r\n  }\r\n\r\n  /**\r\n   * @description Add a stakeholder to an LBDserver project\r\n   * @param webId The WebID/card of the stakeholder\r\n   * @param accessRights the access rights this stakeholder should have.\r\n   */\r\n  public async addStakeholder(\r\n    webId: string,\r\n    accessRights: AccessRights = {\r\n      read: true,\r\n      append: false,\r\n      write: false,\r\n      control: false,\r\n    }\r\n  ) {\r\n    await this.accessService.setResourceAccess(\r\n      this.accessPoint,\r\n      accessRights,\r\n      ResourceType.CONTAINER,\r\n      webId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @description delete an LBDserver project (locally)\r\n   */\r\n  public async delete() {\r\n    await this.dataService.deleteContainer(this.accessPoint, true);\r\n  }\r\n\r\n  /**\r\n   * @description find all the partial projects from the indicated project access point\r\n   */\r\n  public async getAllPartialProjects(queryEngine: QueryEngine = new QueryEngine()) {\r\n    const res: any = await getQueryResult(\r\n      this.accessPoint,\r\n      DCAT.dataset,\r\n      this.fetch,\r\n      false,\r\n      queryEngine\r\n    );\r\n    return res\r\n  }\r\n\r\n  /**\r\n   * @description Find the partial project provided by this stakeholder\r\n   * @param webId The webID of the stakeholder whom's partial project you want to find\r\n   * @returns The URL of the partial project\r\n   */\r\n  public async getPartialProject(webId: string, queryEngine = new QueryEngine()) {\r\n    const repo = await this.lbdService.getProjectRegistry(webId, queryEngine);\r\n    // console.log('repo', repo)\r\n    const partialProjectOfStakeholder = repo + this.projectId + \"/local/\";\r\n    return partialProjectOfStakeholder\r\n    // console.log('partialProjectOfStakeholder', partialProjectOfStakeholder)\r\n    // const status = await this.fetch(partialProjectOfStakeholder, {\r\n    //   method: \"HEAD\",\r\n    // }).then((res) => res.status);\r\n    // if (status === 200) {\r\n    //   return partialProjectOfStakeholder;\r\n    // } else {\r\n    //   throw new Error(\r\n    //     `UNAUTHORIZED: This repository does not exist or you don't have the required access rights`\r\n    //   );\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * @description Add this stakeholder's partial project corresponding with this project (same GUID)\r\n   * @param webId The webID of the stakeholder whom's partial project you want to add\r\n   * @returns the URL of the partial project\r\n   */\r\n  public async addPartialProjectByStakeholder(webId: string) {\r\n    const partialProjectUrl = await this.getPartialProject(webId);\r\n    await this.addPartialProject(partialProjectUrl);\r\n    return partialProjectUrl;\r\n  }\r\n\r\n  private async createRegistryContainer(containerName, makePublic, property) {\r\n    if (!containerName.endsWith(\"/\")) containerName += \"/\";\r\n\r\n    const containerUrl = this.localProject + containerName;\r\n    await this.dataService.createContainer(containerUrl, makePublic);\r\n\r\n    const type = property.replace(\"#has\", \"#\")\r\n    const q = `INSERT DATA {\r\n      <${containerUrl}> a <${DCAT.Catalog}> , <${DCAT.Dataset}> , <${type}> .\r\n    }`\r\n\r\n    await this.dataService.sparqlUpdate(containerUrl, q);\r\n\r\n    const q0 = `INSERT DATA {\r\n        <${this.localProject}> <${property}> <${containerUrl}> ;\r\n          <${DCAT.dataset}> <${containerUrl}>.\r\n      }`;\r\n    await this.dataService.sparqlUpdate(this.localProject, q0);\r\n    return containerUrl;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  /////////////////////// DATASETS ////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description Add a dataset to the project\r\n   * @param makePublic initial access rights for the dataset\r\n   * @param id optional id for the dataset - a GUID is created by default\r\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\r\n   * @returns\r\n   */\r\n  public async addDataset(\r\n    options: object = {},\r\n    makePublic: boolean = false,\r\n    id: string = v4()\r\n  ): Promise<LbdDataset> {\r\n    const subject = extract(this.data, this.localProject);\r\n    const datasetRegistry = subject[LBDS.hasDatasetRegistry][0][\"@id\"];\r\n    const datasetUrl = datasetRegistry + id + \"/\";\r\n    const theDataset = new LbdDataset(this.session, datasetUrl);\r\n    await theDataset.create(options, makePublic);\r\n    return theDataset;\r\n  }\r\n\r\n  /**\r\n   * @description Delete a dataset by URL\r\n   * @param datasetUrl The URL of the dataset \r\n   */\r\n  public async deleteDataset(datasetUrl: string) {\r\n    if (!datasetUrl.endsWith(\"/\")) datasetUrl += \"/\";\r\n    const ds = new LbdDataset(this.session, datasetUrl);\r\n    await ds.delete();\r\n  }\r\n\r\n  /**\r\n   * @description delete a dataset by its ID\r\n   * @param datasetId The GUID of the dataset to be deleted\r\n   */\r\n  public async deleteDatasetById(datasetId: string) {\r\n    const subject = extract(this.data, this.localProject);\r\n    const datasetRegistry = subject[LBDS.hasDatasetRegistry][0][\"@id\"];\r\n    const datasetUrl = datasetRegistry + datasetId + \"/\";\r\n    const ds = new LbdDataset(this.session, datasetUrl);\r\n    await ds.delete();\r\n  }\r\n\r\n  /**\r\n   * @description Get all datasets within this project\r\n   * @param options {query: query to override, asStream: consume the results as a stream, local: query only the local project}\r\n   * @returns \r\n   */\r\n  public async getAllDatasetUrls(options?: {\r\n    query?: string;\r\n    asStream?: boolean;\r\n    local?: boolean;\r\n    queryEngine?: QueryEngine\r\n    invalidateCache?: boolean\r\n  }) {\r\n    let queryEngine\r\n    (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine()\r\n    const subject = extract(this.data, this.localProject);\r\n    const sources = [];\r\n    if (options && options.local) {\r\n      sources.push(subject[LBDS.hasDatasetRegistry][0][\"@id\"]);\r\n    } else {\r\n      const partials = await this.getAllPartialProjects();\r\n      for (const p of partials) {\r\n        const dsReg = await getQueryResult(\r\n          p,\r\n          LBDS.hasDatasetRegistry,\r\n          this.fetch,\r\n          true,\r\n          queryEngine\r\n        );\r\n        sources.push(dsReg);\r\n      }\r\n    }\r\n    let q;\r\n    if (!options || !options.query) {\r\n      q = `SELECT ?dataset WHERE {?registry <${LDP.contains}> ?dataset}`;\r\n    } else {\r\n      q = options.query;\r\n    }\r\n\r\n    const results = await queryEngine.query(q, { sources, fetch: this.fetch });\r\n    const { data } = await queryEngine.resultToString(\r\n      results,\r\n      \"application/sparql-results+json\"\r\n    );\r\n    if (options && options.invalidateCache) {\r\n      queryEngine.invalidateHttpCache()\r\n    }\r\n    if (options && options.asStream) {\r\n      return data;\r\n    } else {\r\n      const parsed = await parseStream(data);\r\n      return parsed[\"results\"].bindings.map((i) => i[\"dataset\"].value);\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  ////////////////////// REFERENCES////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description Add a concept to the local project registry\r\n   * @returns an LBDconcept Instance\r\n   */\r\n  public async addConcept(id?): Promise<LbdConcept> {\r\n    const subject = extract(this.data, this.localProject);\r\n    const referenceRegistry = subject[LBDS.hasReferenceRegistry][0][\"@id\"];\r\n    const ref = new LbdConcept(this.session, referenceRegistry);\r\n    await ref.create(id);\r\n    return ref;\r\n  }\r\n\r\n  public getReferenceRegistry() {\r\n    const subject = extract(this.data, this.localProject);\r\n    return subject[LBDS.hasReferenceRegistry][0][\"@id\"];\r\n  }\r\n\r\n  public getDatasetRegistry() {\r\n    const subject = extract(this.data, this.localProject);\r\n    return subject[LBDS.hasDatasetRegistry][0][\"@id\"];\r\n  }\r\n\r\n  public async getAllReferenceRegistries(queryEngine: QueryEngine = new QueryEngine()) {\r\n    const partialProjects = await this.getAllPartialProjects(queryEngine)\r\n    const satellites = await this.getSatellites(\"sparql\", { queryEngine, partialProjects })\r\n    const sources = Object.keys(satellites).map(item => {\r\n      return satellites[item] + \"/sparql\"\r\n    })\r\n\r\n    for (const p of partialProjects) {\r\n      if (!Object.keys(satellites).includes(p)) {\r\n        sources.push(p + \"/references/data\")\r\n      }\r\n    }\r\n\r\n    return sources\r\n  }\r\n\r\n  /**\r\n   * @description delete a concept by ID\r\n   * @param url the URL of the concept to be deleted\r\n   */\r\n  public async deleteConcept(url: string) {\r\n    const parts = url.split(\"/\");\r\n    const id = parts.pop();\r\n    const referenceRegistry = parts.join(\"/\");\r\n    const ref = new LbdConcept(this.session, referenceRegistry);\r\n    await ref.delete();\r\n  }\r\n\r\n  /**\r\n   * @description Find the main concept by one of its representations: an identifier and a dataset\r\n   * @param identifier the Identifier of the representation\r\n   * @param dataset the dataset where the representation resides\r\n   * @param distribution (optional) the distribution of the representation\r\n   * @returns \r\n   */\r\n  public async getConceptByIdentifier(\r\n    identifier: string,\r\n    dataset: string,\r\n    distribution?: string,\r\n    options?: { queryEngine?: QueryEngine, invalidateCache?: boolean }\r\n  ) {\r\n    let myEngine\r\n    if (options && options.queryEngine) {\r\n      myEngine = options.queryEngine\r\n    } else {\r\n      myEngine = new QueryEngine()\r\n    }\r\n\r\n    let sources = await this.getAllReferenceRegistries()\r\n\r\n    let id\r\n    if (identifier.startsWith(\"http\")) id = `<${identifier}>`\r\n    else id = `\"${identifier}\"`\r\n    const q = `SELECT ?concept ?dist WHERE {\r\n      ?concept <${LBDS.hasReference}> ?ref .\r\n      ?ref <${LBDS.inDataset}> <${dataset}> ;\r\n        <${LBDS.hasIdentifier}> ?idUrl .\r\n      ?idUrl <${LBDS.inDistribution}> ?dist ;\r\n      <${LBDS.value}> ${id} .\r\n  } LIMIT 1`;\r\n\r\n\r\n    const results = await myEngine.queryBindings(q, { sources, fetch: this.fetch })\r\n      .then(r => r.toArray())\r\n    if (options && options.invalidateCache) {\r\n      myEngine.invalidateHttpCache()\r\n    }\r\n    if (results.length > 0) {\r\n      const raw = results[0].get('concept').value\r\n      let invalidateCache\r\n      if (options && options.invalidateCache) invalidateCache = options.invalidateCache\r\n      const theConcept = await this.getConcept(raw, { queryEngine: myEngine, invalidateCache, sources })\r\n      return theConcept\r\n    } else {\r\n      return undefined\r\n    }\r\n\r\n\r\n    //     const aliases = {}\r\n    //     asJson[\"results\"].bindings.forEach(item => {\r\n    //       const alias = item[\"alias\"].value\r\n    //       const distribution = item[\"dist\"].value\r\n    //       const dataset = item[\"dataset\"].value\r\n    //       const identifier = item[\"identifier\"].value\r\n\r\n    //       if (!Object.keys(aliases).includes(alias)) {\r\n    //         aliases[alias] = []\r\n    //       }\r\n    // -    })\r\n  }\r\n\r\n  public async getConcept(\r\n    url: string,\r\n    options?: { queryEngine?: QueryEngine, invalidateCache?: boolean, sources?: string[] }\r\n  ) {\r\n    let myEngine, sources\r\n    if (options && options.queryEngine) {\r\n      myEngine = options.queryEngine\r\n    } else {\r\n      myEngine = new QueryEngine()\r\n    }\r\n    const conceptRegistry = url.split('#')[0] + ''\r\n\r\n    if (options && options.sources) { sources = options.sources } else { sources = [conceptRegistry] }\r\n\r\n    const concept = {\r\n      aliases: [],\r\n      references: []\r\n    }\r\n\r\n    // find all the aliases\r\n    const q_alias = `SELECT ?alias\r\n    WHERE {\r\n      <${url}> <${OWL.sameAs}> ?alias\r\n    }`\r\n\r\n    const aliases = new Set<string>()\r\n    aliases.add(url)\r\n\r\n    const bindingsStream0 = await myEngine.queryBindings(q_alias, { sources, fetch: this.fetch })\r\n    await bindingsStream0.toArray().then(res => res.forEach(b => {\r\n      aliases.add(b.get('alias').value)\r\n    }))\r\n\r\n    concept.aliases = Array.from(aliases)\r\n\r\n    for (const alias of concept.aliases) {\r\n      const reg = alias.split('#')[0]\r\n      const q1 = `SELECT ?dataset ?distribution ?id\r\n      WHERE {\r\n        <${alias}> a <${LBDS.Concept}> ;\r\n        <${LBDS.hasReference}> ?ref .\r\n        ?ref <${LBDS.hasIdentifier}> ?identifier ;\r\n           <${LBDS.inDataset}> ?dataset .\r\n        ?identifier <${LBDS.inDistribution}> ?distribution ;\r\n            <https://w3id.org/lbdserver#value> ?id .  \r\n      }`\r\n\r\n      if (options && options.sources) { sources = options.sources } else { sources = [reg] }\r\n\r\n      const bindingsStream = await myEngine.queryBindings(q1, { sources: sources, fetch: this.fetch })\r\n      await bindingsStream.toArray().then(res => res.forEach(b => {\r\n\r\n        concept.references.push({\r\n          dataset: b.get(\"dataset\").value,\r\n          distribution: b.get(\"distribution\").value,\r\n          identifier: b.get(\"id\").value\r\n        })\r\n      }))\r\n    }\r\n\r\n    const theConcept = new LbdConcept(this.session, conceptRegistry)\r\n    theConcept.init(concept)\r\n    if (options && options.invalidateCache) myEngine.invalidateHttpCache()\r\n    return theConcept\r\n  }\r\n\r\n  public async getConceptsByIdentifier(identifiers: { identifier: string, dataset?: string, distribution?: string }[], options?: { queryEngine?: QueryEngine }) {\r\n    let queryEngine\r\n    if (options && options.queryEngine) {\r\n      queryEngine = options.queryEngine\r\n    } else {\r\n      queryEngine = new QueryEngine()\r\n    }\r\n\r\n    let q3 = `SELECT ?concept ?ds ?dist ?identifier ?alias ?mt WHERE {\r\n?concept <${LBDS.hasReference}> ?ref1 .\r\n?ref1 <${LBDS.inDataset}> ?ds ;\r\n<${LBDS.hasIdentifier}> ?d1 .\r\n?d1 <${LBDS.value}> ?identifier ;\r\n<${LBDS.inDistribution}> ?dist .\r\n?dist <${DCAT.mediaType}> ?mt .\r\nOPTIONAL {?concept <${OWL.sameAs}> ?alias}`\r\n\r\n    identifiers.forEach(b => {\r\n      let identifier, ds, dist\r\n      if (b.identifier.startsWith(\"http\")) {\r\n        identifier = `<${b.identifier}>`\r\n      } else {\r\n        identifier = `\"${b.identifier}\"`\r\n      }\r\n\r\n      if (b.dataset) ds = `<${b.dataset}>` \r\n      else ds = \"?dataset\"\r\n\r\n      if (b.distribution) dist = `<${b.distribution}>` \r\n      else dist = \"?distribution\"\r\n\r\n      q3 += `{{?concept <${LBDS.hasReference}> ?ref .\r\n?ref <${LBDS.inDataset}> ${ds} ;\r\n<${LBDS.hasIdentifier}> ?d .\r\n?d <${LBDS.value}> ${identifier} ;\r\n<${LBDS.inDistribution}> ${dist} .\r\n\r\n} UNION {\r\n?concept <http://www.w3.org/2002/07/owl#sameAs> ?alias .\r\n?alias <${LBDS.hasReference}> ?ref1 .\r\n?ref1 <${LBDS.inDataset}> ?ds ;\r\n<${LBDS.hasIdentifier}> ?d1 .\r\n?d1 <${LBDS.value}> ?identifier ;\r\n<${LBDS.inDistribution}> ?dist .\r\n?dist <${DCAT.mediaType}> ?mt .\r\n}} UNION `;\r\n    })\r\n    q3 = q3.substring(0, q3.length - 6)\r\n    q3 += `}`\r\n\r\n\r\n    // const sparqlSources = []\r\n    // const nonSparqlSources = []\r\n    // for (const source of sources) {\r\n    //   if (typeof source == \"object\" && source.type == \"sparql\") {\r\n    //     sparqlSources.push(source)\r\n    //   } else {\r\n    //     nonSparqlSources.push(source)\r\n    //   }\r\n    // }\r\n\r\n    const aliases = {}\r\n    // const concepts = []\r\n    const results = {}\r\n    // for (const source of sparqlSources) {\r\n    //   var myHeaders = new Headers();\r\n    //   myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    //   var urlencoded = new URLSearchParams();\r\n    //   urlencoded.append(\"query\", q3)\r\n\r\n    //   const options = {\r\n    //     method: \"POST\",\r\n    //     headers: myHeaders,\r\n    //     body: urlencoded,\r\n    //     redirect: \"follow\"\r\n    //   }\r\n\r\n    //   const res = await this.fetch(source.value, options).then(i => i.json())\r\n    //   for (const d of res[\"results\"].bindings) {\r\n    //     // concepts.push(d.concept)\r\n    //     if (!results[d.concept]) {\r\n    //       results[d.concept.value] = [d]\r\n    //     } else {\r\n    //       results[d.concept.value].push(d)\r\n    //     }\r\n    //     if (d.alias) {\r\n    //       if (!aliases[d.alias]) {\r\n    //         aliases[d.concept.value] = [d.alias.value]\r\n    //       } else {\r\n    //         aliases[d.concept.value].push(d.alias.value)\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n    const sources = await this.getAllReferenceRegistries(queryEngine)\r\n    \r\n    // if (nonSparqlSources.length > 0) {\r\n      const r = await queryEngine.query(q3, { sources, fetch: this.fetch })\r\n\r\n      // known issue: if empty - the stream will break...\r\n      const { data } = await queryEngine.resultToString(r);\r\n      const res: any = await parseStream(data);\r\n      for (const d of res) {\r\n        // concepts.push(d.concept)\r\n        if (!results[d.concept]) {\r\n          results[d.concept] = [d]\r\n        } else {\r\n          results[d.concept].push(d)\r\n        }\r\n        if (d.alias) {\r\n          if (!aliases[d.alias]) {\r\n            aliases[d.concept] = [d.alias]\r\n          } else {\r\n            aliases[d.concept].push(d.alias)\r\n          }\r\n        }\r\n      }\r\n    // }\r\n\r\n    for (const concept of Object.keys(aliases)) {\r\n      // if the alias has not been queried for yet\r\n      let aliasQuery = `SELECT ?concept ?ds ?dist ?identifier ?mt WHERE {`\r\n      for (const alias of aliases[concept]) {\r\n        aliasQuery += `{<${alias}> <${LBDS.hasReference}> ?ref1 .\r\n        ?concept <${LBDS.hasReference}> ?ref1 .\r\n        ?ref1 <${LBDS.inDataset}> ?ds ;\r\n        <${LBDS.hasIdentifier}> ?d1 .\r\n        ?d1 <${LBDS.value}> ?identifier ;\r\n        <${LBDS.inDistribution}> ?dist .\r\n        ?dist <${DCAT.mediaType}> ?mt .\r\n      } UNION `\r\n      }\r\n      aliasQuery = aliasQuery.substring(0, aliasQuery.length - 6)\r\n      aliasQuery += `}`\r\n\r\n\r\n      // for (const source of sparqlSources) {\r\n      //   var myHeaders = new Headers();\r\n      //   myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n      //   var urlencoded = new URLSearchParams();\r\n      //   urlencoded.append(\"query\", aliasQuery)\r\n\r\n      //   const options = {\r\n      //     method: \"POST\",\r\n      //     headers: myHeaders,\r\n      //     body: urlencoded,\r\n      //     redirect: \"follow\"\r\n      //   }\r\n\r\n      //   const res = await this.fetch(source.value, options).then(i => i.json())\r\n      //   for (const d of res[\"results\"].bindings) {\r\n      //     results[concept].push(d)\r\n      //   }\r\n      // }\r\n\r\n      // if (nonSparqlSources.length > 0) {\r\n        const r = await queryEngine.query(aliasQuery, { sources })\r\n        const { data } = await queryEngine.resultToString(r);\r\n        const res: any = await parseStream(data);\r\n        for (const d of res) {\r\n          results[concept].push(d)\r\n        }\r\n      // }\r\n    }\r\n\r\n    const allConcepts = []\r\n    for (const item of Object.keys(results)) {\r\n      const myRes = results[item]\r\n      const registry = item.split('#')[0]\r\n      const c = new LbdConcept(this.session, registry)\r\n      const aliases: Set<string> = new Set()\r\n      const references = []\r\n      myRes.forEach(i => {\r\n        aliases.add(i.concept)\r\n        let identifier\r\n        if (i.identifier.startsWith('\"') && i.identifier.endsWith('\"')) identifier = i.identifier.substr(1, i.identifier.length -2)\r\n        else identifier = i.identifier\r\n        references.push({\r\n          identifier,\r\n          distribution: i.dist,\r\n          dataset: i.ds,\r\n          mediatype: i.mt\r\n        })\r\n      })\r\n      await c.init({ aliases: Array.from(aliases), references })\r\n      allConcepts.push(c)\r\n    }\r\n\r\n    return allConcepts\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  /////////////////////// QUERY ///////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description a direct query on project resources\r\n   * @param q The SPARQL query (string)\r\n   * @param sources The sources (array)\r\n   * @param asStream Whether to be consumed as a stream or not (default: false)\r\n   * @returns \r\n   */\r\n  public async directQuery(q: string, sources: any, options?: { asStream?: boolean, queryEngine?: QueryEngine}) {\r\n    let queryEngine\r\n    (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine()\r\n    const registries = await this.getAllReferenceRegistries(queryEngine)\r\n    const newOptions = { fetch: this.fetch, ...options, queryEngine }\r\n    let s: any = new Set([...registries, ...sources])\r\n    s = Array.from(s)\r\n    newOptions[\"sources\"] = s\r\n    // console.log('newOptions', newOptions)\r\n    const results = await query(q, newOptions)\r\n    return results\r\n  }\r\n\r\n  public async queryAll(q: string, options?: { asStream?: boolean, queryEngine?: QueryEngine }) {\r\n    let queryEngine\r\n    (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine()\r\n    const partialProjects = await this.getAllPartialProjects(queryEngine)\r\n    const sources = await this.getSatellites(\"sparql\", { queryEngine, partialProjects }).then(res => Object.keys(res).map(i => {\r\n      return { type: \"sparql\", value: res[i] + \"/sparql\" }\r\n    }))\r\n\r\n    const newOptions = { sources, fetch: this.fetch, ...options, queryEngine }\r\n    const results = await query(q, newOptions)\r\n    return results\r\n  }\r\n\r\n\r\n  // /**\r\n  //  * @description A query where datasets take the \r\n  //  * @param q \r\n  //  * @param datasets \r\n  //  * @param asStream \r\n  //  */\r\n  // public async indirectQuery(q: string, datasets: string[], asStream: boolean = false) {\r\n\r\n  // }\r\n}\r\n"],"mappings":"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"}