{"version":3,"sources":["../../src/LbdProject.ts"],"names":["LbdProject","constructor","session","accessPoint","endsWith","fetch","localProject","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LbdService","checkExistence","status","method","then","result","init","data","headers","Accept","i","json","create","existingPartialProjects","options","makePublic","local","push","createContainer","aclDefault","ACL","default","Authorization","agentClass","FOAF","Agent","sparqlUpdate","createRegistryContainer","LBDS","hasDatasetRegistry","referenceContainerUrl","hasReferenceRegistry","hasServiceRegistry","part","addPartialProject","q","DCTERMS","creator","info","webId","DCAT","Catalog","PartialProject","dcatQ","Project","dataset","Object","keys","q0","key","referenceMeta","LbdDataset","addDistribution","Buffer","from","addSatellite","satelliteURL","conformsTo","standard","startsWith","Error","serviceId","service","endpointURL","console","log","error","getSatellites","queryEngine","partialProjects","QueryEngine","queryBindings","sources","r","toArray","forEach","get","value","addStakeholder","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","delete","deleteContainer","findAllPartialProjects","findPartialProject","repo","getProjectRegistry","partialProjectOfStakeholder","addPartialProjectByStakeholder","partialProjectUrl","containerName","property","containerUrl","type","replace","Dataset","addDataset","id","subject","datasetRegistry","datasetUrl","theDataset","deleteDataset","ds","deleteDatasetById","datasetId","getAllDatasetUrls","partials","p","dsReg","query","LDP","contains","results","resultToString","invalidateCache","invalidateHttpCache","asStream","parsed","bindings","map","addConcept","referenceRegistry","ref","LbdConcept","getReferenceRegistry","getDatasetRegistry","getAllReferenceRegistries","registries","partial","reg","deleteConcept","url","parts","pop","join","getConceptByIdentifier","identifier","distribution","myEngine","satellites","includes","hasReference","inDataset","hasIdentifier","raw","theConcept","getConcept","undefined","getConceptByIdentifierOld","rq","downloadURL","accessURL","bindingsStream","res","item","downloadURLs","OWL","sameAs","aliases","Set","bi","add","concept","references","v","values","idQ","inDistribution","response","b","conceptRegistry","q_alias","bindingsStream0","Array","alias","q1","Concept","directQuery"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\r\nimport DataService from \"./helpers/data-service\";\r\nimport { LbdConcept } from \"./LbdConcept\";\r\nimport {\r\n  newEngine,\r\n  IQueryResultBindings,\r\n  ActorInitSparql,\r\n} from \"@comunica/actor-init-sparql\";\r\nimport { LbdDataset } from \"./LbdDataset\";\r\nimport LBDS from \"./helpers/vocab/lbds\";\r\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\r\nimport { LbdService } from \"./LbdService\";\r\nimport { extract, query } from \"./helpers/functions\";\r\nimport { v4 } from \"uuid\";\r\nimport { ACL, DCAT, DCTERMS, FOAF, OWL } from \"@inrupt/vocab-common-rdf\";\r\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\r\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\r\nimport { LDP } from \"@inrupt/vocab-common-rdf\";\r\nimport { getQueryResult, parseStream } from \"./helpers/utils\";\r\nimport { QueryEngine } from \"@comunica/query-sparql\";\r\n\r\nexport class LbdProject {\r\n  public fetch;\r\n  public accessService: AccessService;\r\n  public dataService: DataService;\r\n  public lbdService: LbdService;\r\n  public projectId: string;\r\n  public accessPoint: string;\r\n  public data: object[];\r\n\r\n  public session: BrowserSession | NodeSession;\r\n\r\n  // include queryEngine to allow caching of querydata etc.\r\n  public localProject: string;\r\n\r\n  /**\r\n   * \r\n   * @param session an (authenticated) Solid session\r\n   * @param accessPoint The main accesspoint of the project. This is an aggregator containing the different partial projects of the LBDserver instance\r\n   */\r\n  constructor(\r\n    session: BrowserSession | NodeSession,\r\n    accessPoint: string\r\n  ) {\r\n    if (!accessPoint.endsWith(\"/\")) accessPoint += \"/\";\r\n    this.session = session;\r\n    this.fetch = session.fetch;\r\n    this.accessPoint = accessPoint;\r\n    this.localProject = accessPoint + \"local/\";\r\n    this.projectId = accessPoint.split(\"/\")[accessPoint.split(\"/\").length - 2];\r\n    this.accessService = new AccessService(session.fetch);\r\n    this.dataService = new DataService(session.fetch);\r\n    this.lbdService = new LbdService(session);\r\n  }\r\n\r\n  /**\r\n   * @description Checks whether a project with this access point already exists\r\n   * @returns Boolean: true = the project exists / false = the project doesn't exist\r\n   */\r\n  public async checkExistence() {\r\n    const status = await this.fetch(this.accessPoint, { method: \"HEAD\" }).then(\r\n      (result) => result.status\r\n    );\r\n    if (status === 200) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /** \r\n   * @description Initialize the project in your application. In short, this adds project metadata to your LbdProject instance\r\n   */\r\n  public async init() {\r\n    const data = await this.fetch(this.localProject, {\r\n      headers: { Accept: \"application/ld+json\" },\r\n    }).then((i) => i.json());\r\n    this.data = data;\r\n    return data;\r\n  }\r\n\r\n\r\n  /**\r\n   * @description Create an LBDserver project on your Pod\r\n   * @param existingPartialProjects optional: if the project is already initialized on other stakeholder pods. Adds the existing partial projects to the Pod-specific access point\r\n   * @param options Metadata for the project. To be in format {[predicate]: value}\r\n   * @param makePublic access rights: true = public; false = only the creator\r\n   */\r\n  public async create(\r\n    existingPartialProjects: string[] = [],\r\n    options: object = {},\r\n    makePublic: boolean = false\r\n  ) {\r\n    const local = this.accessPoint + \"local/\";\r\n    existingPartialProjects.push(local);\r\n\r\n    // create global access point\r\n    await this.dataService.createContainer(this.accessPoint, makePublic);\r\n    await this.dataService.createContainer(local, makePublic);\r\n\r\n    if (makePublic) {\r\n      let aclDefault = `INSERT {?rule <${ACL.default}> <${local}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`;\r\n      await this.dataService.sparqlUpdate(local + \".acl\", aclDefault);\r\n    }\r\n\r\n    // create different registries\r\n    await this.createRegistryContainer(\r\n      \"datasets/\",\r\n      makePublic,\r\n      LBDS.hasDatasetRegistry\r\n    );\r\n    const referenceContainerUrl = await this.createRegistryContainer(\r\n      \"references/\",\r\n      makePublic,\r\n      LBDS.hasReferenceRegistry\r\n    );\r\n    await this.createRegistryContainer(\r\n      \"services/\",\r\n      makePublic,\r\n      LBDS.hasServiceRegistry\r\n    );\r\n\r\n    for (const part of existingPartialProjects) {\r\n      await this.addPartialProject(part);\r\n    }\r\n\r\n    let q = `INSERT DATA {<${this.accessPoint}> <${DCTERMS.creator}> \"${this.session.info.webId}\"; a <${DCAT.Catalog}>, <${LBDS.PartialProject}> .}`;\r\n\r\n    let dcatQ = `INSERT DATA {<${this.accessPoint}> <${DCTERMS.creator}> \"${this.session.info.webId}\" ;\r\n    a <${DCAT.Catalog}>, <${LBDS.Project}> ;\r\n    <${DCAT.dataset}> <${local}> .  \r\n  }`;\r\n\r\n    await this.dataService.sparqlUpdate(local, q);\r\n    await this.dataService.sparqlUpdate(this.accessPoint, dcatQ);\r\n\r\n    // create optional metadata (e.g. label etc.)\r\n    if (Object.keys(options).length > 0) {\r\n      let q0 = `INSERT DATA { `;\r\n      for (const key of Object.keys(options)) {\r\n        q0 += `<${this.accessPoint}> <${key}> \"${options[key]}\" .`;\r\n      }\r\n      q0 += \"}\";\r\n      await this.dataService.sparqlUpdate(this.accessPoint, q0);\r\n    }\r\n\r\n    const referenceMeta = new LbdDataset(this.session, referenceContainerUrl);\r\n    await referenceMeta.create();\r\n    await referenceMeta.addDistribution(\r\n      Buffer.from(\"\"),\r\n      \"text/turtle\",\r\n      {},\r\n      \"data\",\r\n      makePublic\r\n    );\r\n    await this.init();\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param satelliteURL The url (endpoint) of the satellite\r\n   * @param conformsTo The standard to which the query part of the satellite conforms\r\n   * @returns \r\n   */\r\n  public async addSatellite(satelliteURL:string, conformsTo:string) {\r\n    try {\r\n      let standard\r\n      if (conformsTo.startsWith(\"http\")) standard = conformsTo\r\n      else {\r\n        switch (conformsTo) {\r\n          case \"sparql\":\r\n            standard = \"https://www.w3.org/TR/sparql11-query/\";\r\n            break;\r\n          default:\r\n            throw new Error('Could not determine standard')\r\n        }\r\n      }\r\n\r\n      const serviceId = v4()\r\n      const q = `INSERT DATA {\r\n        <${this.localProject}> <${DCAT.service}> <#${serviceId}> .\r\n        <#${serviceId}> a <${DCAT.DataService}> ;\r\n          <${DCAT.endpointURL}> <${satelliteURL}> ;\r\n          <${DCTERMS.conformsTo}> <${standard}> .\r\n      }`\r\n\r\n      console.log('query', q)\r\n      this.dataService.sparqlUpdate(this.localProject, q)\r\n      return satelliteURL\r\n    } catch (error) {\r\n      console.log('error', error)\r\n      throw error\r\n    }\r\n\r\n  }\r\n\r\n\r\n  public async getSatellites(conformsTo: string, options?: { queryEngine?: QueryEngine, partialProjects?: string[] }) {\r\n    try {\r\n\r\n      let queryEngine, partialProjects, standard\r\n\r\n      (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine();\r\n      (options && options.partialProjects) ? partialProjects = options.partialProjects : partialProjects = [this.localProject];\r\n\r\n      if (conformsTo.startsWith(\"http\")) standard = conformsTo\r\n      else {\r\n        switch (conformsTo) {\r\n          case \"sparql\":\r\n            standard = \"https://www.w3.org/TR/sparql11-query/\";\r\n            break;\r\n          default:\r\n            throw new Error('Could not determine standard')\r\n        }\r\n      }\r\n\r\n      const q = `select ?project ?url where {\r\n      ?project <${DCAT.service}> ?sat .\r\n      ?sat a <${DCAT.DataService}> ;\r\n        <${DCAT.endpointURL}> ?url ;\r\n        <${DCTERMS.conformsTo}> <${standard}> .\r\n    }`\r\n\r\n      const result = await queryEngine.queryBindings(q, { sources: partialProjects, fetch: this.fetch }).then(r => r.toArray())\r\n      if (result) {\r\n        const r = {}\r\n        result.forEach(i => {r[i.get('project').value] = i.get('url').value })\r\n        return r\r\n      } else {\r\n        return\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log('error', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description Add a partial project to a Pod-specific access point\r\n   * @param part Partial project to add to a Pod-specific access point\r\n   */\r\n  public async addPartialProject(part: string) {\r\n    const q0 = `INSERT DATA {\r\n        <${this.accessPoint}> <${DCAT.dataset}> <${part}> .\r\n        }`;\r\n    await this.dataService.sparqlUpdate(this.accessPoint, q0);\r\n  }\r\n\r\n  /**\r\n   * @description Add a stakeholder to an LBDserver project\r\n   * @param webId The WebID/card of the stakeholder\r\n   * @param accessRights the access rights this stakeholder should have.\r\n   */\r\n  public async addStakeholder(\r\n    webId: string,\r\n    accessRights: AccessRights = {\r\n      read: true,\r\n      append: false,\r\n      write: false,\r\n      control: false,\r\n    }\r\n  ) {\r\n    await this.accessService.setResourceAccess(\r\n      this.accessPoint,\r\n      accessRights,\r\n      ResourceType.CONTAINER,\r\n      webId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @description delete an LBDserver project (locally)\r\n   */\r\n  public async delete() {\r\n    await this.dataService.deleteContainer(this.accessPoint, true);\r\n  }\r\n\r\n  /**\r\n   * @description find all the partial projects from the indicated project access point\r\n   */\r\n  public async findAllPartialProjects(queryEngine: QueryEngine = new QueryEngine()) {\r\n    return await getQueryResult(\r\n      this.accessPoint,\r\n      DCAT.dataset,\r\n      this.fetch,\r\n      false,\r\n      queryEngine\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @description Find the partial project provided by this stakeholder\r\n   * @param webId The webID of the stakeholder whom's partial project you want to find\r\n   * @returns The URL of the partial project\r\n   */\r\n  public async findPartialProject(webId: string, queryEngine = new QueryEngine()) {\r\n    const repo = await this.lbdService.getProjectRegistry(webId, queryEngine);\r\n    // console.log('repo', repo)\r\n    const partialProjectOfStakeholder = repo + this.projectId + \"/local/\";\r\n    return partialProjectOfStakeholder\r\n    // console.log('partialProjectOfStakeholder', partialProjectOfStakeholder)\r\n    // const status = await this.fetch(partialProjectOfStakeholder, {\r\n    //   method: \"HEAD\",\r\n    // }).then((res) => res.status);\r\n    // if (status === 200) {\r\n    //   return partialProjectOfStakeholder;\r\n    // } else {\r\n    //   throw new Error(\r\n    //     `UNAUTHORIZED: This repository does not exist or you don't have the required access rights`\r\n    //   );\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * @description Add this stakeholder's partial project corresponding with this project (same GUID)\r\n   * @param webId The webID of the stakeholder whom's partial project you want to add\r\n   * @returns the URL of the partial project\r\n   */\r\n  public async addPartialProjectByStakeholder(webId: string) {\r\n    const partialProjectUrl = await this.findPartialProject(webId);\r\n    await this.addPartialProject(partialProjectUrl);\r\n    return partialProjectUrl;\r\n  }\r\n\r\n  private async createRegistryContainer(containerName, makePublic, property) {\r\n    if (!containerName.endsWith(\"/\")) containerName += \"/\";\r\n\r\n    const containerUrl = this.localProject + containerName;\r\n    await this.dataService.createContainer(containerUrl, makePublic);\r\n\r\n    const type = property.replace(\"#has\", \"#\")\r\n    const q = `INSERT DATA {\r\n      <${containerUrl}> a <${DCAT.Catalog}> , <${DCAT.Dataset}> , <${type}> .\r\n    }`\r\n\r\n    await this.dataService.sparqlUpdate(containerUrl, q);\r\n\r\n    const q0 = `INSERT DATA {\r\n        <${this.localProject}> <${property}> <${containerUrl}> ;\r\n          <${DCAT.dataset}> <${containerUrl}>.\r\n      }`;\r\n    await this.dataService.sparqlUpdate(this.localProject, q0);\r\n    return containerUrl;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  /////////////////////// DATASETS ////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description Add a dataset to the project\r\n   * @param makePublic initial access rights for the dataset\r\n   * @param id optional id for the dataset - a GUID is created by default\r\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\r\n   * @returns\r\n   */\r\n  public async addDataset(\r\n    options: object = {},\r\n    makePublic: boolean = false,\r\n    id: string = v4()\r\n  ): Promise<LbdDataset> {\r\n    const subject = extract(this.data, this.localProject);\r\n    const datasetRegistry = subject[LBDS.hasDatasetRegistry][0][\"@id\"];\r\n    const datasetUrl = datasetRegistry + id + \"/\";\r\n    const theDataset = new LbdDataset(this.session, datasetUrl);\r\n    await theDataset.create(options, makePublic);\r\n    return theDataset;\r\n  }\r\n\r\n  /**\r\n   * @description Delete a dataset by URL\r\n   * @param datasetUrl The URL of the dataset \r\n   */\r\n  public async deleteDataset(datasetUrl: string) {\r\n    if (!datasetUrl.endsWith(\"/\")) datasetUrl += \"/\";\r\n    const ds = new LbdDataset(this.session, datasetUrl);\r\n    await ds.delete();\r\n  }\r\n\r\n  /**\r\n   * @description delete a dataset by its ID\r\n   * @param datasetId The GUID of the dataset to be deleted\r\n   */\r\n  public async deleteDatasetById(datasetId: string) {\r\n    const subject = extract(this.data, this.localProject);\r\n    const datasetRegistry = subject[LBDS.hasDatasetRegistry][0][\"@id\"];\r\n    const datasetUrl = datasetRegistry + datasetId + \"/\";\r\n    const ds = new LbdDataset(this.session, datasetUrl);\r\n    await ds.delete();\r\n  }\r\n\r\n  /**\r\n   * @description Get all datasets within this project\r\n   * @param options {query: query to override, asStream: consume the results as a stream, local: query only the local project}\r\n   * @returns \r\n   */\r\n  public async getAllDatasetUrls(options?: {\r\n    query: string;\r\n    asStream: boolean;\r\n    local: boolean;\r\n    queryEngine: QueryEngine\r\n    invalidateCache: boolean\r\n  }) {\r\n    let queryEngine\r\n    (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine()\r\n    const subject = extract(this.data, this.localProject);\r\n    const sources = [];\r\n    if (options && options.local) {\r\n      sources.push(subject[LBDS.hasDatasetRegistry][0][\"@id\"]);\r\n    } else {\r\n      const partials = await this.findAllPartialProjects();\r\n      for (const p of partials) {\r\n        const dsReg = await getQueryResult(\r\n          p,\r\n          LBDS.hasDatasetRegistry,\r\n          this.fetch,\r\n          true,\r\n          queryEngine\r\n        );\r\n        sources.push(dsReg);\r\n      }\r\n    }\r\n    let q;\r\n    if (!options || !options.query) {\r\n      q = `SELECT ?dataset WHERE {?registry <${LDP.contains}> ?dataset}`;\r\n    } else {\r\n      q = options.query;\r\n    }\r\n\r\n    const results = await queryEngine.query(q, { sources, fetch: this.fetch });\r\n    const { data } = await queryEngine.resultToString(\r\n      results,\r\n      \"application/sparql-results+json\"\r\n    );\r\n    if (options && options.invalidateCache) {\r\n      queryEngine.invalidateHttpCache()\r\n    }\r\n    if (options && options.asStream) {\r\n      return data;\r\n    } else {\r\n      const parsed = await parseStream(data);\r\n      return parsed[\"results\"].bindings.map((i) => i[\"dataset\"].value);\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  ////////////////////// REFERENCES////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description Add a concept to the local project registry\r\n   * @returns an LBDconcept Instance\r\n   */\r\n  public async addConcept(id?): Promise<LbdConcept> {\r\n    const subject = extract(this.data, this.localProject);\r\n    const referenceRegistry = subject[LBDS.hasReferenceRegistry][0][\"@id\"];\r\n    const ref = new LbdConcept(this.session, referenceRegistry);\r\n    await ref.create(id);\r\n    return ref;\r\n  }\r\n\r\n  public getReferenceRegistry() {\r\n    const subject = extract(this.data, this.localProject);\r\n    return subject[LBDS.hasReferenceRegistry][0][\"@id\"];\r\n  }\r\n\r\n  public getDatasetRegistry() {\r\n    const subject = extract(this.data, this.localProject);\r\n    return subject[LBDS.hasDatasetRegistry][0][\"@id\"];\r\n  }\r\n\r\n  private async getAllReferenceRegistries(queryEngine: QueryEngine = new QueryEngine()) {\r\n    const partials = await this.findAllPartialProjects(queryEngine)\r\n    const registries = []\r\n\r\n    for (const partial of partials) {\r\n      const reg = await getQueryResult(partial, LBDS.hasReferenceRegistry, this.fetch, true, queryEngine)\r\n      registries.push(reg + \"data\")\r\n    }\r\n\r\n    return registries\r\n  }\r\n\r\n  /**\r\n   * @description delete a concept by ID\r\n   * @param url the URL of the concept to be deleted\r\n   */\r\n  public async deleteConcept(url: string) {\r\n    const parts = url.split(\"/\");\r\n    const id = parts.pop();\r\n    const referenceRegistry = parts.join(\"/\");\r\n    const ref = new LbdConcept(this.session, referenceRegistry);\r\n    await ref.delete();\r\n  }\r\n\r\n  /**\r\n   * @description Find the main concept by one of its representations: an identifier and a dataset\r\n   * @param identifier the Identifier of the representation\r\n   * @param dataset the dataset where the representation resides\r\n   * @param distribution (optional) the distribution of the representation\r\n   * @returns \r\n   */\r\n  public async getConceptByIdentifier(\r\n    identifier: string,\r\n    dataset: string,\r\n    distribution?: string,\r\n    options?: { queryEngine?: QueryEngine, invalidateCache?: boolean }\r\n  ) {\r\n    let myEngine\r\n    if (options && options.queryEngine) {\r\n      myEngine = options.queryEngine\r\n    } else {\r\n      myEngine = new QueryEngine()\r\n    }\r\n\r\n    // find all the reference registries of the aggregated partial projects\r\n    const partials = await this.findAllPartialProjects();\r\n    const satellites = await this.getSatellites('sparql', {queryEngine: myEngine, partialProjects: partials})\r\n    let sources = Object.keys(satellites).map(key => satellites[key]);\r\n    for (const p of partials) {\r\n      if (!Object.keys(satellites).includes(p)) {\r\n        const referenceRegistry = await getQueryResult(\r\n          p,\r\n          LBDS.hasReferenceRegistry,\r\n          this.fetch,\r\n          true\r\n        );\r\n  \r\n        sources.push(referenceRegistry + \"data\")\r\n      }\r\n    }\r\n\r\n    let id\r\n    if (identifier.startsWith(\"http\")) id = `<${identifier}>`\r\n    else id = `\"${identifier}\"`\r\n    const q = `SELECT ?concept WHERE {\r\n      ?concept <${LBDS.hasReference}> ?ref .\r\n      ?ref <${LBDS.inDataset}> <${dataset}> ;\r\n        <${LBDS.hasIdentifier}> ?idUrl .\r\n      ?idUrl <https://w3id.org/lbdserver#value> ${id} .\r\n  } LIMIT 1`;\r\n\r\n\r\n    const results = await myEngine.queryBindings(q, { sources, fetch: this.fetch })\r\n      .then(r => r.toArray())\r\n    if (options && options.invalidateCache) {\r\n      myEngine.invalidateHttpCache()\r\n    }\r\n    if (results.length > 0) {\r\n      const raw = results[0].get('concept').value\r\n      let invalidateCache\r\n      if (options && options.invalidateCache) invalidateCache = options.invalidateCache\r\n      const theConcept = await this.getConcept(raw, { queryEngine: myEngine, invalidateCache })\r\n      return theConcept\r\n    } else {\r\n      return undefined\r\n    }\r\n\r\n\r\n    //     const aliases = {}\r\n    //     asJson[\"results\"].bindings.forEach(item => {\r\n    //       const alias = item[\"alias\"].value\r\n    //       const distribution = item[\"dist\"].value\r\n    //       const dataset = item[\"dataset\"].value\r\n    //       const identifier = item[\"identifier\"].value\r\n\r\n    //       if (!Object.keys(aliases).includes(alias)) {\r\n    //         aliases[alias] = []\r\n    //       }\r\n    // -    })\r\n  }\r\n\r\n  /**\r\n * @description Find the main concept by one of its representations: an identifier and a dataset\r\n * @param identifier the Identifier of the representation\r\n * @param dataset the dataset where the representation resides\r\n * @param distribution (optional) the distribution of the representation\r\n * @returns \r\n */\r\n  public async getConceptByIdentifierOld(\r\n    identifier: string,\r\n    dataset: string,\r\n    distribution?: string,\r\n    options?: { queryEngine: QueryEngine }\r\n  ) {\r\n    let myEngine\r\n    if (options && options.queryEngine) {\r\n      myEngine = options.queryEngine\r\n    } else {\r\n      myEngine = new QueryEngine()\r\n    }\r\n\r\n    // find all the reference registries of the aggregated partial projects\r\n    const partials = await this.findAllPartialProjects();\r\n    let sources = [];\r\n    for (const p of partials) {\r\n      const referenceRegistry = await getQueryResult(\r\n        p,\r\n        LBDS.hasReferenceRegistry,\r\n        this.fetch,\r\n        true\r\n      );\r\n\r\n      const rq = `SELECT ?downloadURL ?dist WHERE {<${referenceRegistry}> <${DCAT.distribution}> ?dist . ?dist <${DCAT.downloadURL}> ?downloadURL . OPTIONAL {?dist <${DCAT.accessURL}> ?accessURL .}}`;\r\n      const bindingsStream = await myEngine.queryBindings(rq, { sources: [referenceRegistry], fetch: this.fetch })\r\n      const results = await bindingsStream.toArray()\r\n        .then(res => res.map(item => {\r\n          return {\r\n            downloadURL: item.get(\"downloadURL\").value,\r\n            accessURL: item.get(\"accessURL\") && item.get(\"accessURL\").value,\r\n          }\r\n        }))\r\n\r\n      sources = [...sources, ...results];\r\n    }\r\n\r\n    const downloadURLs = sources.map((item) => item.downloadURL);\r\n    let id\r\n    if (identifier.startsWith(\"http\")) id = `<${identifier}>`\r\n    else id = `\"${identifier}\"`\r\n    const q = `SELECT ?concept ?alias WHERE {\r\n        ?concept <${LBDS.hasReference}> ?ref .\r\n        ?ref <${LBDS.inDataset}> <${dataset}> ;\r\n          <${LBDS.hasIdentifier}> ?idUrl .\r\n        ?idUrl <https://w3id.org/lbdserver#value> ${id} .\r\n        OPTIONAL {?concept <${OWL.sameAs}> ?alias}\r\n    }`;\r\n\r\n    const aliases = new Set<any>();\r\n    await myEngine.queryBindings(q, { sources: downloadURLs, fetch: this.fetch })\r\n      .then(r => r.toArray())\r\n      .then(bindings =>\r\n        bindings.forEach((bi) => {\r\n          aliases.add(bi.get(\"concept\").value)\r\n          if (bi.get(\"alias\")) aliases.add(bi.get(\"alias\").value);\r\n        })\r\n      );\r\n\r\n    const concept = {\r\n      aliases: [],\r\n      references: []\r\n    }\r\n\r\n    for (let v of aliases.values()) {\r\n      concept.aliases.push(v)\r\n      const idQ = `SELECT ?dataset ?dist ?identifier WHERE {\r\n            <${v}> <${LBDS.hasReference}> ?ref .\r\n            ?ref <${LBDS.inDataset}> ?dataset ;\r\n              <${LBDS.hasIdentifier}> ?idUrl .\r\n            ?idUrl <https://w3id.org/lbdserver#value> ?identifier ;\r\n              <${LBDS.inDistribution}> ?dist .\r\n          }`\r\n      const bindings = await myEngine.queryBindings(idQ, { sources: downloadURLs, fetch: this.fetch }).then(response => response.toArray())\r\n      bindings.map(b => {\r\n        concept.references.push({\r\n          dataset: b.get(\"dataset\").value,\r\n          distribution: b.get(\"dist\").value,\r\n          identifier: b.get(\"identifier\").value\r\n        })\r\n      })\r\n    }\r\n\r\n    const subject = extract(this.data, this.localProject);\r\n    const referenceRegistry = subject[LBDS.hasReferenceRegistry][0][\"@id\"];\r\n    const theConcept = new LbdConcept(this.session, referenceRegistry)\r\n    theConcept.init(concept)\r\n    return theConcept\r\n    //     const aliases = {}\r\n    //     asJson[\"results\"].bindings.forEach(item => {\r\n    //       const alias = item[\"alias\"].value\r\n    //       const distribution = item[\"dist\"].value\r\n    //       const dataset = item[\"dataset\"].value\r\n    //       const identifier = item[\"identifier\"].value\r\n\r\n    //       if (!Object.keys(aliases).includes(alias)) {\r\n    //         aliases[alias] = []\r\n    //       }\r\n    // -    })\r\n  }\r\n\r\n  public async getConcept(\r\n    url: string,\r\n    options?: { queryEngine?: QueryEngine, invalidateCache?: boolean, sources?: string[] }\r\n  ) {\r\n    let myEngine, sources\r\n    if (options && options.queryEngine) {\r\n      myEngine = options.queryEngine\r\n    } else {\r\n      myEngine = new QueryEngine()\r\n    }\r\n    const conceptRegistry = url.split('#')[0] + ''\r\n\r\n    if (options && options.sources) {sources = options.sources} else {sources = [conceptRegistry]}\r\n\r\n    const concept = {\r\n      aliases: [],\r\n      references: []\r\n    }\r\n\r\n    // find all the aliases\r\n    const q_alias = `SELECT ?alias\r\n    WHERE {\r\n      <${url}> <${OWL.sameAs}> ?alias\r\n    }`\r\n\r\n    const aliases = new Set<string>()\r\n    aliases.add(url)\r\n\r\n    const bindingsStream0 = await myEngine.queryBindings(q_alias, { sources , fetch: this.fetch })\r\n    await bindingsStream0.toArray().then(res => res.forEach(b => {\r\n      aliases.add(b.get('alias').value)\r\n    }))\r\n\r\n    concept.aliases = Array.from(aliases)\r\n\r\n    for (const alias of concept.aliases) {\r\n      const reg = alias.split('#')[0]\r\n      const q1 = `SELECT ?dataset ?distribution ?id\r\n      WHERE {\r\n        <${alias}> a <${LBDS.Concept}> ;\r\n        <${LBDS.hasReference}> ?ref .\r\n        ?ref <${LBDS.hasIdentifier}> ?identifier ;\r\n           <${LBDS.inDataset}> ?dataset .\r\n        ?identifier <${LBDS.inDistribution}> ?distribution ;\r\n            <https://w3id.org/lbdserver#value> ?id .  \r\n      }`\r\n\r\n      if (options && options.sources) {sources = options.sources} else {sources = [reg]}\r\n\r\n      const bindingsStream = await myEngine.queryBindings(q1, { sources: sources, fetch: this.fetch })\r\n      await bindingsStream.toArray().then(res => res.forEach(b => {\r\n\r\n        concept.references.push({\r\n          dataset: b.get(\"dataset\").value,\r\n          distribution: b.get(\"distribution\").value,\r\n          identifier: b.get(\"id\").value\r\n        })\r\n      }))\r\n    }\r\n\r\n    const theConcept = new LbdConcept(this.session, conceptRegistry)\r\n    theConcept.init(concept)\r\n    if (options && options.invalidateCache) myEngine.invalidateHttpCache()\r\n    return theConcept\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  /////////////////////// QUERY ///////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description a direct query on project resources\r\n   * @param q The SPARQL query (string)\r\n   * @param sources The sources (array)\r\n   * @param asStream Whether to be consumed as a stream or not (default: false)\r\n   * @returns \r\n   */\r\n  public async directQuery(q: string, sources: string[], options?: { asStream?: boolean, queryEngine: QueryEngine }) {\r\n    const registries = await this.getAllReferenceRegistries()\r\n    let queryEngine\r\n    (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine()\r\n    const results = await query(q, { sources, fetch: this.fetch, registries, ...options, queryEngine })\r\n    return results\r\n  }\r\n\r\n\r\n  // /**\r\n  //  * @description A query where datasets take the \r\n  //  * @param q \r\n  //  * @param datasets \r\n  //  * @param asStream \r\n  //  */\r\n  // public async indirectQuery(q: string, datasets: string[], asStream: boolean = false) {\r\n\r\n  // }\r\n}\r\n"],"file":"LbdProject.js"}