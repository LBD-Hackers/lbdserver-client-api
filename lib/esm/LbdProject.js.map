{"version":3,"sources":["../../src/LbdProject.ts"],"names":["LbdProject","verbose","constructor","session","accessPoint","endsWith","fetch","localProject","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LBDService","checkExistence","status","method","then","result","init","data","headers","Accept","i","json","create","existingPartialProjects","options","makePublic","local","push","createContainer","aclDefault","ACL","default","Authorization","agentClass","FOAF","Agent","sparqlUpdate","createRegistryContainer","LBD","hasDatasetRegistry","referenceContainerUrl","hasReferenceRegistry","hasServiceRegistry","part","addPartialProject","q","DCTERMS","creator","info","webId","Object","keys","q0","key","referenceMeta","LbdDataset","addDistribution","Buffer","from","aggregates","addStakeholder","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","delete","deleteContainer","findAllPartialProjects","findPartialProject","repo","getProjectRegistry","partialProjectOfStakeholder","addPartialProjectByStakeholder","partialProjectUrl","containerName","property","containerUrl","addDataset","id","subject","datasetRegistry","datasetUrl","theDataset","deleteDataset","ds","deleteDatasetById","datasetId","getAllDatasetUrls","myEngine","sources","partials","p","dsReg","query","LDP","contains","results","resultToString","asStream","parsed","bindings","map","value","addConcept","referenceRegistry","ref","LbdConcept","getReferenceRegistry","getAllReferenceRegistries","registries","partial","reg","deleteConcept","url","parts","pop","join","getConceptByIdentifier","identifier","dataset","distribution","rq","DCAT","downloadURL","accessURL","r","b","bi","get","downloadURLs","item","hasReference","inDataset","hasIdentifier","OWL","sameAs","aliases","Set","forEach","add","concept","references","v","values","idQ","inDistribution","response","theConcept","directQuery"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\nimport DataService from \"./helpers/data-service\";\nimport LbdConcept from \"./LbdConcept\";\nimport {\n  newEngine,\n  IQueryResultBindings,\n  ActorInitSparql,\n} from \"@comunica/actor-init-sparql\";\nimport LbdDataset from \"./LbdDataset\";\nimport LBD from \"./helpers/vocab/lbds\";\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport { extract, query } from \"./helpers/functions\";\nimport { v4 } from \"uuid\";\nimport { ACL, DCAT, DCTERMS, FOAF, OWL } from \"@inrupt/vocab-common-rdf\";\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\nimport { LDP } from \"@inrupt/vocab-common-rdf\";\nimport { getQueryResult, parseStream } from \"./helpers/utils\";\n\nexport default class LbdProject {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public accessPoint: string;\n  public data: object[];\n\n  private session: BrowserSession | NodeSession;\n\n  // include queryEngine to allow caching of querydata etc.\n  public localProject: string;\n\n  /**\n   * \n   * @param session an (authenticated) Solid session\n   * @param accessPoint The main accesspoint of the project. This is an aggregator containing the different partial projects of the LBDserver instance\n   * @param verbose optional parameter for logging purposes\n   */\n  constructor(\n    session: BrowserSession | NodeSession,\n    accessPoint: string,\n    verbose: boolean = false\n  ) {\n    if (!accessPoint.endsWith(\"/\")) accessPoint += \"/\";\n    this.session = session;\n    this.fetch = session.fetch;\n    this.accessPoint = accessPoint;\n    this.localProject = accessPoint + \"local/\";\n    this.verbose = verbose;\n    this.projectId = accessPoint.split(\"/\")[accessPoint.split(\"/\").length - 2];\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  /**\n   * @description Checks whether a project with this access point already exists\n   * @returns Boolean: true = the project exists / false = the project doesn't exist\n   */\n  public async checkExistence() {\n    const status = await this.fetch(this.accessPoint, { method: \"HEAD\" }).then(\n      (result) => result.status\n    );\n    if (status === 200) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** \n   * @description Initialize the project in your application. In short, this adds project metadata to your LbdProject instance\n   */\n  public async init() {\n    const data = await this.fetch(this.localProject, {\n      headers: { Accept: \"application/ld+json\" },\n    }).then((i) => i.json());\n    this.data = data;\n    return data;\n  }\n\n\n  /**\n   * @description Create an LBDserver project on your Pod\n   * @param existingPartialProjects optional: if the project is already initialized on other stakeholder pods. Adds the existing partial projects to the Pod-specific access point\n   * @param options Metadata for the project. To be in format {[predicate]: value}\n   * @param makePublic access rights: true = public; false = only the creator\n   */\n  public async create(\n    existingPartialProjects: string[] = [],\n    options: object = {},\n    makePublic: boolean = false\n  ) {\n    const local = this.accessPoint + \"local/\";\n    existingPartialProjects.push(local);\n\n    // create global access point\n    await this.dataService.createContainer(this.accessPoint, makePublic);\n    await this.dataService.createContainer(local, makePublic);\n    if (makePublic) {\n      let aclDefault = `INSERT {?rule <${ACL.default}> <${local}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`;\n      await this.dataService.sparqlUpdate(local + \".acl\", aclDefault);\n    }\n\n    // create different registries\n    await this.createRegistryContainer(\n      \"datasets/\",\n      makePublic,\n      LBD.hasDatasetRegistry\n    );\n    const referenceContainerUrl = await this.createRegistryContainer(\n      \"references/\",\n      makePublic,\n      LBD.hasReferenceRegistry\n    );\n    await this.createRegistryContainer(\n      \"services/\",\n      makePublic,\n      LBD.hasServiceRegistry\n    );\n\n    for (const part of existingPartialProjects) {\n      await this.addPartialProject(part);\n    }\n\n    let q = `INSERT DATA {<${this.accessPoint}> <${DCTERMS.creator}> \"${this.session.info.webId}\" . }`;\n    await this.dataService.sparqlUpdate(local, q);\n    await this.dataService.sparqlUpdate(this.accessPoint, q);\n\n    // create optional metadata (e.g. label etc.)\n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `;\n      for (const key of Object.keys(options)) {\n        q0 += `<${this.accessPoint}> <${key}> \"${options[key]}\" .`;\n      }\n      q0 += \"}\";\n      await this.dataService.sparqlUpdate(this.accessPoint, q0);\n    }\n\n    const referenceMeta = new LbdDataset(this.session, referenceContainerUrl);\n    await referenceMeta.create();\n    await referenceMeta.addDistribution(\n      Buffer.from(\"\"),\n      \"text/turtle\",\n      {},\n      \"data\",\n      makePublic\n    );\n    await this.init();\n  }\n\n  /**\n   * @description Add a partial project to a Pod-specific access point\n   * @param part Partial project to add to a Pod-specific access point\n   */\n  public async addPartialProject(part: string) {\n    const q0 = `INSERT DATA {\n        <${this.accessPoint}> <${LBD.aggregates}> <${part}> .\n        }`;\n    await this.dataService.sparqlUpdate(this.accessPoint, q0);\n  }\n\n  /**\n   * @description Add a stakeholder to an LBDserver project\n   * @param webId The WebID/card of the stakeholder\n   * @param accessRights the access rights this stakeholder should have.\n   */\n  public async addStakeholder(\n    webId: string,\n    accessRights: AccessRights = {\n      read: true,\n      append: false,\n      write: false,\n      control: false,\n    }\n  ) {\n    await this.accessService.setResourceAccess(\n      this.accessPoint,\n      accessRights,\n      ResourceType.CONTAINER,\n      webId\n    );\n  }\n\n  /**\n   * @description delete an LBDserver project (locally)\n   */\n  public async delete() {\n    await this.dataService.deleteContainer(this.accessPoint, true);\n  }\n\n  /**\n   * @description find all the partial projects from the indicated project access point\n   */\n  public async findAllPartialProjects() {\n    return await getQueryResult(\n      this.accessPoint,\n      LBD.aggregates,\n      this.fetch,\n      false\n    );\n  }\n\n  /**\n   * @description Find the partial project provided by this stakeholder\n   * @param webId The webID of the stakeholder whom's partial project you want to find\n   * @returns The URL of the partial project\n   */\n  public async findPartialProject(webId: string) {\n    const repo = await this.lbdService.getProjectRegistry(webId);\n    // console.log('repo', repo)\n    const partialProjectOfStakeholder = repo + this.projectId + \"/local/\";\n    return partialProjectOfStakeholder\n    // console.log('partialProjectOfStakeholder', partialProjectOfStakeholder)\n    // const status = await this.fetch(partialProjectOfStakeholder, {\n    //   method: \"HEAD\",\n    // }).then((res) => res.status);\n    // if (status === 200) {\n    //   return partialProjectOfStakeholder;\n    // } else {\n    //   throw new Error(\n    //     `UNAUTHORIZED: This repository does not exist or you don't have the required access rights`\n    //   );\n    // }\n  }\n\n  /**\n   * @description Add this stakeholder's partial project corresponding with this project (same GUID)\n   * @param webId The webID of the stakeholder whom's partial project you want to add\n   * @returns the URL of the partial project\n   */\n  public async addPartialProjectByStakeholder(webId: string) {\n    const partialProjectUrl = await this.findPartialProject(webId);\n    await this.addPartialProject(partialProjectUrl);\n    return partialProjectUrl;\n  }\n\n  private async createRegistryContainer(containerName, makePublic, property) {\n    if (!containerName.endsWith(\"/\")) containerName += \"/\";\n\n    const containerUrl = this.localProject + containerName;\n    await this.dataService.createContainer(containerUrl, makePublic);\n    const q0 = `INSERT DATA {\n        <${this.localProject}> <${property}> <${containerUrl}> .\n      }`;\n    await this.dataService.sparqlUpdate(this.localProject, q0);\n    return containerUrl;\n  }\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// DATASETS ////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * @description Add a dataset to the project\n   * @param makePublic initial access rights for the dataset\n   * @param id optional id for the dataset - a GUID is created by default\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns\n   */\n  public async addDataset(\n    options: object = {},\n    makePublic: boolean = false,\n    id: string = v4()\n  ): Promise<LbdDataset> {\n    const subject = extract(this.data, this.localProject);\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"];\n    const datasetUrl = datasetRegistry + id + \"/\";\n    const theDataset = new LbdDataset(this.session, datasetUrl);\n    await theDataset.create(options, makePublic);\n    return theDataset;\n  }\n\n  /**\n   * @description Delete a dataset by URL\n   * @param datasetUrl The URL of the dataset \n   */\n  public async deleteDataset(datasetUrl: string) {\n    if (!datasetUrl.endsWith(\"/\")) datasetUrl += \"/\";\n    const ds = new LbdDataset(this.session, datasetUrl);\n    await ds.delete();\n  }\n\n  /**\n   * @description delete a dataset by its ID\n   * @param datasetId The GUID of the dataset to be deleted\n   */\n  public async deleteDatasetById(datasetId: string) {\n    const subject = extract(this.data, this.localProject);\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"];\n    const datasetUrl = datasetRegistry + datasetId + \"/\";\n    const ds = new LbdDataset(this.session, datasetUrl);\n    await ds.delete();\n  }\n\n  /**\n   * @description Get all datasets within this project\n   * @param options {query: query to override, asStream: consume the results as a stream, local: query only the local project}\n   * @returns \n   */\n  public async getAllDatasetUrls(options?: {\n    query: string;\n    asStream: boolean;\n    local: boolean;\n  }) {\n    const myEngine = newEngine();\n    const subject = extract(this.data, this.localProject);\n    const sources = [];\n    if (options && options.local) {\n      sources.push(subject[LBD.hasDatasetRegistry][0][\"@id\"]);\n    } else {\n      const partials = await this.findAllPartialProjects();\n      for (const p of partials) {\n        const dsReg = await getQueryResult(\n          p,\n          LBD.hasDatasetRegistry,\n          this.fetch,\n          true\n        );\n        sources.push(dsReg);\n      }\n    }\n    let q;\n    if (!options || !options.query) {\n      q = `SELECT ?dataset WHERE {?registry <${LDP.contains}> ?dataset}`;\n    } else {\n      q = options.query;\n    }\n\n    const results = await myEngine.query(q, { sources, fetch: this.fetch });\n    const { data } = await myEngine.resultToString(\n      results,\n      \"application/sparql-results+json\"\n    );\n    if (options && options.asStream) {\n      return data;\n    } else {\n      const parsed = await parseStream(data);\n      return parsed[\"results\"].bindings.map((i) => i[\"dataset\"].value);\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// REFERENCES////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * @description Add a concept to the local project registry\n   * @returns an LBDconcept Instance\n   */\n  public async addConcept(id?): Promise<LbdConcept> {\n    const subject = extract(this.data, this.localProject);\n    const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"];\n    const ref = new LbdConcept(this.session, referenceRegistry);\n    await ref.create(id);\n    return ref;\n  }\n\n  public getReferenceRegistry() {\n    const subject = extract(this.data, this.localProject);\n    return subject[LBD.hasReferenceRegistry][0][\"@id\"];\n  }\n\n  private async getAllReferenceRegistries() {\n    const partials = await this.findAllPartialProjects()\n    const registries = []\n\n    for (const partial of partials) {\n      const reg = await getQueryResult(partial, LBD.hasReferenceRegistry, this.fetch, true)\n      registries.push(reg + \"data\")\n    }\n\n    return registries\n  }\n\n  /**\n   * @description delete a concept by ID\n   * @param url the URL of the concept to be deleted\n   */\n  public async deleteConcept(url: string) {\n    const parts = url.split(\"/\");\n    const id = parts.pop();\n    const referenceRegistry = parts.join(\"/\");\n    const ref = new LbdConcept(this.session, referenceRegistry);\n    await ref.delete();\n  }\n\n  /**\n   * @description Find the main concept by one of its representations: an identifier and a dataset\n   * @param identifier the Identifier of the representation\n   * @param dataset the dataset where the representation resides\n   * @param distribution (optional) the distribution of the representation\n   * @returns \n   */\n  public async getConceptByIdentifier(\n    identifier: string,\n    dataset: string,\n    distribution?: string\n  ) {\n    const myEngine = newEngine();\n\n    // find all the reference registries of the aggregated partial projects\n    const partials = await this.findAllPartialProjects();\n    let sources = [];\n    for (const p of partials) {\n      const referenceRegistry: string = await getQueryResult(\n        p,\n        LBD.hasReferenceRegistry,\n        this.fetch,\n        true\n      );\n      const rq = `SELECT ?downloadURL ?dist WHERE {<${referenceRegistry}> <${DCAT.distribution}> ?dist . ?dist <${DCAT.downloadURL}> ?downloadURL . OPTIONAL {?dist <${DCAT.accessURL}> ?accessURL .}}`;\n      const results = await myEngine\n        .query(rq, { sources: [referenceRegistry], fetch: this.fetch })\n        .then((r: IQueryResultBindings) => r.bindings())\n        .then((b) =>\n          b.map((bi) => {\n            return {\n              downloadURL: bi.get(\"?downloadURL\"),\n              accessURL: bi.get(\"?accessURL\"),\n            };\n          })\n        );\n      sources = [...sources, ...results];\n    }\n\n    const downloadURLs = sources.map((item) => item.downloadURL.id);\n    const q = `SELECT ?concept ?alias WHERE {\n      ?concept <${LBD.hasReference}> ?ref .\n      ?ref <${LBD.inDataset}> <${dataset}> ;\n        <${LBD.hasIdentifier}> ?idUrl .\n      ?idUrl <http://schema.org/value> \"${identifier}\" .\n      OPTIONAL {?concept <${OWL.sameAs}> ?alias}\n  }`;\n\n    const aliases = new Set<string>();\n    await myEngine\n      .query(q, { sources: downloadURLs, fetch: this.fetch })\n      .then((r: IQueryResultBindings) => r.bindings())\n      .then((b) =>\n        b.forEach((bi) => {\n          aliases.add(bi.get(\"?concept\").value)\n          if (bi.get(\"?alias\")) aliases.add(bi.get(\"?alias\"));\n        })\n      );\n\n      const concept = {\n        aliases: [],\n        references: [] \n      }\n\n      for (let v of aliases.values()) {\n        concept.aliases.push(v)\n        const idQ = `SELECT ?dataset ?dist ?identifier WHERE {\n          <${v}> <${LBD.hasReference}> ?ref .\n          ?ref <${LBD.inDataset}> ?dataset ;\n            <${LBD.hasIdentifier}> ?idUrl .\n          ?idUrl <http://schema.org/value> ?identifier ;\n            <${LBD.inDistribution}> ?dist .\n        }`\n        const bindings = await myEngine.query(idQ, {sources: downloadURLs, fetch: this.fetch})\n          .then((response: IQueryResultBindings) => response.bindings())\n        bindings.map(b => {\n          concept.references.push({\n            dataset: b.get(\"?dataset\").value,\n            distribution: b.get(\"?dist\").value,\n            identifier: b.get(\"?identifier\").value\n          })\n      })\n    }\n\n    const subject = extract(this.data, this.localProject);\n    const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"];\n    const theConcept = new LbdConcept(this.session, referenceRegistry)\n    theConcept.init(concept)\n    return theConcept\n    //     const aliases = {}\n    //     asJson[\"results\"].bindings.forEach(item => {\n    //       const alias = item[\"alias\"].value\n    //       const distribution = item[\"dist\"].value\n    //       const dataset = item[\"dataset\"].value\n    //       const identifier = item[\"identifier\"].value\n\n    //       if (!Object.keys(aliases).includes(alias)) {\n    //         aliases[alias] = []\n    //       }\n    // -    })\n  }\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// QUERY ///////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * @description a direct query on project resources\n   * @param q The SPARQL query (string)\n   * @param sources The sources (array)\n   * @param asStream Whether to be consumed as a stream or not (default: false)\n   * @returns \n   */\n  public async directQuery(q: string, sources: string[], asStream: boolean = false) {\n    const registries = await this.getAllReferenceRegistries()\n    const results = await query(q, {sources, fetch: this.fetch, asStream, registries})\n    return results\n  }\n\n\n  // /**\n  //  * @description A query where datasets take the \n  //  * @param q \n  //  * @param datasets \n  //  * @param asStream \n  //  */\n  // public async indirectQuery(q: string, datasets: string[], asStream: boolean = false) {\n\n  // }\n}\n"],"file":"LbdProject.js"}