{"version":3,"file":"LbdService.js","names":["namedNode","literal","defaultGraph","quad","variable","DataFactory","LbdService","verbose","constructor","session","fetch","accessService","AccessService","dataService","DataService","store","Store","initialiseSatellite","endpoint","repository","validateWebId","webId","info","isLoggedIn","Error","lbdLoc","getProjectRegistry","length","getAllProjects","aggregator","myProjects","includes","data","headers","Accept","then","t","json","LDP","contains","map","i","constructTree","root","queryEngine","QueryEngine","recursiveArray","alreadyFetched","notExists","resources","getLDPContent","res","push","endsWith","status","method","d","filter","sources","q","DCAT","dataset","results","queryBindings","b","toArray","get","value","stakeholder","LBD","hasProjectRegistry","location","bind","catch","err","undefined","getInbox","inbox","createProjectRegistry","url","publiclyAccessible","replace","q0","sparqlUpdate","q1","Aggregator","accessRights","actor","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","error","console","log","removeProjectRegistry","deleteContainer"],"sources":["../../src/LbdService.ts"],"sourcesContent":["import AccessService from \"./helpers/access-service\";\r\nimport DataService from \"./helpers/data-service\";\r\nimport { computeChecksumMd5 } from \"./helpers/utils\";\r\n// Import from \"@inrupt/solid-client\"\r\nimport {\r\n  createSolidDataset,\r\n  buildThing,\r\n  getSolidDataset,\r\n  createThing,\r\n  setThing,\r\n  setUrl,\r\n  addUrl,\r\n  getThingAll,\r\n  getUrlAll,\r\n  setDatetime,\r\n  saveSolidDatasetAt,\r\n} from \"@inrupt/solid-client\";\r\nimport { extract, streamToString } from \"./helpers/functions\";\r\nimport { RDF, SCHEMA_INRUPT, DCAT, OWL, LDP, AS, XSD, FOAF, DCTERMS } from \"@inrupt/vocab-common-rdf\";\r\nimport LBD from \"./helpers/vocab/lbds\";\r\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\r\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\r\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\r\nimport { translate, toSparql } from 'sparqlalgebrajs'\r\nimport { Store, DataFactory } from 'n3'\r\nimport { QueryEngine } from \"@comunica/query-sparql\";\r\n\r\nconst { namedNode, literal, defaultGraph, quad, variable } = DataFactory;\r\n\r\nexport class LbdService {\r\n  public fetch;\r\n  public verbose: boolean = false;\r\n  public accessService: AccessService;\r\n  public dataService: DataService;\r\n  private session: any;\r\n  private store: Store\r\n\r\n\r\n  /**\r\n   * \r\n   * @param session an (authenticated) session\r\n   * @param verbose optional parameter for logging purposes\r\n   */\r\n  constructor(session: any, verbose: boolean = false) {\r\n    this.session = session;\r\n    this.fetch = session.fetch;\r\n    this.verbose = verbose;\r\n    this.accessService = new AccessService(session.fetch);\r\n    this.dataService = new DataService(session.fetch);\r\n    this.store = new Store()\r\n  }\r\n\r\n  public async initialiseSatellite(endpoint, repository) {\r\n    \r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  ////////////////////// QUERY ////////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  // public async query(q: string, { sources, registries, asStream, queryEngine }) {\r\n  //   const { query } = this.mutateQuery(q)\r\n\r\n  //   const myEngine = new QueryEngine();\r\n\r\n  //   await this.inference(myEngine, registries)\r\n  //   const context: any = { sources: [...sources, this.store], fetch }\r\n  //   const result = await myEngine.query(query, context)\r\n  //   const { data } = await myEngine.resultToString(result,\r\n  //     'application/sparql-results+json');\r\n  //   if (asStream) {\r\n  //     return data\r\n  //   } else {\r\n  //     return JSON.parse(await streamToString(data))\r\n  //   }\r\n  // }\r\n\r\n  // private findLowerLevel(obj, variables) {\r\n  //   if (!variables) variables = obj.variables\r\n  //   if (obj.type === \"bgp\") {\r\n  //     return { bgp: obj, variables }\r\n  //   } else {\r\n  //     return this.findLowerLevel(obj.input, variables)\r\n  //   }\r\n  // }\r\n\r\n  // private inference(myEngine, registries): Promise<void> {\r\n  //   return new Promise(async (resolve, reject) => {\r\n  //     const q = `\r\n  //     CONSTRUCT {\r\n  //      ?s1 <${OWL.sameAs}> ?s2 .\r\n  //      ?s2 <${OWL.sameAs}> ?s1 .\r\n  //     } WHERE {\r\n  //         ?concept1 <${LBD.hasReference}>/<${LBD.hasIdentifier}>/<https://w3id.org/lbdserver#value> ?s1 .\r\n  //         ?concept2 <${LBD.hasReference}>/<${LBD.hasIdentifier}>/<https://w3id.org/lbdserver#value> ?s2 .\r\n  //         ?concept1 <${OWL.sameAs}> ?concept2 .\r\n  //     }`\r\n  //     const quadStream = await myEngine.queryQuads(q, {\r\n  //       sources: registries,\r\n  //       fetch\r\n  //     });\r\n\r\n  //     quadStream.on('data', (res) => {\r\n  //       this.store.addQuad(quad(\r\n  //         namedNode(res.subject.id.replaceAll('\"', '')),\r\n  //         namedNode(res.predicate.value),\r\n  //         namedNode(res.object.id.replaceAll('\"', '')),\r\n  //         defaultGraph()\r\n  //       ))\r\n  //     });\r\n\r\n  //     quadStream.on('end', () => {\r\n  //       resolve()\r\n  //     })\r\n  //   })\r\n  // }\r\n\r\n  // private mutateQuery(query) {\r\n  //   const translation = translate(query);\r\n  //   const { bgp, variables } = this.findLowerLevel(translation, translation.variables)\r\n  //   const usedVariables = new Set()\r\n  //   let aliasNumber = 1\r\n  //   let aliases = {}\r\n  //   for (const pattern of bgp.patterns) {\r\n  //     for (const item of Object.keys(pattern)) {\r\n  //       if (pattern[item].termType === \"Variable\") {\r\n  //         if (usedVariables.has(pattern[item])) {\r\n  //           const newVName = `${pattern[item].value}_alias${aliasNumber}`\r\n  //           if (!aliases[pattern[item].value]) aliases[pattern[item].value] = []\r\n\r\n  //           aliases[pattern[item].value].push(newVName)\r\n  //           aliasNumber += 1\r\n  //           const newV = { termType: \"Variable\", value: newVName }\r\n  //           pattern[item] = newV\r\n  //         }\r\n  //         usedVariables.add(pattern[item])\r\n  //       }\r\n\r\n  //     }\r\n  //   }\r\n  //   Object.keys(aliases).forEach(item => {\r\n  //     aliases[item].forEach(alias => {\r\n  //       const newPattern = quad(\r\n  //         variable(item),\r\n  //         namedNode(\"http://www.w3.org/2002/07/owl#sameAs\"),\r\n  //         variable(alias),\r\n  //         defaultGraph()\r\n  //       )\r\n  //       bgp.patterns.push(newPattern)\r\n  //     })\r\n  //   })\r\n  //   const q: any = { type: \"project\", input: { type: \"bgp\", patterns: bgp.patterns }, variables: Array.from(usedVariables) }\r\n  //   return { query: toSparql(q), variables: Array.from(usedVariables) }\r\n  // }\r\n\r\n\r\n  /////////////////////////////////////////////////////////\r\n  ////////////////////// PREPARATION //////////////////////\r\n  /////////////////////////////////////////////////////////\r\n  /**\r\n   * @description This function checks if the card (webId) contains a lbds:hasProjectRegistry pointer\r\n   * @param webId the webId/card to check\r\n   * @returns boolean - false: the WebID doesn't have a project registry yet / true: a project registry is mentioned in the card\r\n   */\r\n  public async validateWebId(webId?: string) {\r\n    if (!webId) { if (this.session.info.isLoggedIn) { webId = this.session.info.webId } else { throw new Error('No WebID found') } }\r\n\r\n    const lbdLoc = await this.getProjectRegistry(webId);\r\n    if (lbdLoc && lbdLoc.length > 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @description This function retrieves the LBDserver projects from a project aggregator (e.g. a project registry or public aggregator)\r\n   * @param aggregator an LBDS aggregator, aggregating projects with lbds:aggregates\r\n   * @returns Array of LBDserver project access points (URL).\r\n   */\r\n  public async getAllProjects(aggregator: string) {\r\n    let myProjects\r\n\r\n    // shortcut for Pod-based aggregators with aggregation level 1\r\n    if (aggregator.includes(\"/lbd/\")) {\r\n      const data = await this.fetch(aggregator, {\r\n        headers: { Accept: \"application/ld+json\" },\r\n      }).then((t) => t.json());\r\n      myProjects = extract(data, aggregator)[LDP.contains].map(\r\n        (i) => i[\"@id\"]\r\n      );\r\n    } else {\r\n      myProjects = await this.constructTree(aggregator)\r\n\r\n    }\r\n    return myProjects;\r\n  }\r\n\r\n  // construct the resources in the Pod in a recursive way\r\n public async constructTree(\r\n  root: string,\r\n  queryEngine = new QueryEngine(),\r\n  recursiveArray = [],\r\n  alreadyFetched = [],\r\n  notExists = []\r\n) {\r\n  const resources = await this.getLDPContent([root], queryEngine);\r\n  for (const res of resources) {\r\n    recursiveArray.push(res);\r\n    if (res.endsWith(\"/\")) {\r\n      if (!alreadyFetched.includes(res)) {\r\n        const status = await this.fetch(res, {method: \"HEAD\"}).then(i => i.status)\r\n        alreadyFetched.push(res)\r\n        if (status === 200) {\r\n          recursiveArray = await this.constructTree(res, queryEngine, recursiveArray, alreadyFetched, notExists);\r\n        } else {\r\n          notExists.push(res)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const d = recursiveArray.filter(i => !notExists.includes(i))\r\n  return d\r\n}\r\n\r\n// get the content (ldp:contains) of an ldp:Container instance\r\n private async getLDPContent(sources, queryEngine= new QueryEngine()) {\r\n\r\n  const q = `SELECT ?child ?parent WHERE {\r\n      ?parent <${DCAT.dataset}> ?child .\r\n      FILTER (!CONTAINS(str(?child), \"local\"))\r\n    }`;\r\n  const results = await queryEngine\r\n    .queryBindings(q, { sources, fetch })\r\n    .then((b) => b.toArray());\r\n\r\n  return results.map((i) => i.get(\"child\").value);\r\n}\r\n\r\n  /**\r\n   * @description Find the LBDserver project registry of a specific stakeholder by their WebID.\r\n   * @param stakeholder The WebID of the stakeholder from whom the project registry should be retrieved\r\n   * @returns URL of project registry\r\n   */\r\n  public async getProjectRegistry(\r\n    stakeholder?: string,\r\n    queryEngine: QueryEngine = new QueryEngine()\r\n  ): Promise<string | undefined> {\r\n    if (!stakeholder) { if (this.session.info.isLoggedIn) { stakeholder = this.session.info.webId } else { throw new Error('No WebID found') } }\r\n    const q = `select ?loc where {<${stakeholder}> <${LBD.hasProjectRegistry}> ?loc}`;\r\n    const location = await queryEngine\r\n      .queryBindings(q, { sources: [stakeholder], fetch: this.fetch })\r\n      .then((res) => res.toArray())\r\n      .then((bind: any) => bind.map((i) => i.get(\"loc\").value))\r\n      .catch((err: Error) => {\r\n        throw err;\r\n      });\r\n    if (location && location.length > 0) {\r\n      return location[0];\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description This function retrieves the LDP inbox from a particular WebID\r\n   * @param stakeholder The WebID of the stakeholder from whom the LDP inbox should be retrieved\r\n   * @returns The inbox URL\r\n   */\r\n  public async getInbox(stakeholder: string, queryEngine: QueryEngine = new QueryEngine()): Promise<string | undefined> {\r\n    const q = `select ?inbox where {<${stakeholder}> <${LDP.inbox}> ?inbox}`;\r\n    const inbox = await queryEngine\r\n      .queryBindings(q, { sources: [stakeholder], fetch: this.fetch })\r\n      .then((res) => res.toArray())\r\n      .then((bind: any) => bind.map((i) => i.get(\"inbox\").value))\r\n      .catch((err: Error) => {\r\n        throw err;\r\n      });\r\n    if (inbox && inbox.length > 0) {\r\n      return inbox[0];\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  //   public async inviteStakeholder(stakeholder: string, projectId: string) {\r\n  //     const inbox = await this.getInbox(stakeholder);\r\n  //     const id = v4();\r\n  //     const url = inbox + id;\r\n  //     const message = `<>\r\n  //   a <${AS.Announce}> ;\r\n  //   <${AS.actor}> <${this.session.info.webId}> ;\r\n  //   <${AS.object}> <#invite> ;\r\n  //   <${AS.target}> <${stakeholder}> ;\r\n  //   <${AS.updated}> \"${new Date().toISOString()}\"^^${XSD.dateTime} .\r\n\r\n  // <#invite> a ${LBD.ProjectInvite}; \r\n  //   <${FOAF.primaryTopic}> <#project> .\r\n  // <#project> a <${LBD.Project}> ;\r\n  //     <${DCTERMS.identifier} \"${projectId}\" .\r\n  //   `;\r\n\r\n  //   const options = {\r\n  //     method: \"POST\",\r\n  //     body: message,\r\n  //   }\r\n  //     // await this.session.fetch()\r\n  //   }\r\n\r\n  /**\r\n   * @description Create an LBDserver project registry\r\n   * @param url Where the project registry should be created\r\n   * @param publiclyAccessible Access rights for the project registry\r\n   * @returns the URL of the LBDserver Project Registry\r\n   */\r\n  public async createProjectRegistry(\r\n    url: string = undefined,\r\n    publiclyAccessible: boolean = true\r\n  ): Promise<string> {\r\n    try {\r\n      const stakeholder = this.session.info.webId\r\n      if (!url) url = stakeholder.replace(\"/profile/card#me\", \"/lbd/\");\r\n\r\n      const q0 = `INSERT DATA {\r\n          <${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .\r\n        }`;\r\n      await this.dataService.sparqlUpdate(stakeholder, q0);\r\n\r\n      // create the LBD registry (container / Aggregator)\r\n      const q1 = `INSERT DATA {\r\n        <${url}> a <${LBD.Aggregator}> .\r\n      }`;\r\n\r\n      // the updates immediately creates the container\r\n      await this.dataService.sparqlUpdate(url, q1);\r\n\r\n      let accessRights: AccessRights;\r\n      let actor: string | undefined;\r\n      if (publiclyAccessible) {\r\n        accessRights = {\r\n          read: true,\r\n          append: false,\r\n          write: false,\r\n          control: false,\r\n        };\r\n      } else {\r\n        accessRights = { read: true, append: true, write: true, control: true };\r\n        actor = stakeholder;\r\n      }\r\n      await this.accessService.setResourceAccess(\r\n        url,\r\n        accessRights,\r\n        ResourceType.CONTAINER,\r\n        actor\r\n      );\r\n      return url;\r\n    } catch (error) {\r\n      console.log(`error`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description delete a project registry at a particular location\r\n   * @param stakeholder The stakeholder (the authenticated agent)\r\n   * @param url The URL of the project registry\r\n   */\r\n  public async removeProjectRegistry(url: string) {\r\n    try {\r\n      const q0 = `DELETE {<${this.session.info.webId}> <${LBD.hasProjectRegistry}> <${url}> .}\r\n      WHERE {<${this.session.info.webId}> <${LBD.hasProjectRegistry}> ?reg .}`;\r\n      await this.dataService.sparqlUpdate(this.session.info.webId, q0);\r\n      await this.dataService.deleteContainer(url, true);\r\n    } catch (error) {\r\n      console.log(`error`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"}