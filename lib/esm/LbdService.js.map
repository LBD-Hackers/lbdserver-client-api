{"version":3,"sources":["../../src/LbdService.ts"],"names":["namedNode","literal","defaultGraph","quad","variable","DataFactory","LbdService","verbose","constructor","session","fetch","accessService","AccessService","dataService","DataService","store","Store","query","q","sources","registries","asStream","mutateQuery","myEngine","QueryEngine","inference","result","data","resultToString","JSON","parse","findLowerLevel","obj","variables","type","bgp","input","Promise","resolve","reject","OWL","sameAs","LBD","hasReference","hasIdentifier","quadStream","queryQuads","on","res","addQuad","subject","id","replaceAll","predicate","value","object","translation","usedVariables","Set","aliasNumber","aliases","pattern","patterns","item","Object","keys","termType","has","newVName","push","newV","add","forEach","alias","newPattern","Array","from","validateWebId","webId","lbdLoc","getProjectRegistry","length","getAllProjects","aggregator","headers","Accept","then","t","json","myProjects","LDP","contains","map","i","stakeholder","hasProjectRegistry","location","bindings","bind","get","catch","err","undefined","getInbox","inbox","createProjectRegistry","url","publiclyAccessible","info","replace","q0","sparqlUpdate","q1","Aggregator","accessRights","actor","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","error","console","log","removeProjectRegistry","deleteContainer"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\nimport { urlJoin } from \"url-join-ts\";\nimport DataService from \"./helpers/data-service\";\nimport { computeChecksumMd5 } from \"./helpers/utils\";\nimport { newEngine, IQueryResultBindings } from \"@comunica/actor-init-sparql\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  createSolidDataset,\n  buildThing,\n  getSolidDataset,\n  createThing,\n  setThing,\n  setUrl,\n  addUrl,\n  getThingAll,\n  getUrlAll,\n  setDatetime,\n  saveSolidDatasetAt,\n} from \"@inrupt/solid-client\";\nimport { extract, streamToString } from \"./helpers/functions\";\nimport { RDF, SCHEMA_INRUPT, DCAT, OWL, LDP, AS, XSD, FOAF, DCTERMS } from \"@inrupt/vocab-common-rdf\";\nimport LBD from \"./helpers/vocab/lbds\";\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\nimport { translate, toSparql } from 'sparqlalgebrajs'\nimport {Store, DataFactory} from 'n3'\nimport { QueryEngine } from \"@comunica/query-sparql\";\n\nconst { namedNode, literal, defaultGraph, quad, variable } = DataFactory;\n\nexport default class LbdService {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  private session: BrowserSession | NodeSession;\n  private store: Store\n\n\n  /**\n   * \n   * @param session an (authenticated) session\n   * @param verbose optional parameter for logging purposes\n   */\n  constructor(session: BrowserSession | NodeSession, verbose: boolean = false) {\n    this.session = session;\n    this.fetch = session.fetch;\n    this.verbose = verbose;\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.store = new Store()\n  }\n\n    /////////////////////////////////////////////////////////\n  ////////////////////// QUERY ////////////////////////////\n  /////////////////////////////////////////////////////////\n\n  public async query(q: string, { sources, registries, asStream }) {\n    const { query } = this.mutateQuery(q)\n\n    const myEngine = new QueryEngine();\n\n    await this.inference(myEngine, registries)\n    const result = await myEngine.query(query, { sources: [...sources, this.store], fetch })\n    const { data } = await myEngine.resultToString(result,\n      'application/sparql-results+json');\n    if (asStream) {\n      return data\n    } else {\n      return JSON.parse(await streamToString(data))\n    }\n  }\n\n  private findLowerLevel(obj, variables) {\n    if (!variables) variables = obj.variables\n    if (obj.type === \"bgp\") {\n      return { bgp: obj, variables }\n    } else {\n      return this.findLowerLevel(obj.input, variables)\n    }\n  }\n\n  private inference(myEngine, registries): Promise<void> {\n    return new Promise(async (resolve, reject) => {\n      const q = `\n      CONSTRUCT {\n       ?s1 <${OWL.sameAs}> ?s2 .\n       ?s2 <${OWL.sameAs}> ?s1 .\n      } WHERE {\n          ?concept1 <${LBD.hasReference}>/<${LBD.hasIdentifier}>/<http://schema.org/value> ?s1 .\n          ?concept2 <${LBD.hasReference}>/<${LBD.hasIdentifier}>/<http://schema.org/value> ?s2 .\n          ?concept1 <${OWL.sameAs}> ?concept2 .\n      }`\n      const quadStream = await myEngine.queryQuads(q, {\n        sources: registries,\n        fetch\n      });\n\n      quadStream.on('data', (res) => {\n        this.store.addQuad(quad(\n          namedNode(res.subject.id.replaceAll('\"', '')),\n          namedNode(res.predicate.value),\n          namedNode(res.object.id.replaceAll('\"', '')),\n          defaultGraph()\n        ))\n      });\n\n      quadStream.on('end', () => {\n        resolve()\n      })\n    })\n  }\n\n  private mutateQuery(query) {\n    const translation = translate(query);\n    const { bgp, variables } = this.findLowerLevel(translation, translation.variables)\n    const usedVariables = new Set()\n    let aliasNumber = 1\n    let aliases = {}\n    for (const pattern of bgp.patterns) {\n      for (const item of Object.keys(pattern)) {\n        if (pattern[item].termType === \"Variable\") {\n          if (usedVariables.has(pattern[item])) {\n            const newVName = `${pattern[item].value}_alias${aliasNumber}`\n            if (!aliases[pattern[item].value]) aliases[pattern[item].value] = []\n\n            aliases[pattern[item].value].push(newVName)\n            aliasNumber += 1\n            const newV = { termType: \"Variable\", value: newVName }\n            pattern[item] = newV\n          }\n          usedVariables.add(pattern[item])\n        }\n\n      }\n    }\n    Object.keys(aliases).forEach(item => {\n      aliases[item].forEach(alias => {\n        const newPattern = quad(\n          variable(item),\n          namedNode(\"http://www.w3.org/2002/07/owl#sameAs\"),\n          variable(alias),\n          defaultGraph()\n        )\n        bgp.patterns.push(newPattern)\n      })\n    })\n    const q: any = { type: \"project\", input: { type: \"bgp\", patterns: bgp.patterns }, variables: Array.from(usedVariables) }\n    return { query: toSparql(q), variables: Array.from(usedVariables) }\n  }\n\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// PREPARATION //////////////////////\n  /////////////////////////////////////////////////////////\n  /**\n   * @description This function checks if the card (webId) contains a lbds:hasProjectRegistry pointer\n   * @param webId the webId/card to check\n   * @returns boolean - false: the WebID doesn't have a project registry yet / true: a project registry is mentioned in the card\n   */\n  public async validateWebId(webId: string) {\n    const lbdLoc = await this.getProjectRegistry(webId);\n    if (lbdLoc && lbdLoc.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @description This function retrieves the LBDserver projects from a project aggregator (e.g. a project registry or public aggregator)\n   * @param aggregator an LBDS aggregator, aggregating projects with lbds:aggregates\n   * @returns Array of LBDserver project access points (URL).\n   */\n  public async getAllProjects(aggregator) {\n    const data = await this.fetch(aggregator, {\n      headers: { Accept: \"application/ld+json\" },\n    }).then((t) => t.json());\n    const myProjects = extract(data, aggregator)[LDP.contains].map(\n      (i) => i[\"@id\"]\n    );\n    return myProjects;\n  }\n\n  /**\n   * @description Find the LBDserver project registry of a specific stakeholder by their WebID.\n   * @param stakeholder The WebID of the stakeholder from whom the project registry should be retrieved\n   * @returns URL of project registry\n   */\n  public async getProjectRegistry(\n    stakeholder: string\n  ): Promise<string | undefined> {\n    const myEngine = newEngine();\n    const q = `select ?loc where {<${stakeholder}> <${LBD.hasProjectRegistry}> ?loc}`;\n    const location = await myEngine\n      .query(q, { sources: [stakeholder], fetch: this.fetch })\n      .then((res: IQueryResultBindings) => res.bindings())\n      .then((bind: any) => bind.map((i) => i.get(\"?loc\").value))\n      .catch((err: Error) => {\n        throw err;\n      });\n    if (location && location.length > 0) {\n      return location[0];\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @description This function retrieves the LDP inbox from a particular WebID\n   * @param stakeholder The WebID of the stakeholder from whom the LDP inbox should be retrieved\n   * @returns The inbox URL\n   */\n  public async getInbox(stakeholder: string): Promise<string | undefined> {\n    const myEngine = newEngine();\n    const q = `select ?inbox where {<${stakeholder}> <${LDP.inbox}> ?inbox}`;\n    const inbox = await myEngine\n      .query(q, { sources: [stakeholder], fetch: this.fetch })\n      .then((res: IQueryResultBindings) => res.bindings())\n      .then((bind: any) => bind.map((i) => i.get(\"?inbox\").value))\n      .catch((err: Error) => {\n        throw err;\n      });\n    if (inbox && inbox.length > 0) {\n      return inbox[0];\n    } else {\n      return undefined;\n    }\n  }\n\n//   public async inviteStakeholder(stakeholder: string, projectId: string) {\n//     const inbox = await this.getInbox(stakeholder);\n//     const id = v4();\n//     const url = inbox + id;\n//     const message = `<>\n//   a <${AS.Announce}> ;\n//   <${AS.actor}> <${this.session.info.webId}> ;\n//   <${AS.object}> <#invite> ;\n//   <${AS.target}> <${stakeholder}> ;\n//   <${AS.updated}> \"${new Date().toISOString()}\"^^${XSD.dateTime} .\n\n// <#invite> a ${LBD.ProjectInvite}; \n//   <${FOAF.primaryTopic}> <#project> .\n// <#project> a <${LBD.Project}> ;\n//     <${DCTERMS.identifier} \"${projectId}\" .\n//   `;\n\n//   const options = {\n//     method: \"POST\",\n//     body: message,\n//   }\n//     // await this.session.fetch()\n//   }\n\n  /**\n   * @description Create an LBDserver project registry\n   * @param url Where the project registry should be created\n   * @param publiclyAccessible Access rights for the project registry\n   * @returns the URL of the LBDserver Project Registry\n   */\n  public async createProjectRegistry(\n    url: string = undefined,\n    publiclyAccessible: boolean = true\n  ): Promise<string> {\n    try {\n      const stakeholder = this.session.info.webId\n      if (!url) url = stakeholder.replace(\"/profile/card#me\", \"/lbd/\");\n      \n      const q0 = `INSERT DATA {\n          <${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .\n        }`;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n\n      // create the LBD registry (container / Aggregator)\n      const q1 = `INSERT DATA {\n        <${url}> a <${LBD.Aggregator}> .\n      }`;\n\n      // the updates immediately creates the container\n      await this.dataService.sparqlUpdate(url, q1);\n\n      let accessRights: AccessRights;\n      let actor: string | undefined;\n      if (publiclyAccessible) {\n        accessRights = {\n          read: true,\n          append: false,\n          write: false,\n          control: false,\n        };\n      } else {\n        accessRights = { read: true, append: true, write: true, control: true };\n        actor = stakeholder;\n      }\n      await this.accessService.setResourceAccess(\n        url,\n        accessRights,\n        ResourceType.CONTAINER,\n        actor\n      );\n      return url;\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * @description delete a project registry at a particular location\n   * @param stakeholder The stakeholder (the authenticated agent)\n   * @param url The URL of the project registry\n   */\n  public async removeProjectRegistry(url: string) {\n    try {\n      const q0 = `DELETE {<${this.session.info.webId}> <${LBD.hasProjectRegistry}> <${url}> .}\n      WHERE {<${this.session.info.webId}> <${LBD.hasProjectRegistry}> ?reg .}`;\n      await this.dataService.sparqlUpdate(this.session.info.webId, q0);\n      await this.dataService.deleteContainer(url, true);\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n}\n"],"file":"LbdService.js"}