{"version":3,"file":"LbdAggregator.js","names":["LbdAggregator","constructor","session","url","endsWith","fetch","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LbdService","checkExistence","status","method","then","result","init","data","localPartialProject","headers","Accept","i","json","create","existingPartialProjects","options","makePublic","local","push","createContainer","aclDefault","ACL","default","Authorization","agentClass","FOAF","Agent","sparqlUpdate","createRegistryContainer","LBDS","hasDatasetRegistry","referenceContainerUrl","hasReferenceRegistry","hasServiceRegistry","part","addPartialProject","q","DCTERMS","creator","info","webId","DCAT","Catalog","PartialProject","dcatQ","Project","dataset","Object","keys","q0","key","referenceMeta","LbdDataset","addDistribution","Buffer","from","addSatellite","satelliteURL","conformsTo","standard","startsWith","toLowerCase","Error","serviceId","service","endpointURL","error","console","log","getSatellites","queryEngine","partialProjects","QueryEngine","queryBindings","sources","r","toArray","forEach","get","value","addStakeholder","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","delete","deleteContainer","findAllPartialProjects","res","findPartialProject","repo","getProjectRegistry","partialProjectOfStakeholder","addPartialProjectByStakeholder","partialProjectUrl","containerName","property","containerUrl","type","replace","Dataset","addDataset","id","subject","datasetRegistry","datasetUrl","theDataset","deleteDataset","ds","deleteDatasetById","datasetId","getAllDatasetUrls","partials","p","dsReg","query","LDP","contains","results","resultToString","invalidateCache","invalidateHttpCache","asStream","parsed","bindings","map","addConcept","referenceRegistry","ref","LbdConcept","getReferenceRegistry","getDatasetRegistry","getAllReferenceRegistries","registries","partial","reg","deleteConcept","parts","pop","join","getConceptByIdentifier","identifier","distribution","myEngine","satellites","hasReference","inDataset","hasIdentifier","inDistribution","raw","theConcept","getConcept","undefined","conceptRegistry","concept","aliases","references","q_alias","OWL","sameAs","Set","add","bindingsStream0","b","Array","alias","q1","Concept","bindingsStream","getConceptsByIdentifier","identifiers","q3","substring","sparqlSources","nonSparqlSources","source","myHeaders","Headers","urlencoded","URLSearchParams","body","redirect","d","aliasQuery","allConcepts","item","myRes","registry","c","dist","directQuery","newOptions","onlySparqlEndpoints","queryAll"],"sources":["../../src/LbdAggregator.ts"],"sourcesContent":["import AccessService from \"./helpers/access-service\";\r\nimport DataService from \"./helpers/data-service\";\r\nimport { LbdConcept } from \"./LbdConcept\";\r\nimport { LbdDataset } from \"./LbdDataset\";\r\nimport LBDS from \"./helpers/vocab/lbds\";\r\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\r\nimport { LbdService } from \"./LbdService\";\r\nimport { extract, query } from \"./helpers/functions\";\r\nimport { v4 } from \"uuid\";\r\nimport { ACL, DCAT, DCTERMS, FOAF, OWL } from \"@inrupt/vocab-common-rdf\";\r\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\r\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\r\nimport { LDP } from \"@inrupt/vocab-common-rdf\";\r\nimport { getQueryResult, parseStream } from \"./helpers/utils\";\r\nimport { QueryEngine } from \"@comunica/query-sparql\";\r\n\r\nexport class LbdAggregator {\r\n  public fetch;\r\n  public accessService: AccessService;\r\n  public dataService: DataService;\r\n  public lbdService: LbdService;\r\n  public projectId: string;\r\n  public url: string;\r\n  public data: object[];\r\n  public partialProjects: string[];\r\n  public session: any;\r\n  public localPartialProject: string;\r\n  public localAccessPoint: string\r\n\r\n  /**\r\n   * \r\n   * @param session an (authenticated) Solid session\r\n   * @param url The main url of the project. This is an aggregator containing the different partial projects of the LBDserver instance\r\n   */\r\n  constructor(\r\n    session: any,\r\n    url: string\r\n  ) {\r\n    if (!url.endsWith(\"/\")) url += \"/\";\r\n    this.session = session;\r\n    this.fetch = session.fetch;\r\n    this.url = url;\r\n    this.projectId = url.split(\"/\")[url.split(\"/\").length - 2];\r\n    this.accessService = new AccessService(session.fetch);\r\n    this.dataService = new DataService(session.fetch);\r\n    this.lbdService = new LbdService(session);\r\n  }\r\n\r\n  /**\r\n   * @description Checks whether a project with this access point already exists\r\n   * @returns Boolean: true = the project exists / false = the project doesn't exist\r\n   */\r\n  public async checkExistence() {\r\n    const status = await this.fetch(this.url, { method: \"HEAD\" }).then(\r\n      (result) => result.status\r\n    );\r\n    if (status === 200) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /** \r\n   * @description Initialize the project in your application. In short, this adds project metadata to your LbdProject instance\r\n   */\r\n  public async init() {\r\n    const data = await this.fetch(this.localPartialProject, {\r\n      headers: { Accept: \"application/ld+json\" },\r\n    }).then((i) => i.json());\r\n    this.data = data;\r\n    return data;\r\n  }\r\n\r\n\r\n  /**\r\n   * @description Create an LBDserver project on your Pod\r\n   * @param existingPartialProjects optional: if the project is already initialized on other stakeholder pods. Adds the existing partial projects to the Pod-specific access point\r\n   * @param options Metadata for the project. To be in format {[predicate]: value}\r\n   * @param makePublic access rights: true = public; false = only the creator\r\n   */\r\n  public async create(\r\n    existingPartialProjects: string[] = [],\r\n    options: object = {},\r\n    makePublic: boolean = false\r\n  ) {\r\n    const local = this.url + \"local/\";\r\n    existingPartialProjects.push(local);\r\n\r\n    // create global access point\r\n    await this.dataService.createContainer(this.url, makePublic);\r\n    await this.dataService.createContainer(local, makePublic);\r\n\r\n    if (makePublic) {\r\n      let aclDefault = `INSERT {?rule <${ACL.default}> <${local}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`;\r\n      await this.dataService.sparqlUpdate(local + \".acl\", aclDefault);\r\n    }\r\n\r\n    // create different registries\r\n    await this.createRegistryContainer(\r\n      \"datasets/\",\r\n      makePublic,\r\n      LBDS.hasDatasetRegistry\r\n    );\r\n    const referenceContainerUrl = await this.createRegistryContainer(\r\n      \"references/\",\r\n      makePublic,\r\n      LBDS.hasReferenceRegistry\r\n    );\r\n    await this.createRegistryContainer(\r\n      \"services/\",\r\n      makePublic,\r\n      LBDS.hasServiceRegistry\r\n    );\r\n\r\n    for (const part of existingPartialProjects) {\r\n      await this.addPartialProject(part);\r\n    }\r\n\r\n    let q = `INSERT DATA {<${this.url}> <${DCTERMS.creator}> \"${this.session.info.webId}\"; a <${DCAT.Catalog}>, <${LBDS.PartialProject}> .}`;\r\n\r\n    let dcatQ = `INSERT DATA {<${this.url}> <${DCTERMS.creator}> \"${this.session.info.webId}\" ;\r\n    a <${DCAT.Catalog}>, <${LBDS.Project}> ;\r\n    <${DCAT.dataset}> <${local}> .  \r\n  }`;\r\n\r\n    await this.dataService.sparqlUpdate(local, q);\r\n    await this.dataService.sparqlUpdate(this.url, dcatQ);\r\n\r\n    // create optional metadata (e.g. label etc.)\r\n    if (Object.keys(options).length > 0) {\r\n      let q0 = `INSERT DATA { `;\r\n      for (const key of Object.keys(options)) {\r\n        q0 += `<${this.url}> <${key}> \"${options[key]}\" .`;\r\n      }\r\n      q0 += \"}\";\r\n      await this.dataService.sparqlUpdate(this.url, q0);\r\n    }\r\n\r\n    const referenceMeta = new LbdDataset(this.session, referenceContainerUrl);\r\n    await referenceMeta.create();\r\n    await referenceMeta.addDistribution(\r\n      Buffer.from(\"\"),\r\n      \"text/turtle\",\r\n      {},\r\n      \"data\",\r\n      makePublic\r\n    );\r\n    await this.init();\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param satelliteURL The url (endpoint) of the satellite\r\n   * @param conformsTo The standard to which the query part of the satellite conforms\r\n   * @returns \r\n   */\r\n  public async addSatellite(satelliteURL: string, conformsTo: string) {\r\n    try {\r\n      let standard\r\n      if (!satelliteURL.endsWith(\"/\")) satelliteURL += \"/\"\r\n      if (conformsTo.startsWith(\"http\")) standard = conformsTo\r\n      else {\r\n        switch (conformsTo.toLowerCase()) {\r\n          case \"sparql\":\r\n            standard = \"https://www.w3.org/TR/sparql11-query/\";\r\n            break;\r\n          default:\r\n            throw new Error('Could not determine standard')\r\n        }\r\n      }\r\n\r\n      const serviceId = v4()\r\n      const q = `INSERT DATA {\r\n        <${this.localPartialProject}> <${DCAT.service}> <#${serviceId}> .\r\n        <#${serviceId}> a <${DCAT.DataService}> ;\r\n          <${DCAT.endpointURL}> <${satelliteURL}> ;\r\n          <${DCTERMS.conformsTo}> <${standard}> .\r\n      }`\r\n\r\n      await this.dataService.sparqlUpdate(this.localPartialProject, q)\r\n      return satelliteURL\r\n    } catch (error) {\r\n      console.log('error', error)\r\n      throw error\r\n    }\r\n\r\n  }\r\n\r\n\r\n  public async getSatellites(conformsTo: string, options?: { queryEngine?: QueryEngine, partialProjects?: string[] }) {\r\n    try {\r\n\r\n      let queryEngine, partialProjects, standard\r\n\r\n      (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine();\r\n      (options && options.partialProjects) ? partialProjects = options.partialProjects : partialProjects = [this.localPartialProject];\r\n\r\n      if (conformsTo.startsWith(\"http\")) standard = conformsTo\r\n      else {\r\n        switch (conformsTo) {\r\n          case \"sparql\":\r\n            standard = \"https://www.w3.org/TR/sparql11-query/\";\r\n            break;\r\n          default:\r\n            throw new Error('Could not determine standard')\r\n        }\r\n      }\r\n\r\n      const q = `select ?project ?url where {\r\n      ?project <${DCAT.service}> ?sat .\r\n      ?sat a <${DCAT.DataService}> ;\r\n        <${DCAT.endpointURL}> ?url ;\r\n        <${DCTERMS.conformsTo}> <${standard}> .\r\n    }`\r\n\r\n      const result = await queryEngine.queryBindings(q, { sources: partialProjects, fetch: this.fetch }).then(r => r.toArray())\r\n      if (result) {\r\n        const r = {}\r\n        result.forEach(i => { r[i.get('project').value] = i.get('url').value })\r\n        return r\r\n      } else {\r\n        return\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log('error', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description Add a partial project to a Pod-specific access point\r\n   * @param part Partial project to add to a Pod-specific access point\r\n   */\r\n  public async addPartialProject(part: string) {\r\n    const q0 = `INSERT DATA {\r\n        <${this.url}> <${DCAT.dataset}> <${part}> .\r\n        }`;\r\n    await this.dataService.sparqlUpdate(this.url, q0);\r\n  }\r\n\r\n  /**\r\n   * @description Add a stakeholder to an LBDserver project\r\n   * @param webId The WebID/card of the stakeholder\r\n   * @param accessRights the access rights this stakeholder should have.\r\n   */\r\n  public async addStakeholder(\r\n    webId: string,\r\n    accessRights: AccessRights = {\r\n      read: true,\r\n      append: false,\r\n      write: false,\r\n      control: false,\r\n    }\r\n  ) {\r\n    await this.accessService.setResourceAccess(\r\n      this.url,\r\n      accessRights,\r\n      ResourceType.CONTAINER,\r\n      webId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @description delete an LBDserver project (locally)\r\n   */\r\n  public async delete() {\r\n    await this.dataService.deleteContainer(this.url, true);\r\n  }\r\n\r\n  /**\r\n   * @description find all the partial projects from the indicated project access point\r\n   */\r\n  public async findAllPartialProjects(queryEngine: QueryEngine = new QueryEngine()) {\r\n    const res: any = await getQueryResult(\r\n      this.url,\r\n      DCAT.dataset,\r\n      this.fetch,\r\n      false,\r\n      queryEngine\r\n    );\r\n    return res\r\n  }\r\n\r\n  /**\r\n   * @description Find the partial project provided by this stakeholder\r\n   * @param webId The webID of the stakeholder whom's partial project you want to find\r\n   * @returns The URL of the partial project\r\n   */\r\n  public async findPartialProject(webId: string, queryEngine = new QueryEngine()) {\r\n    const repo = await this.lbdService.getProjectRegistry(webId, queryEngine);\r\n    // console.log('repo', repo)\r\n    const partialProjectOfStakeholder = repo + this.projectId + \"/local/\";\r\n    return partialProjectOfStakeholder\r\n    // console.log('partialProjectOfStakeholder', partialProjectOfStakeholder)\r\n    // const status = await this.fetch(partialProjectOfStakeholder, {\r\n    //   method: \"HEAD\",\r\n    // }).then((res) => res.status);\r\n    // if (status === 200) {\r\n    //   return partialProjectOfStakeholder;\r\n    // } else {\r\n    //   throw new Error(\r\n    //     `UNAUTHORIZED: This repository does not exist or you don't have the required access rights`\r\n    //   );\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * @description Add this stakeholder's partial project corresponding with this project (same GUID)\r\n   * @param webId The webID of the stakeholder whom's partial project you want to add\r\n   * @returns the URL of the partial project\r\n   */\r\n  public async addPartialProjectByStakeholder(webId: string) {\r\n    const partialProjectUrl = await this.findPartialProject(webId);\r\n    await this.addPartialProject(partialProjectUrl);\r\n    return partialProjectUrl;\r\n  }\r\n\r\n  private async createRegistryContainer(containerName, makePublic, property) {\r\n    if (!containerName.endsWith(\"/\")) containerName += \"/\";\r\n\r\n    const containerUrl = this.localPartialProject + containerName;\r\n    await this.dataService.createContainer(containerUrl, makePublic);\r\n\r\n    const type = property.replace(\"#has\", \"#\")\r\n    const q = `INSERT DATA {\r\n      <${containerUrl}> a <${DCAT.Catalog}> , <${DCAT.Dataset}> , <${type}> .\r\n    }`\r\n\r\n    await this.dataService.sparqlUpdate(containerUrl, q);\r\n\r\n    const q0 = `INSERT DATA {\r\n        <${this.localPartialProject}> <${property}> <${containerUrl}> ;\r\n          <${DCAT.dataset}> <${containerUrl}>.\r\n      }`;\r\n    await this.dataService.sparqlUpdate(this.localPartialProject, q0);\r\n    return containerUrl;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  /////////////////////// DATASETS ////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description Add a dataset to the project\r\n   * @param makePublic initial access rights for the dataset\r\n   * @param id optional id for the dataset - a GUID is created by default\r\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\r\n   * @returns\r\n   */\r\n  public async addDataset(\r\n    options: object = {},\r\n    makePublic: boolean = false,\r\n    id: string = v4()\r\n  ): Promise<LbdDataset> {\r\n    const subject = extract(this.data, this.localPartialProject);\r\n    const datasetRegistry = subject[LBDS.hasDatasetRegistry][0][\"@id\"];\r\n    const datasetUrl = datasetRegistry + id + \"/\";\r\n    const theDataset = new LbdDataset(this.session, datasetUrl);\r\n    await theDataset.create(options, makePublic);\r\n    return theDataset;\r\n  }\r\n\r\n  /**\r\n   * @description Delete a dataset by URL\r\n   * @param datasetUrl The URL of the dataset \r\n   */\r\n  public async deleteDataset(datasetUrl: string) {\r\n    if (!datasetUrl.endsWith(\"/\")) datasetUrl += \"/\";\r\n    const ds = new LbdDataset(this.session, datasetUrl);\r\n    await ds.delete();\r\n  }\r\n\r\n  /**\r\n   * @description delete a dataset by its ID\r\n   * @param datasetId The GUID of the dataset to be deleted\r\n   */\r\n  public async deleteDatasetById(datasetId: string) {\r\n    const subject = extract(this.data, this.localPartialProject);\r\n    const datasetRegistry = subject[LBDS.hasDatasetRegistry][0][\"@id\"];\r\n    const datasetUrl = datasetRegistry + datasetId + \"/\";\r\n    const ds = new LbdDataset(this.session, datasetUrl);\r\n    await ds.delete();\r\n  }\r\n\r\n  /**\r\n   * @description Get all datasets within this project\r\n   * @param options {query: query to override, asStream: consume the results as a stream, local: query only the local project}\r\n   * @returns \r\n   */\r\n  public async getAllDatasetUrls(options?: {\r\n    query?: string;\r\n    asStream?: boolean;\r\n    local?: boolean;\r\n    queryEngine?: QueryEngine\r\n    invalidateCache?: boolean\r\n  }) {\r\n    let queryEngine\r\n    (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine()\r\n    const subject = extract(this.data, this.localPartialProject);\r\n    const sources = [];\r\n    if (options && options.local) {\r\n      sources.push(subject[LBDS.hasDatasetRegistry][0][\"@id\"]);\r\n    } else {\r\n      const partials = await this.findAllPartialProjects();\r\n      for (const p of partials) {\r\n        const dsReg = await getQueryResult(\r\n          p,\r\n          LBDS.hasDatasetRegistry,\r\n          this.fetch,\r\n          true,\r\n          queryEngine\r\n        );\r\n        sources.push(dsReg);\r\n      }\r\n    }\r\n    let q;\r\n    if (!options || !options.query) {\r\n      q = `SELECT ?dataset WHERE {?registry <${LDP.contains}> ?dataset}`;\r\n    } else {\r\n      q = options.query;\r\n    }\r\n\r\n    const results = await queryEngine.query(q, { sources, fetch: this.fetch });\r\n    const { data } = await queryEngine.resultToString(\r\n      results,\r\n      \"application/sparql-results+json\"\r\n    );\r\n    if (options && options.invalidateCache) {\r\n      queryEngine.invalidateHttpCache()\r\n    }\r\n    if (options && options.asStream) {\r\n      return data;\r\n    } else {\r\n      const parsed = await parseStream(data);\r\n      return parsed[\"results\"].bindings.map((i) => i[\"dataset\"].value);\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  ////////////////////// REFERENCES////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description Add a concept to the local project registry\r\n   * @returns an LBDconcept Instance\r\n   */\r\n  public async addConcept(id?): Promise<LbdConcept> {\r\n    const subject = extract(this.data, this.localPartialProject);\r\n    const referenceRegistry = subject[LBDS.hasReferenceRegistry][0][\"@id\"];\r\n    const ref = new LbdConcept(this.session, referenceRegistry);\r\n    await ref.create(id);\r\n    return ref;\r\n  }\r\n\r\n  public getReferenceRegistry() {\r\n    const subject = extract(this.data, this.localPartialProject);\r\n    return subject[LBDS.hasReferenceRegistry][0][\"@id\"];\r\n  }\r\n\r\n  public getDatasetRegistry() {\r\n    const subject = extract(this.data, this.localPartialProject);\r\n    return subject[LBDS.hasDatasetRegistry][0][\"@id\"];\r\n  }\r\n\r\n  public async getAllReferenceRegistries(queryEngine: QueryEngine = new QueryEngine()) {\r\n    const partials = await this.findAllPartialProjects(queryEngine)\r\n    const registries = []\r\n\r\n    for (const partial of partials) {\r\n      const reg = await getQueryResult(partial, LBDS.hasReferenceRegistry, this.fetch, true, queryEngine)\r\n      registries.push(reg + \"data\")\r\n    }\r\n\r\n    return registries\r\n  }\r\n\r\n  /**\r\n   * @description delete a concept by ID\r\n   * @param url the URL of the concept to be deleted\r\n   */\r\n  public async deleteConcept(url: string) {\r\n    const parts = url.split(\"/\");\r\n    const id = parts.pop();\r\n    const referenceRegistry = parts.join(\"/\");\r\n    const ref = new LbdConcept(this.session, referenceRegistry);\r\n    await ref.delete();\r\n  }\r\n\r\n  /**\r\n   * @description Find the main concept by one of its representations: an identifier and a dataset\r\n   * @param identifier the Identifier of the representation\r\n   * @param dataset the dataset where the representation resides\r\n   * @param distribution (optional) the distribution of the representation\r\n   * @returns \r\n   */\r\n  public async getConceptByIdentifier(\r\n    identifier: string,\r\n    dataset: string,\r\n    distribution?: string,\r\n    options?: { queryEngine?: QueryEngine, invalidateCache?: boolean }\r\n  ) {\r\n    let myEngine\r\n    if (options && options.queryEngine) {\r\n      myEngine = options.queryEngine\r\n    } else {\r\n      myEngine = new QueryEngine()\r\n    }\r\n\r\n    // find all the reference registries of the aggregated partial projects\r\n    const partials = await this.findAllPartialProjects();\r\n    // const satellites = await this.getSatellites('sparql', {queryEngine: myEngine, partialProjects: partials})\r\n    // let sources = Object.keys(satellites).map(key => satellites[key]);\r\n    let sources = []\r\n\r\n    const satellites = await this.getSatellites(\"sparql\", {queryEngine: myEngine, partialProjects: partials})\r\n    for (const p of partials) {\r\n      // if (!Object.keys(satellites).includes(p)) {\r\n      const referenceRegistry = await getQueryResult(\r\n        p,\r\n        LBDS.hasReferenceRegistry,\r\n        this.fetch,\r\n        true\r\n      );\r\n\r\n      sources.push(referenceRegistry + \"data\")\r\n      // }\r\n    }\r\n\r\n    let id\r\n    if (identifier.startsWith(\"http\")) id = `<${identifier}>`\r\n    else id = `\"${identifier}\"`\r\n    const q = `SELECT ?concept ?dist WHERE {\r\n      ?concept <${LBDS.hasReference}> ?ref .\r\n      ?ref <${LBDS.inDataset}> <${dataset}> ;\r\n        <${LBDS.hasIdentifier}> ?idUrl .\r\n      ?idUrl <${LBDS.inDistribution}> ?dist ;\r\n      <${LBDS.value}> ${id} .\r\n  } LIMIT 1`;\r\n\r\n\r\n    const results = await myEngine.queryBindings(q, { sources, fetch: this.fetch })\r\n      .then(r => r.toArray())\r\n    if (options && options.invalidateCache) {\r\n      myEngine.invalidateHttpCache()\r\n    }\r\n    if (results.length > 0) {\r\n      const raw = results[0].get('concept').value\r\n      let invalidateCache\r\n      if (options && options.invalidateCache) invalidateCache = options.invalidateCache\r\n      const theConcept = await this.getConcept(raw, { queryEngine: myEngine, invalidateCache, sources })\r\n      return theConcept\r\n    } else {\r\n      return undefined\r\n    }\r\n\r\n\r\n    //     const aliases = {}\r\n    //     asJson[\"results\"].bindings.forEach(item => {\r\n    //       const alias = item[\"alias\"].value\r\n    //       const distribution = item[\"dist\"].value\r\n    //       const dataset = item[\"dataset\"].value\r\n    //       const identifier = item[\"identifier\"].value\r\n\r\n    //       if (!Object.keys(aliases).includes(alias)) {\r\n    //         aliases[alias] = []\r\n    //       }\r\n    // -    })\r\n  }\r\n\r\n  public async getConcept(\r\n    url: string,\r\n    options?: { queryEngine?: QueryEngine, invalidateCache?: boolean, sources?: string[] }\r\n  ) {\r\n    let myEngine, sources\r\n    if (options && options.queryEngine) {\r\n      myEngine = options.queryEngine\r\n    } else {\r\n      myEngine = new QueryEngine()\r\n    }\r\n    const conceptRegistry = url.split('#')[0] + ''\r\n\r\n    if (options && options.sources) { sources = options.sources } else { sources = [conceptRegistry] }\r\n\r\n    const concept = {\r\n      aliases: [],\r\n      references: []\r\n    }\r\n\r\n    // find all the aliases\r\n    const q_alias = `SELECT ?alias\r\n    WHERE {\r\n      <${url}> <${OWL.sameAs}> ?alias\r\n    }`\r\n\r\n    const aliases = new Set<string>()\r\n    aliases.add(url)\r\n\r\n    const bindingsStream0 = await myEngine.queryBindings(q_alias, { sources, fetch: this.fetch })\r\n    await bindingsStream0.toArray().then(res => res.forEach(b => {\r\n      aliases.add(b.get('alias').value)\r\n    }))\r\n\r\n    concept.aliases = Array.from(aliases)\r\n\r\n    for (const alias of concept.aliases) {\r\n      const reg = alias.split('#')[0]\r\n      const q1 = `SELECT ?dataset ?distribution ?id\r\n      WHERE {\r\n        <${alias}> a <${LBDS.Concept}> ;\r\n        <${LBDS.hasReference}> ?ref .\r\n        ?ref <${LBDS.hasIdentifier}> ?identifier ;\r\n           <${LBDS.inDataset}> ?dataset .\r\n        ?identifier <${LBDS.inDistribution}> ?distribution ;\r\n            <https://w3id.org/lbdserver#value> ?id .  \r\n      }`\r\n\r\n      if (options && options.sources) { sources = options.sources } else { sources = [reg] }\r\n\r\n      const bindingsStream = await myEngine.queryBindings(q1, { sources: sources, fetch: this.fetch })\r\n      await bindingsStream.toArray().then(res => res.forEach(b => {\r\n\r\n        concept.references.push({\r\n          dataset: b.get(\"dataset\").value,\r\n          distribution: b.get(\"distribution\").value,\r\n          identifier: b.get(\"id\").value\r\n        })\r\n      }))\r\n    }\r\n\r\n    const theConcept = new LbdConcept(this.session, conceptRegistry)\r\n    theConcept.init(concept)\r\n    if (options && options.invalidateCache) myEngine.invalidateHttpCache()\r\n    return theConcept\r\n  }\r\n\r\n  public async getConceptsByIdentifier(identifiers: { identifier: string, dataset: string, distribution: string }[], sources, options?: { queryEngine?: QueryEngine }) {\r\n    let queryEngine\r\n    if (options && options.queryEngine) {\r\n      queryEngine = options.queryEngine\r\n    } else {\r\n      queryEngine = new QueryEngine()\r\n    }\r\n\r\n    let q3 = `SELECT ?concept ?ds ?dist ?identifier ?alias WHERE {\r\n      ?concept <${LBDS.hasReference}> ?ref1 .\r\n      ?ref1 <${LBDS.inDataset}> ?ds ;\r\n      <${LBDS.hasIdentifier}> ?d1 .\r\n      ?d1 <${LBDS.value}> ?identifier ;\r\n      <${LBDS.inDistribution}> ?dist .\r\n  \r\n      OPTIONAL {?concept <${OWL.sameAs}> ?alias}            \r\n      `\r\n\r\n    identifiers.forEach(b => {\r\n      let identifier\r\n      if (b.identifier.startsWith(\"http\")) {\r\n        identifier = `<${b.identifier}>`\r\n      } else {\r\n        identifier = `\"${b.identifier}\"`\r\n      }\r\n      q3 += `{{\r\n            ?concept <${LBDS.hasReference}> ?ref .\r\n            ?ref <${LBDS.inDataset}> <${b.dataset}> ;\r\n            <${LBDS.hasIdentifier}> ?d .\r\n            ?d <${LBDS.value}> ${identifier} ;\r\n            <${LBDS.inDistribution}> <${b.distribution}> .\r\n\r\n      } UNION {\r\n        ?concept <http://www.w3.org/2002/07/owl#sameAs> ?alias .\r\n        ?alias <${LBDS.hasReference}> ?ref1 .\r\n        ?ref1 <${LBDS.inDataset}> ?ds ;\r\n        <${LBDS.hasIdentifier}> ?d1 .\r\n        ?d1 <${LBDS.value}> ?identifier ;\r\n        <${LBDS.inDistribution}> ?dist .\r\n      }\r\n            } UNION `;\r\n    })\r\n    q3 = q3.substring(0, q3.length - 6)\r\n    q3 += `}`\r\n\r\n\r\n    const sparqlSources = []\r\n    const nonSparqlSources = []\r\n    for (const source of sources) {\r\n      if (typeof source == \"object\" && source.type == \"sparql\") {\r\n        sparqlSources.push(source)\r\n      } else {\r\n        nonSparqlSources.push(source)\r\n      }\r\n    }\r\n\r\n    const aliases = {}\r\n    // const concepts = []\r\n    const results = {}\r\n    for (const source of sparqlSources) {\r\n      var myHeaders = new Headers();\r\n      myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n      var urlencoded = new URLSearchParams();\r\n      urlencoded.append(\"query\", q3)\r\n\r\n      const options = {\r\n        method: \"POST\",\r\n        headers: myHeaders,\r\n        body: urlencoded,\r\n        redirect: \"follow\"\r\n      }\r\n\r\n      const res = await this.fetch(source.value, options).then(i => i.json())\r\n      for (const d of res[\"results\"].bindings) {\r\n        // concepts.push(d.concept)\r\n        if (!results[d.concept]) {\r\n          results[d.concept.value] = [d]\r\n        } else {\r\n          results[d.concept.value].push(d)\r\n        }\r\n        if (d.alias) {\r\n          if (!aliases[d.alias]) {\r\n            aliases[d.concept.value] = [d.alias.value]\r\n          } else {\r\n            aliases[d.concept.value].push(d.alias.value)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (nonSparqlSources.length > 0) {\r\n      const r = await queryEngine.query(q3, { sources: nonSparqlSources })\r\n      const { data } = await queryEngine.resultToString(r, \"application/sparql-results+json\");\r\n      const res = await parseStream(data);\r\n      for (const d of res[\"results\"].bindings) {\r\n        // concepts.push(d.concept)\r\n        if (!results[d.concept]) {\r\n          results[d.concept.value] = [d]\r\n        } else {\r\n          results[d.concept.value].push(d)\r\n        }\r\n        if (d.alias) {\r\n          if (!aliases[d.alias.value]) {\r\n            aliases[d.concept.value] = [d.alias.value]\r\n          } else {\r\n            aliases[d.concept.value].push(d.alias.value)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const concept of Object.keys(aliases)) {\r\n      // if the alias has not been queried for yet\r\n      let aliasQuery = `SELECT ?concept ?ds ?dist ?identifier WHERE {`\r\n      for (const alias of aliases[concept]) {\r\n        aliasQuery += `{<${alias}> <${LBDS.hasReference}> ?ref1 .\r\n        ?concept <${LBDS.hasReference}> ?ref1 .\r\n        ?ref1 <${LBDS.inDataset}> ?ds ;\r\n        <${LBDS.hasIdentifier}> ?d1 .\r\n        ?d1 <${LBDS.value}> ?identifier ;\r\n        <${LBDS.inDistribution}> ?dist .\r\n      } UNION `\r\n      }\r\n      aliasQuery = aliasQuery.substring(0, aliasQuery.length - 6)\r\n      aliasQuery += `}`\r\n\r\n\r\n      for (const source of sparqlSources) {\r\n        var myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n        var urlencoded = new URLSearchParams();\r\n        urlencoded.append(\"query\", aliasQuery)\r\n  \r\n        const options = {\r\n          method: \"POST\",\r\n          headers: myHeaders,\r\n          body: urlencoded,\r\n          redirect: \"follow\"\r\n        }\r\n\r\n        const res = await this.fetch(source.value, options).then(i => i.json())\r\n        for (const d of res[\"results\"].bindings) {\r\n          results[concept].push(d)\r\n        }\r\n      }\r\n\r\n      if (nonSparqlSources.length > 0) {\r\n        const r = await queryEngine.query(aliasQuery, { sources: nonSparqlSources })\r\n        const { data } = await queryEngine.resultToString(r, \"application/sparql-results+json\");\r\n        const res = await parseStream(data);\r\n        for (const d of res[\"results\"].bindings) {\r\n          results[concept].push(d)\r\n        }\r\n      }\r\n    }\r\n    const allConcepts = []\r\n    for (const item of Object.keys(results)) {\r\n      const myRes = results[item]\r\n      const registry = item.split('#')[0]\r\n      const c = new LbdConcept(this.session, registry)\r\n      const aliases = []\r\n      const references =[]\r\n      myRes.forEach(i => {\r\n        aliases.push(i.concept)\r\n        references.push({\r\n          identifier: i.identifier.value,\r\n          distribution: i.dist.value,\r\n          dataset: i.ds.value\r\n        })\r\n      })\r\n      await c.init({aliases, references})\r\n      allConcepts.push(c)\r\n    }\r\n\r\n    return allConcepts\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /////////////////////////////////////////////////////////\r\n  /////////////////////// QUERY ///////////////////////////\r\n  /////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * @description a direct query on project resources\r\n   * @param q The SPARQL query (string)\r\n   * @param sources The sources (array)\r\n   * @param asStream Whether to be consumed as a stream or not (default: false)\r\n   * @returns \r\n   */\r\n  public async directQuery(q: string, sources: any, options?: { asStream?: boolean, queryEngine?: QueryEngine, onlySparqlEndpoints?: boolean }) {\r\n  let queryEngine\r\n  (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine()\r\n  const newOptions = { sources, fetch: this.fetch, ...options, queryEngine }\r\n  if (options && options.onlySparqlEndpoints) {\r\n\r\n  } else {\r\n    const registries = await this.getAllReferenceRegistries()\r\n    newOptions[\"registries\"] = registries\r\n  }\r\n  // console.log('newOptions', newOptions)\r\n  const results = await query(q, newOptions)\r\n  return results\r\n}\r\n\r\npublic async queryAll(q: string, options?: { asStream?: boolean, queryEngine?: QueryEngine}) {\r\n  let queryEngine\r\n  (options && options.queryEngine) ? queryEngine = options.queryEngine : queryEngine = new QueryEngine()\r\n  const partialProjects = await this.findAllPartialProjects(queryEngine)\r\n  const sources = await this.getSatellites(\"sparql\", {queryEngine, partialProjects}).then(res => Object.keys(res).map(i => {\r\n    return {type: \"sparql\", value: res[i]}\r\n  }))\r\n\r\n  const newOptions = { sources, fetch: this.fetch, ...options, queryEngine }\r\n  const results = await query(q, newOptions)\r\n  return results\r\n}\r\n\r\n\r\n  // /**\r\n  //  * @description A query where datasets take the \r\n  //  * @param q \r\n  //  * @param datasets \r\n  //  * @param asStream \r\n  //  */\r\n  // public async indirectQuery(q: string, datasets: string[], asStream: boolean = false) {\r\n\r\n  // }\r\n}\r\n"],"mappings":"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"}