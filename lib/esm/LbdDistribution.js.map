{"version":3,"file":"LbdDistribution.js","names":["LbdDistribution","constructor","session","dataset","id","fetch","url","accessService","AccessService","dataService","DataService","lbdService","LbdService","checkExistence","status","method","then","result","get","options","data","getContentType","queryEngine","QueryEngine","contentType","q","DCAT","mediaType","res","queryBindings","sources","i","toArray","map","item","ct","value","length","updateMetadata","query","sparqlUpdate","addAccessUrl","accessUrl","q0","accessURL","create","file","mimetype","makePublic","mime","lookup","error","writeFileToPod","undefined","deleteFile","distribution","Distribution","downloadURL","Object","keys","key","delete","myEngine","q1"],"sources":["../../src/LbdDistribution.ts"],"sourcesContent":["import AccessService from \"./helpers/access-service\";\r\nimport DataService from \"./helpers/data-service\";\r\n\r\nimport LBD from \"./helpers/vocab/lbds\";\r\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\r\nimport {LbdService} from \"./LbdService\";\r\nimport {extract} from \"./helpers/functions\"\r\nimport {v4} from \"uuid\"\r\nimport { DCAT, DCTERMS, RDFS } from \"@inrupt/vocab-common-rdf\";\r\nimport mime from \"mime-types\"\r\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\r\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\r\nimport {LbdDataset} from \"./LbdDataset\";\r\nimport { QueryEngine } from \"@comunica/query-sparql\";\r\n\r\nexport class LbdDistribution {\r\n  public fetch;\r\n  public accessService: AccessService;\r\n  public dataService: DataService;\r\n  public lbdService: LbdService;\r\n  public url: string;\r\n  public data: any;\r\n\r\n  public dataset: LbdDataset\r\n  public contentType: string\r\n  public session:  any\r\n\r\n  /**\r\n   * \r\n   * @param session an (authenticated) Solid session\r\n   * @param dataset the LbdDataset to which this distribution belongs\r\n   * @param id (optional) identifier of the distribution (default: GUID)\r\n   */\r\n  constructor(session: any, dataset, id: string = v4()) {\r\n    this.dataset = dataset\r\n    this.session = session\r\n    this.fetch = session.fetch;\r\n    this.url = dataset.url + id\r\n  \r\n    this.accessService = new AccessService(session.fetch);\r\n    this.dataService = new DataService(session.fetch);\r\n    this.lbdService = new LbdService(session);\r\n  }\r\n\r\n  /**\r\n   * Check the existence of this distribution\r\n   */\r\n  public async checkExistence() {\r\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\r\n    if (status === 200) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description Get the distribution's content\r\n   * @param options Fetch options\r\n   */\r\n  public async get(options: object = {}) {\r\n      this.data = await this.fetch(this.url, options)\r\n  }\r\n  \r\n  /**\r\n   * @description Get the content type of the distribution\r\n   * @returns contenttype of the distribution\r\n   */\r\n  public async getContentType(queryEngine = new QueryEngine()) {\r\n    if (this.contentType) return this.contentType\r\n    else {\r\n      const q = `select ?ct where {<${this.url}> <${DCAT.mediaType}> ?ct}`\r\n      const res: string[] = await queryEngine.queryBindings(q, {sources: [this.url], fetch: this.fetch})\r\n      .then(i => i.toArray())\r\n      .then(i => {\r\n        return i.map(item => {\r\n          const ct = item.get('ct').value\r\n          return ct\r\n        })\r\n      })\r\n      if (res.length > 0) {\r\n        this.contentType = res[0]\r\n        return this.contentType\r\n      } else {\r\n        return\r\n      }\r\n    }   \r\n  } \r\n\r\n\r\n  /**\r\n   * @description Update the metadata of the distribution (i.e. its dataset) with a SPARQL query\r\n   * @param query the SPARQL update\r\n   */\r\n  public async updateMetadata(query) {\r\n    await this.dataService.sparqlUpdate(this.dataset.url, query)\r\n  }\r\n\r\n  /**\r\n   * @description Add a new dcat:accessURL to the distribution\r\n   * @param accessUrl Access URL of the distribution (e.g. for a satellite service)\r\n   */\r\n  public async addAccessUrl(accessUrl) {\r\n    const q0 = `INSERT DATA {<${this.url}> <${DCAT.accessURL}> <${accessUrl}>}`\r\n    await this.updateMetadata(q0)\r\n  }\r\n\r\n  /**\r\n   * @description Create this distribution on a Pod\r\n   * @param file The file/content of the distribution\r\n   * @param options Additional metadata to add to the distribution. form:  {[predicate]: value}\r\n   * @param mimetype optional: the content type of the distribution. If not provided, it will be guessed. If the guess fails, the content type will be text/plain\r\n   * @param makePublic access rights\r\n   */\r\n  public async create(\r\n    file: File | Buffer,\r\n    options: object = {},\r\n    mimetype?: string,\r\n    makePublic?: boolean,\r\n  ) {\r\n      if (!mimetype) {\r\n          try {\r\n              mimetype = mime.lookup(file[\"name\"])\r\n              if (!mimetype) mimetype = \"text/plain\"\r\n          } catch (error) {\r\n              mimetype = \"text/plain\"\r\n          }\r\n      }\r\n          \r\n    await this.dataService.writeFileToPod(file, this.url, makePublic, mimetype)\r\n      //workaround to allow inherited access rights\r\n      if (makePublic === undefined) {\r\n        this.dataService.deleteFile(this.url + \".acl\")\r\n      }\r\n\r\n      const q = `INSERT DATA {\r\n        <${this.dataset.url}> <${DCAT.distribution}> <${this.url}> .\r\n        <${this.url}> a <${DCAT.Distribution}> ;\r\n            <${DCAT.mediaType}> <https://www.iana.org/assignments/media-types/${mimetype}> ;\r\n            <${DCAT.downloadURL}> <${this.url}> .\r\n      }`\r\n      await this.dataService.sparqlUpdate(this.dataset.url, q)\r\n    if (Object.keys(options).length > 0) {\r\n        let q0 = `INSERT DATA { `\r\n        for (const key of Object.keys(options)) {\r\n          q0 += `<${this.dataset.url}> <${key}> \"${options[key]}\" .`\r\n        }    \r\n        q0 += \"}\"\r\n        await this.dataService.sparqlUpdate(this.dataset.url, q0)\r\n      }\r\n\r\n  }\r\n\r\n  /**\r\n   * Delete this distribution\r\n   */\r\n  public async delete() {\r\n    const myEngine = new QueryEngine()\r\n    await this.dataService.deleteFile(this.url)\r\n    // also update dataset\r\n    const q0 = `DELETE {\r\n      <${this.url}> ?p ?o .\r\n    } WHERE {\r\n      <${this.url}> ?p ?o .\r\n    }`\r\n    await myEngine.query(q0, {sources: [this.dataset.url], fetch: this.fetch})\r\n\r\n    const q1 = `DELETE {\r\n      ?s ?p <${this.url}> .\r\n    } WHERE {\r\n      ?s ?p <${this.url}> .\r\n    }`\r\n    await myEngine.query(q1, {sources: [this.dataset.url], fetch: this.fetch})\r\n\r\n    return\r\n  }\r\n}\r\n\r\n"],"mappings":"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"}