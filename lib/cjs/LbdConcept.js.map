{"version":3,"sources":["../../src/LbdConcept.ts"],"names":["LbdConcept","session","registry","aliases","fetch","accessService","AccessService","dataService","DataService","references","id","distribution","url","q0","LBD","Concept","sparqlUpdate","push","initialized","data","Error","alias","includes","OWL","sameAs","identifier","dataset","referenceId","regdist","referenceUrl","identifierId","identifierUrl","hasReference","inDataset","hasIdentifier","inDistribution","console","log","isInt","n","startsWith","XSD","anyURI","integer","formatted","string"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\nimport DataService from \"./helpers/data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./helpers/vocab/lbds\";\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\nimport LbdService from \"./LbdService\";\nimport {extract} from \"./helpers/functions\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, OWL, RDFS, XSD } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\nimport LbdProject from \"./LbdProject\";\nimport { getQueryResult } from \"./helpers/utils\";\n\nexport default class LbdConcept {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  private session: BrowserSession | NodeSession\n  public references: object[]\n  public aliases: string[]\n  public registry: string\n  public initialized: boolean\n\n  constructor(session: BrowserSession | NodeSession, registry: string) {\n    this.aliases = []\n    this.session = session\n    this.fetch = session.fetch;\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.registry = registry\n    this.references = []\n  }\n\n  /**\n   * create this concept on a project (in a Pod) - asynchronous\n   */\n  public async create(id?) {\n    if (!id) {\n      id = v4()\n    }\n    const distribution = this.registry + 'data'\n    const url = distribution + \"#\" + id\n    const q0 = `INSERT DATA {<${url}> a <${LBD.Concept}> }`\n    await this.dataService.sparqlUpdate(distribution, q0)\n    this.aliases.push(url)\n    this.initialized = true\n  }\n\n\n  /**\n   * @description initialise an already existing concept in your application\n   * @param data {aliases: string[], references: {dataset, distribution, identifier}[]\n   */\n  public init(data: {aliases: string[], references: {dataset: string, distribution: string, identifier: string}[]}) {\n    this.aliases = data.aliases\n    this.references = [data.references]\n    this.initialized = true\n  }\n\n  /**\n   * @description delete this concept from the reference registry\n   */\n  public async delete() {\n    if (!this.initialized) throw new Error(\"Please initialize the Concept first using this.initialize() or this.create()\")\n    const distribution = this.registry + 'data'\n    for (const alias  of this.aliases) {\n      if (alias.includes(this.registry)) {\n        const q0 = `DELETE {\n          <${alias}> ?p ?o .\n        } WHERE {\n          <${alias}> ?p ?o .\n        }`\n        await this.dataService.sparqlUpdate(distribution, q0)\n      }\n    }\n\n  }\n\n  public async addAlias(url) {\n    const registry = this.registry\n    for (const alias  of this.aliases) {\n      if (alias.includes(registry)) {\n\n        const q0 = `INSERT DATA {\n          <${alias}> <${OWL.sameAs}> <${url}> .\n       }`\n       await this.dataService.sparqlUpdate(this.registry + \"data\", q0)\n      }\n    }\n\n    this.aliases.push(url)\n    return\n  }\n\n  /**\n   * @description Add a reference to this concept\n   * @param identifier the identifier\n   * @param dataset the dataset that contains this reference\n   * @param distribution the distribution that contains this reference\n   * @returns \n   */\n  public async addReference(identifier: string, dataset: string, distribution: string) {\n    try {\n      if (!this.initialized) throw new Error(\"Please initialize the Concept first using this.initialize() or this.create()\")\n      const registry = this.registry\n      const referenceId = v4()\n      const regdist = registry + \"data\"\n      const referenceUrl = regdist + \"#\" + referenceId\n      const identifierId = v4()\n      const identifierUrl = regdist + \"#\" + identifierId\n  \n      // const idLiteral = this.getIdentifierType(identifier)\n      for (const alias  of this.aliases) {\n        if (alias.includes(registry)) {\n  \n          const q0 = `INSERT DATA {\n            <${alias}> <${LBD.hasReference}> <${referenceUrl}> .\n            <${referenceUrl}> <${LBD.inDataset}> <${dataset}> ;\n              <${LBD.hasIdentifier}> <${identifierUrl}> .\n            <${identifierUrl}> <http://schema.org/value> \"${identifier}\" ;\n            <${LBD.inDistribution}> <${distribution}> .\n         }`\n         await this.dataService.sparqlUpdate(regdist, q0)\n        }\n      }\n      this.references.push({\n        dataset,\n        distribution,\n        identifier\n      })\n      return referenceUrl\n    } catch (error) {\n      console.log('error', error)\n    }\n\n\n  }\n\n  /**\n   * @description Delete a reference for this concept\n   * @param referenceUrl the URL of the reference to delete\n   */\n  public async deleteReference(referenceUrl) {\n    const regdist = this.registry + \"data\"\n    const q0 = `DELETE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    } WHERE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    }`\n    await this.dataService.sparqlUpdate(regdist, q0)\n\n    // const q1 = `DELETE {<${this.url}> <${LBD.hasReference}> <${referenceUrl}> .}`\n    // await this.dataService.sparqlUpdate(regdist, q1)\n  }\n\n  private getIdentifierType(identifier: string | number) {\n    function isInt(n) {\n      return n % 1 === 0;\n   }\n\n    if (typeof identifier === \"string\" && identifier.startsWith(\"http\")) {\n      return `\"${identifier}\"^^<${XSD.anyURI}>`\n    } else {\n      if (typeof identifier === \"number\") {\n        if (isInt(identifier)) {\n          return `\"${identifier}\"^^<${XSD.integer}>`\n        } else {\n          return {formatted: `\"${identifier}\"^^<${XSD.float}>`}\n        }\n      } else {\n        return `\"${identifier}\"^^<${XSD.string}>`\n      }\n    }\n  }\n}\n\n"],"file":"LbdConcept.js"}