{"version":3,"sources":["../../src/LbdDataset.ts"],"names":["LbdDataset","session","url","fetch","accessService","AccessService","dataService","DataService","lbdService","LBDService","method","then","result","status","headers","i","json","data","getDistributions","distributions","options","makePublic","datasetUrl","datasetId","split","length","res","createContainer","aclDefault","ACL","Authorization","agentClass","FOAF","Agent","sparqlUpdate","undefined","deleteFile","q","DCAT","Dataset","DCTERMS","creator","info","webId","identifier","Object","keys","q0","key","Array","isArray","forEach","item","t","startsWith","init","deleteContainer","query","distribution","mimetype","distributionId","dist","LbdDistribution","create","dataset","distributionUrls","map","id","push"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\nimport DataService from \"./helpers/data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./helpers/vocab/lbds\";\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./helpers/functions\"\nimport {v4} from \"uuid\"\nimport { ACL, DCAT, DCTERMS, FOAF, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport LbdDistribution from './LbdDistribution'\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\n\nexport default class LbdDataset {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public url: string;\n  public distributions: LbdDistribution[]\n  public data: object[];\n  private session: BrowserSession | NodeSession\n\n  constructor(session: BrowserSession | NodeSession, url: string) {\n    this.session = session\n    this.fetch = session.fetch;\n    this.url = url\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  /**\n   * \n   * @returns boolean: this dataset exists or not\n   */\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * @description Draw this dataset into your application (async)\n   */\n  public async init() {\n    this.data = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.distributions = await this.getDistributions()\n  }\n\n  /**\n   * @description create this dataset within the active project\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @param makePublic initial access rights for the dataset (boolean)\n   */\n  public async create(\n    options: object = {},\n    makePublic?: boolean,\n  ) {\n    const datasetUrl = this.url\n    const datasetId = this.url.split('/')[this.url.split(\"/\").length - 2]\n    const status = await this.fetch(datasetUrl, {method: \"HEAD\"}).then(res => res.status)\n    if (status !== 200) {\n      await this.dataService.createContainer(datasetUrl, makePublic)\n\n      //workaround to allow inherited access rights\n\n      if (makePublic) {\n        let aclDefault = `INSERT {?rule <${ACL.default}> <${datasetUrl}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`\n        await this.dataService.sparqlUpdate(datasetUrl + \".acl\", aclDefault)\n      }\n\n      if (makePublic === undefined) {\n        this.dataService.deleteFile(datasetUrl + \".acl\")\n      }\n    }\n\n    let q = `INSERT DATA {<${datasetUrl}> a <${DCAT.Dataset}> ; <${DCTERMS.creator}> <${this.session.info.webId}> ; <${DCTERMS.identifier}> \"${datasetId}\". }`\n\n    await this.dataService.sparqlUpdate(datasetUrl, q)\n    \n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `\n      for (const key of Object.keys(options)) {\n        if (Array.isArray(options[key])) {\n          options[key].forEach((item :string) => {\n            let t\n            if (item.startsWith(\"http\")) {\n              t = `<${item}>`\n            } else {\n              t = `\"${item}\"`\n            }\n            q0 += `<${datasetUrl}> <${key}> ${t} .`\n          })\n        } else {\n          let t\n          if (options[key].startsWith(\"http\")) {\n            t = `<${options[key]}>`\n          } else {\n            t = `\"${options[key]}\"`\n          }\n          q0 += `<${datasetUrl}> <${key}> ${t} .`\n        }\n      }    \n      q0 += \"}\"\n      await this.dataService.sparqlUpdate(datasetUrl, q0)\n    }\n    await this.init()\n  }\n\n  /**\n   * @description delete this dataset\n   * @returns void\n   */\n  public async delete() {\n    await this.dataService.deleteContainer(this.url, true)\n    return\n  }\n\n  /**\n   * @description Update the dataset with SPARQL (dangerous - watch out!)\n   * @param query The SPARQL query with which to update the dataset\n   */\n  public async update(query) {\n      await this.dataService.sparqlUpdate(this.url, query)\n  }\n\n  /////////////////////////////////////////////////////////\n  //////////////////// DISTRIBUTIONS///////////////////////\n  /////////////////////////////////////////////////////////\n  /**\n   * @description create a distribution for this dataset\n   * @param distribution The file to upload as a dump of the dataset\n   * @param mimetype The mimetype of the distribution (if omitted it is guessed)\n   * @param options options (currently not implemented)\n   * @param distributionId the ID of the distribution - normally UUID, but can be overridden\n   * @param makePublic initial access rights for the dataset (boolean)\n   * @returns the distribution object\n   */\n  public async addDistribution(distribution: File | Buffer, mimetype? ,options: object = {}, distributionId: string = v4(), makePublic: boolean = false) {      \n    const dist = new LbdDistribution(this.session, this, distributionId)\n    await dist.create(distribution, {}, mimetype, makePublic)\n    return dist\n  }\n\n  /**\n   * @description get an Array of distribution URLs of this dataset\n   * @returns an Array of distribution URLs\n   */\n  public getDistributions() {\n      const dataset = extract(this.data, this.url)\n      if (dataset[DCAT.distribution]) {\n        const distributionUrls = dataset[DCAT.distribution].map(i => i[\"@id\"])\n        const distributions = []\n        for (const url of distributionUrls) {\n          const id = url.split('/')[url.split('/').length -1]\n          const dist = new LbdDistribution(this.session, this, id)\n          distributions.push(dist)\n        }\n        return distributions\n      } else return []\n  }\n\n}\n\n"],"file":"LbdDataset.js"}