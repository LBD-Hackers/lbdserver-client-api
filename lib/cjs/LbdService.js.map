{"version":3,"sources":["../../src/LbdService.ts"],"names":["namedNode","DataFactory","literal","defaultGraph","quad","variable","LBDService","session","verbose","fetch","accessService","AccessService","dataService","DataService","store","Store","q","sources","registries","asStream","mutateQuery","query","myEngine","QueryEngine","inference","result","resultToString","data","JSON","parse","obj","variables","type","bgp","findLowerLevel","input","Promise","resolve","reject","OWL","sameAs","LBD","hasReference","hasIdentifier","queryQuads","quadStream","on","res","addQuad","subject","id","replaceAll","predicate","value","object","translation","usedVariables","Set","aliasNumber","aliases","patterns","pattern","Object","keys","item","termType","has","newVName","push","newV","add","forEach","alias","newPattern","Array","from","webId","getProjectRegistry","lbdLoc","length","aggregator","headers","Accept","then","t","json","myProjects","LDP","contains","map","i","stakeholder","hasProjectRegistry","bindings","bind","get","err","location","undefined","inbox","url","publiclyAccessible","info","replace","q0","sparqlUpdate","q1","Aggregator","accessRights","read","append","write","control","actor","setResourceAccess","ResourceType","CONTAINER","console","log","deleteContainer"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\nimport { urlJoin } from \"url-join-ts\";\nimport DataService from \"./helpers/data-service\";\nimport { computeChecksumMd5 } from \"./helpers/utils\";\nimport { newEngine, IQueryResultBindings } from \"@comunica/actor-init-sparql\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  createSolidDataset,\n  buildThing,\n  getSolidDataset,\n  createThing,\n  setThing,\n  setUrl,\n  addUrl,\n  getThingAll,\n  getUrlAll,\n  setDatetime,\n  saveSolidDatasetAt,\n} from \"@inrupt/solid-client\";\nimport { extract, streamToString } from \"./helpers/functions\";\nimport { RDF, SCHEMA_INRUPT, DCAT, OWL, LDP, AS, XSD, FOAF, DCTERMS } from \"@inrupt/vocab-common-rdf\";\nimport LBD from \"./helpers/vocab/lbds\";\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\nimport { translate, toSparql } from 'sparqlalgebrajs'\nimport {Store, DataFactory} from 'n3'\nimport { QueryEngine } from \"@comunica/query-sparql\";\n\nconst { namedNode, literal, defaultGraph, quad, variable } = DataFactory;\n\nexport default class LBDService {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  private session: BrowserSession | NodeSession;\n  private store: Store\n\n\n  /**\n   * \n   * @param session an (authenticated) session\n   * @param verbose optional parameter for logging purposes\n   */\n  constructor(session: BrowserSession | NodeSession, verbose: boolean = false) {\n    this.session = session;\n    this.fetch = session.fetch;\n    this.verbose = verbose;\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.store = new Store()\n  }\n\n    /////////////////////////////////////////////////////////\n  ////////////////////// QUERY ////////////////////////////\n  /////////////////////////////////////////////////////////\n\n  public async query(q: string, { sources, registries, asStream }) {\n    const { query } = this.mutateQuery(q)\n\n    const myEngine = new QueryEngine();\n\n    await this.inference(myEngine, registries)\n    const result = await myEngine.query(query, { sources: [...sources, this.store], fetch })\n    const { data } = await myEngine.resultToString(result,\n      'application/sparql-results+json');\n    if (asStream) {\n      return data\n    } else {\n      return JSON.parse(await streamToString(data))\n    }\n  }\n\n  private findLowerLevel(obj, variables) {\n    if (!variables) variables = obj.variables\n    if (obj.type === \"bgp\") {\n      return { bgp: obj, variables }\n    } else {\n      return this.findLowerLevel(obj.input, variables)\n    }\n  }\n\n  private inference(myEngine, registries): Promise<void> {\n    return new Promise(async (resolve, reject) => {\n      const q = `\n      CONSTRUCT {\n       ?s1 <${OWL.sameAs}> ?s2 .\n       ?s2 <${OWL.sameAs}> ?s1 .\n      } WHERE {\n          ?concept1 <${LBD.hasReference}>/<${LBD.hasIdentifier}>/<http://schema.org/value> ?s1 .\n          ?concept2 <${LBD.hasReference}>/<${LBD.hasIdentifier}>/<http://schema.org/value> ?s2 .\n          ?concept1 <${OWL.sameAs}> ?concept2 .\n      }`\n      const quadStream = await myEngine.queryQuads(q, {\n        sources: registries,\n        fetch\n      });\n\n      quadStream.on('data', (res) => {\n        this.store.addQuad(quad(\n          namedNode(res.subject.id.replaceAll('\"', '')),\n          namedNode(res.predicate.value),\n          namedNode(res.object.id.replaceAll('\"', '')),\n          defaultGraph()\n        ))\n      });\n\n      quadStream.on('end', () => {\n        resolve()\n      })\n    })\n  }\n\n  private mutateQuery(query) {\n    const translation = translate(query);\n    const { bgp, variables } = this.findLowerLevel(translation, translation.variables)\n    const usedVariables = new Set()\n    let aliasNumber = 1\n    let aliases = {}\n    for (const pattern of bgp.patterns) {\n      for (const item of Object.keys(pattern)) {\n        if (pattern[item].termType === \"Variable\") {\n          if (usedVariables.has(pattern[item])) {\n            const newVName = `${pattern[item].value}_alias${aliasNumber}`\n            if (!aliases[pattern[item].value]) aliases[pattern[item].value] = []\n\n            aliases[pattern[item].value].push(newVName)\n            aliasNumber += 1\n            const newV = { termType: \"Variable\", value: newVName }\n            pattern[item] = newV\n          }\n          usedVariables.add(pattern[item])\n        }\n\n      }\n    }\n    Object.keys(aliases).forEach(item => {\n      aliases[item].forEach(alias => {\n        const newPattern = quad(\n          variable(item),\n          namedNode(\"http://www.w3.org/2002/07/owl#sameAs\"),\n          variable(alias),\n          defaultGraph()\n        )\n        bgp.patterns.push(newPattern)\n      })\n    })\n    const q: any = { type: \"project\", input: { type: \"bgp\", patterns: bgp.patterns }, variables: Array.from(usedVariables) }\n    return { query: toSparql(q), variables: Array.from(usedVariables) }\n  }\n\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// PREPARATION //////////////////////\n  /////////////////////////////////////////////////////////\n  /**\n   * @description This function checks if the card (webId) contains a lbds:hasProjectRegistry pointer\n   * @param webId the webId/card to check\n   * @returns boolean - false: the WebID doesn't have a project registry yet / true: a project registry is mentioned in the card\n   */\n  public async validateWebId(webId: string) {\n    const lbdLoc = await this.getProjectRegistry(webId);\n    if (lbdLoc && lbdLoc.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @description This function retrieves the LBDserver projects from a project aggregator (e.g. a project registry or public aggregator)\n   * @param aggregator an LBDS aggregator, aggregating projects with lbds:aggregates\n   * @returns Array of LBDserver project access points (URL).\n   */\n  public async getAllProjects(aggregator) {\n    const data = await this.fetch(aggregator, {\n      headers: { Accept: \"application/ld+json\" },\n    }).then((t) => t.json());\n    const myProjects = extract(data, aggregator)[LDP.contains].map(\n      (i) => i[\"@id\"]\n    );\n    return myProjects;\n  }\n\n  /**\n   * @description Find the LBDserver project registry of a specific stakeholder by their WebID.\n   * @param stakeholder The WebID of the stakeholder from whom the project registry should be retrieved\n   * @returns URL of project registry\n   */\n  public async getProjectRegistry(\n    stakeholder: string\n  ): Promise<string | undefined> {\n    const myEngine = newEngine();\n    const q = `select ?loc where {<${stakeholder}> <${LBD.hasProjectRegistry}> ?loc}`;\n    const location = await myEngine\n      .query(q, { sources: [stakeholder], fetch: this.fetch })\n      .then((res: IQueryResultBindings) => res.bindings())\n      .then((bind: any) => bind.map((i) => i.get(\"?loc\").value))\n      .catch((err: Error) => {\n        throw err;\n      });\n    if (location && location.length > 0) {\n      return location[0];\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @description This function retrieves the LDP inbox from a particular WebID\n   * @param stakeholder The WebID of the stakeholder from whom the LDP inbox should be retrieved\n   * @returns The inbox URL\n   */\n  public async getInbox(stakeholder: string): Promise<string | undefined> {\n    const myEngine = newEngine();\n    const q = `select ?inbox where {<${stakeholder}> <${LDP.inbox}> ?inbox}`;\n    const inbox = await myEngine\n      .query(q, { sources: [stakeholder], fetch: this.fetch })\n      .then((res: IQueryResultBindings) => res.bindings())\n      .then((bind: any) => bind.map((i) => i.get(\"?inbox\").value))\n      .catch((err: Error) => {\n        throw err;\n      });\n    if (inbox && inbox.length > 0) {\n      return inbox[0];\n    } else {\n      return undefined;\n    }\n  }\n\n//   public async inviteStakeholder(stakeholder: string, projectId: string) {\n//     const inbox = await this.getInbox(stakeholder);\n//     const id = v4();\n//     const url = inbox + id;\n//     const message = `<>\n//   a <${AS.Announce}> ;\n//   <${AS.actor}> <${this.session.info.webId}> ;\n//   <${AS.object}> <#invite> ;\n//   <${AS.target}> <${stakeholder}> ;\n//   <${AS.updated}> \"${new Date().toISOString()}\"^^${XSD.dateTime} .\n\n// <#invite> a ${LBD.ProjectInvite}; \n//   <${FOAF.primaryTopic}> <#project> .\n// <#project> a <${LBD.Project}> ;\n//     <${DCTERMS.identifier} \"${projectId}\" .\n//   `;\n\n//   const options = {\n//     method: \"POST\",\n//     body: message,\n//   }\n//     // await this.session.fetch()\n//   }\n\n  /**\n   * @description Create an LBDserver project registry\n   * @param url Where the project registry should be created\n   * @param publiclyAccessible Access rights for the project registry\n   * @returns the URL of the LBDserver Project Registry\n   */\n  public async createProjectRegistry(\n    url: string = undefined,\n    publiclyAccessible: boolean = true\n  ): Promise<string> {\n    try {\n      const stakeholder = this.session.info.webId\n      if (!url) url = stakeholder.replace(\"/profile/card#me\", \"/lbd/\");\n      \n      const q0 = `INSERT DATA {\n          <${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .\n        }`;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n\n      // create the LBD registry (container / Aggregator)\n      const q1 = `INSERT DATA {\n        <${url}> a <${LBD.Aggregator}> .\n      }`;\n\n      // the updates immediately creates the container\n      await this.dataService.sparqlUpdate(url, q1);\n\n      let accessRights: AccessRights;\n      let actor: string | undefined;\n      if (publiclyAccessible) {\n        accessRights = {\n          read: true,\n          append: false,\n          write: false,\n          control: false,\n        };\n      } else {\n        accessRights = { read: true, append: true, write: true, control: true };\n        actor = stakeholder;\n      }\n      await this.accessService.setResourceAccess(\n        url,\n        accessRights,\n        ResourceType.CONTAINER,\n        actor\n      );\n      return url;\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * @description delete a project registry at a particular location\n   * @param stakeholder The stakeholder (the authenticated agent)\n   * @param url The URL of the project registry\n   */\n  public async removeProjectRegistry(url: string) {\n    try {\n      const q0 = `DELETE {<${this.session.info.webId}> <${LBD.hasProjectRegistry}> <${url}> .}\n      WHERE {<${this.session.info.webId}> <${LBD.hasProjectRegistry}> ?reg .}`;\n      await this.dataService.sparqlUpdate(this.session.info.webId, q0);\n      await this.dataService.deleteContainer(url, true);\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n}\n"],"file":"LbdService.js"}