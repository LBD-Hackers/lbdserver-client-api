{"version":3,"sources":["../../src/LbdDistribution.ts"],"names":["LbdDistribution","session","dataset","id","fetch","url","accessService","AccessService","dataService","DataService","lbdService","LBDService","method","then","result","status","options","data","metadata","DCAT","mediaType","map","i","query","sparqlUpdate","accessUrl","q0","accessURL","updateMetadata","file","mimetype","makePublic","mime","lookup","error","writeFileToPod","undefined","deleteFile","q","distribution","Distribution","downloadURL","Object","keys","length","key","init","myEngine","sources","q1"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\nimport DataService from \"./helpers/data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./helpers/vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./helpers/functions\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\nimport LbdDataset from \"./LbdDataset\";\n\nexport default class LbdDistribution {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public url: string;\n  public data: any;\n\n  private dataset: LbdDataset\n\n  private session:  BrowserSession | NodeSession\n\n  /**\n   * \n   * @param session an (authenticated) Solid session\n   * @param dataset the LbdDataset to which this distribution belongs\n   * @param id (optional) identifier of the distribution (default: GUID)\n   */\n  constructor(session: BrowserSession | NodeSession, dataset, id: string = v4()) {\n    this.dataset = dataset\n    this.fetch = session.fetch;\n    this.url = dataset.url + id\n  \n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  /**\n   * Check the existence of this distribution\n   */\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * @description Get the distribution's content\n   * @param options Fetch options\n   */\n  public async get(options: object = {}) {\n      this.data = await this.fetch(this.url, options)\n  }\n  \n  /**\n   * @description Get the content type of the distribution\n   * @returns contenttype of the distribution\n   */\n  public getContentType() {\n    const metadata = extract(this.dataset.data, this.url)[DCAT.mediaType].map(i => i[\"@id\"])[0]\n    return metadata\n\n  } \n\n\n  /**\n   * @description Update the metadata of the distribution (i.e. its dataset) with a SPARQL query\n   * @param query the SPARQL update\n   */\n  public async updateMetadata(query) {\n    await this.dataService.sparqlUpdate(this.dataset.url, query)\n  }\n\n  /**\n   * @description Add a new dcat:accessURL to the distribution\n   * @param accessUrl Access URL of the distribution (e.g. for a satellite service)\n   */\n  public async addAccessUrl(accessUrl) {\n    const q0 = `INSERT DATA {<${this.url}> <${DCAT.accessURL}> <${accessUrl}>}`\n    await this.updateMetadata(q0)\n  }\n\n  /**\n   * @description Create this distribution on a Pod\n   * @param file The file/content of the distribution\n   * @param options Additional metadata to add to the distribution. form:  {[predicate]: value}\n   * @param mimetype optional: the content type of the distribution. If not provided, it will be guessed. If the guess fails, the content type will be text/plain\n   * @param makePublic access rights\n   */\n  public async create(\n    file: File | Buffer,\n    options: object = {},\n    mimetype?: string,\n    makePublic?: boolean,\n  ) {\n      if (!mimetype) {\n          try {\n              mimetype = mime.lookup(file[\"name\"])\n              if (!mimetype) mimetype = \"text/plain\"\n          } catch (error) {\n              mimetype = \"text/plain\"\n          }\n      }\n          \n    await this.dataService.writeFileToPod(file, this.url, makePublic, mimetype)\n      //workaround to allow inherited access rights\n      if (makePublic === undefined) {\n        this.dataService.deleteFile(this.url + \".acl\")\n      }\n\n      const q = `INSERT DATA {\n        <${this.dataset.url}> <${DCAT.distribution}> <${this.url}> .\n        <${this.url}> a <${DCAT.Distribution}> ;\n            <${DCAT.mediaType}> <https://www.iana.org/assignments/media-types/${mimetype}> ;\n            <${DCAT.downloadURL}> <${this.url}> .\n      }`\n      await this.dataService.sparqlUpdate(this.dataset.url, q)\n    if (Object.keys(options).length > 0) {\n        let q0 = `INSERT DATA { `\n        for (const key of Object.keys(options)) {\n          q0 += `<${this.dataset.url}> <${key}> \"${options[key]}\" .`\n        }    \n        q0 += \"}\"\n        await this.dataService.sparqlUpdate(this.dataset.url, q0)\n      }\n\n    this.dataset.init()\n  }\n\n  /**\n   * Delete this distribution\n   */\n  public async delete() {\n    const myEngine = newEngine()\n    await this.dataService.deleteFile(this.url)\n    // also update dataset\n    const q0 = `DELETE {\n      <${this.url}> ?p ?o .\n    } WHERE {\n      <${this.url}> ?p ?o .\n    }`\n    await myEngine.query(q0, {sources: [this.dataset.url], fetch: this.fetch})\n\n    const q1 = `DELETE {\n      ?s ?p <${this.url}> .\n    } WHERE {\n      ?s ?p <${this.url}> .\n    }`\n    await myEngine.query(q1, {sources: [this.dataset.url], fetch: this.fetch})\n\n    return\n  }\n}\n\n"],"file":"LbdDistribution.js"}