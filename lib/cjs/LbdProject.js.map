{"version":3,"sources":["../../src/LbdProject.ts"],"names":["LbdProject","session","accessPoint","verbose","endsWith","fetch","localProject","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LbdService","method","then","result","status","headers","Accept","i","json","data","existingPartialProjects","options","makePublic","local","push","createContainer","aclDefault","ACL","Authorization","agentClass","FOAF","Agent","sparqlUpdate","createRegistryContainer","LBD","hasDatasetRegistry","hasReferenceRegistry","referenceContainerUrl","hasServiceRegistry","part","addPartialProject","q","DCTERMS","creator","info","webId","Object","keys","q0","key","referenceMeta","LbdDataset","create","addDistribution","Buffer","from","init","aggregates","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","deleteContainer","getProjectRegistry","repo","partialProjectOfStakeholder","findPartialProject","partialProjectUrl","containerName","property","containerUrl","id","subject","datasetRegistry","datasetUrl","theDataset","ds","datasetId","myEngine","sources","findAllPartialProjects","partials","p","dsReg","query","LDP","contains","results","resultToString","asStream","parsed","bindings","map","value","referenceRegistry","ref","LbdConcept","registries","partial","reg","url","parts","pop","join","identifier","dataset","distribution","rq","DCAT","downloadURL","accessURL","r","b","bi","get","downloadURLs","item","hasReference","inDataset","hasIdentifier","OWL","sameAs","aliases","Set","forEach","add","concept","references","values","v","idQ","inDistribution","response","theConcept","getAllReferenceRegistries"],"mappings":"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","sourcesContent":["import AccessService from \"./helpers/access-service\";\nimport DataService from \"./helpers/data-service\";\nimport LbdConcept from \"./LbdConcept\";\nimport {\n  newEngine,\n  IQueryResultBindings,\n  ActorInitSparql,\n} from \"@comunica/actor-init-sparql\";\nimport LbdDataset from \"./LbdDataset\";\nimport LBD from \"./helpers/vocab/lbds\";\nimport { AccessRights, ResourceType } from \"./helpers/BaseDefinitions\";\nimport LbdService from \"./LbdService\";\nimport { extract, query } from \"./helpers/functions\";\nimport { v4 } from \"uuid\";\nimport { ACL, DCAT, DCTERMS, FOAF, OWL } from \"@inrupt/vocab-common-rdf\";\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\nimport { LDP } from \"@inrupt/vocab-common-rdf\";\nimport { getQueryResult, parseStream } from \"./helpers/utils\";\n\nexport default class LbdProject {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LbdService;\n  public projectId: string;\n  public accessPoint: string;\n  public data: object[];\n\n  private session: BrowserSession | NodeSession;\n\n  // include queryEngine to allow caching of querydata etc.\n  public localProject: string;\n\n  /**\n   * \n   * @param session an (authenticated) Solid session\n   * @param accessPoint The main accesspoint of the project. This is an aggregator containing the different partial projects of the LBDserver instance\n   * @param verbose optional parameter for logging purposes\n   */\n  constructor(\n    session: BrowserSession | NodeSession,\n    accessPoint: string,\n    verbose: boolean = false\n  ) {\n    if (!accessPoint.endsWith(\"/\")) accessPoint += \"/\";\n    this.session = session;\n    this.fetch = session.fetch;\n    this.accessPoint = accessPoint;\n    this.localProject = accessPoint + \"local/\";\n    this.verbose = verbose;\n    this.projectId = accessPoint.split(\"/\")[accessPoint.split(\"/\").length - 2];\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LbdService(session);\n  }\n\n  /**\n   * @description Checks whether a project with this access point already exists\n   * @returns Boolean: true = the project exists / false = the project doesn't exist\n   */\n  public async checkExistence() {\n    const status = await this.fetch(this.accessPoint, { method: \"HEAD\" }).then(\n      (result) => result.status\n    );\n    if (status === 200) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** \n   * @description Initialize the project in your application. In short, this adds project metadata to your LbdProject instance\n   */\n  public async init() {\n    const data = await this.fetch(this.localProject, {\n      headers: { Accept: \"application/ld+json\" },\n    }).then((i) => i.json());\n    this.data = data;\n    return data;\n  }\n\n\n  /**\n   * @description Create an LBDserver project on your Pod\n   * @param existingPartialProjects optional: if the project is already initialized on other stakeholder pods. Adds the existing partial projects to the Pod-specific access point\n   * @param options Metadata for the project. To be in format {[predicate]: value}\n   * @param makePublic access rights: true = public; false = only the creator\n   */\n  public async create(\n    existingPartialProjects: string[] = [],\n    options: object = {},\n    makePublic: boolean = false\n  ) {\n    const local = this.accessPoint + \"local/\";\n    existingPartialProjects.push(local);\n\n    // create global access point\n    await this.dataService.createContainer(this.accessPoint, makePublic);\n    await this.dataService.createContainer(local, makePublic);\n    if (makePublic) {\n      let aclDefault = `INSERT {?rule <${ACL.default}> <${local}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`;\n      await this.dataService.sparqlUpdate(local + \".acl\", aclDefault);\n    }\n\n    // create different registries\n    await this.createRegistryContainer(\n      \"datasets/\",\n      makePublic,\n      LBD.hasDatasetRegistry\n    );\n    const referenceContainerUrl = await this.createRegistryContainer(\n      \"references/\",\n      makePublic,\n      LBD.hasReferenceRegistry\n    );\n    await this.createRegistryContainer(\n      \"services/\",\n      makePublic,\n      LBD.hasServiceRegistry\n    );\n\n    for (const part of existingPartialProjects) {\n      await this.addPartialProject(part);\n    }\n\n    let q = `INSERT DATA {<${this.accessPoint}> <${DCTERMS.creator}> \"${this.session.info.webId}\" . }`;\n    await this.dataService.sparqlUpdate(local, q);\n    await this.dataService.sparqlUpdate(this.accessPoint, q);\n\n    // create optional metadata (e.g. label etc.)\n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `;\n      for (const key of Object.keys(options)) {\n        q0 += `<${this.accessPoint}> <${key}> \"${options[key]}\" .`;\n      }\n      q0 += \"}\";\n      await this.dataService.sparqlUpdate(this.accessPoint, q0);\n    }\n\n    const referenceMeta = new LbdDataset(this.session, referenceContainerUrl);\n    await referenceMeta.create();\n    await referenceMeta.addDistribution(\n      Buffer.from(\"\"),\n      \"text/turtle\",\n      {},\n      \"data\",\n      makePublic\n    );\n    await this.init();\n  }\n\n  /**\n   * @description Add a partial project to a Pod-specific access point\n   * @param part Partial project to add to a Pod-specific access point\n   */\n  public async addPartialProject(part: string) {\n    const q0 = `INSERT DATA {\n        <${this.accessPoint}> <${LBD.aggregates}> <${part}> .\n        }`;\n    await this.dataService.sparqlUpdate(this.accessPoint, q0);\n  }\n\n  /**\n   * @description Add a stakeholder to an LBDserver project\n   * @param webId The WebID/card of the stakeholder\n   * @param accessRights the access rights this stakeholder should have.\n   */\n  public async addStakeholder(\n    webId: string,\n    accessRights: AccessRights = {\n      read: true,\n      append: false,\n      write: false,\n      control: false,\n    }\n  ) {\n    await this.accessService.setResourceAccess(\n      this.accessPoint,\n      accessRights,\n      ResourceType.CONTAINER,\n      webId\n    );\n  }\n\n  /**\n   * @description delete an LBDserver project (locally)\n   */\n  public async delete() {\n    await this.dataService.deleteContainer(this.accessPoint, true);\n  }\n\n  /**\n   * @description find all the partial projects from the indicated project access point\n   */\n  public async findAllPartialProjects() {\n    return await getQueryResult(\n      this.accessPoint,\n      LBD.aggregates,\n      this.fetch,\n      false\n    );\n  }\n\n  /**\n   * @description Find the partial project provided by this stakeholder\n   * @param webId The webID of the stakeholder whom's partial project you want to find\n   * @returns The URL of the partial project\n   */\n  public async findPartialProject(webId: string) {\n    const repo = await this.lbdService.getProjectRegistry(webId);\n    // console.log('repo', repo)\n    const partialProjectOfStakeholder = repo + this.projectId + \"/local/\";\n    return partialProjectOfStakeholder\n    // console.log('partialProjectOfStakeholder', partialProjectOfStakeholder)\n    // const status = await this.fetch(partialProjectOfStakeholder, {\n    //   method: \"HEAD\",\n    // }).then((res) => res.status);\n    // if (status === 200) {\n    //   return partialProjectOfStakeholder;\n    // } else {\n    //   throw new Error(\n    //     `UNAUTHORIZED: This repository does not exist or you don't have the required access rights`\n    //   );\n    // }\n  }\n\n  /**\n   * @description Add this stakeholder's partial project corresponding with this project (same GUID)\n   * @param webId The webID of the stakeholder whom's partial project you want to add\n   * @returns the URL of the partial project\n   */\n  public async addPartialProjectByStakeholder(webId: string) {\n    const partialProjectUrl = await this.findPartialProject(webId);\n    await this.addPartialProject(partialProjectUrl);\n    return partialProjectUrl;\n  }\n\n  private async createRegistryContainer(containerName, makePublic, property) {\n    if (!containerName.endsWith(\"/\")) containerName += \"/\";\n\n    const containerUrl = this.localProject + containerName;\n    await this.dataService.createContainer(containerUrl, makePublic);\n    const q0 = `INSERT DATA {\n        <${this.localProject}> <${property}> <${containerUrl}> .\n      }`;\n    await this.dataService.sparqlUpdate(this.localProject, q0);\n    return containerUrl;\n  }\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// DATASETS ////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * @description Add a dataset to the project\n   * @param makePublic initial access rights for the dataset\n   * @param id optional id for the dataset - a GUID is created by default\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns\n   */\n  public async addDataset(\n    options: object = {},\n    makePublic: boolean = false,\n    id: string = v4()\n  ): Promise<LbdDataset> {\n    const subject = extract(this.data, this.localProject);\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"];\n    const datasetUrl = datasetRegistry + id + \"/\";\n    const theDataset = new LbdDataset(this.session, datasetUrl);\n    await theDataset.create(options, makePublic);\n    return theDataset;\n  }\n\n  /**\n   * @description Delete a dataset by URL\n   * @param datasetUrl The URL of the dataset \n   */\n  public async deleteDataset(datasetUrl: string) {\n    if (!datasetUrl.endsWith(\"/\")) datasetUrl += \"/\";\n    const ds = new LbdDataset(this.session, datasetUrl);\n    await ds.delete();\n  }\n\n  /**\n   * @description delete a dataset by its ID\n   * @param datasetId The GUID of the dataset to be deleted\n   */\n  public async deleteDatasetById(datasetId: string) {\n    const subject = extract(this.data, this.localProject);\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"];\n    const datasetUrl = datasetRegistry + datasetId + \"/\";\n    const ds = new LbdDataset(this.session, datasetUrl);\n    await ds.delete();\n  }\n\n  /**\n   * @description Get all datasets within this project\n   * @param options {query: query to override, asStream: consume the results as a stream, local: query only the local project}\n   * @returns \n   */\n  public async getAllDatasetUrls(options?: {\n    query: string;\n    asStream: boolean;\n    local: boolean;\n  }) {\n    const myEngine = newEngine();\n    const subject = extract(this.data, this.localProject);\n    const sources = [];\n    if (options && options.local) {\n      sources.push(subject[LBD.hasDatasetRegistry][0][\"@id\"]);\n    } else {\n      const partials = await this.findAllPartialProjects();\n      for (const p of partials) {\n        const dsReg = await getQueryResult(\n          p,\n          LBD.hasDatasetRegistry,\n          this.fetch,\n          true\n        );\n        sources.push(dsReg);\n      }\n    }\n    let q;\n    if (!options || !options.query) {\n      q = `SELECT ?dataset WHERE {?registry <${LDP.contains}> ?dataset}`;\n    } else {\n      q = options.query;\n    }\n\n    const results = await myEngine.query(q, { sources, fetch: this.fetch });\n    const { data } = await myEngine.resultToString(\n      results,\n      \"application/sparql-results+json\"\n    );\n    if (options && options.asStream) {\n      return data;\n    } else {\n      const parsed = await parseStream(data);\n      return parsed[\"results\"].bindings.map((i) => i[\"dataset\"].value);\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// REFERENCES////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * @description Add a concept to the local project registry\n   * @returns an LBDconcept Instance\n   */\n  public async addConcept(id?): Promise<LbdConcept> {\n    const subject = extract(this.data, this.localProject);\n    const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"];\n    const ref = new LbdConcept(this.session, referenceRegistry);\n    await ref.create(id);\n    return ref;\n  }\n\n  public getReferenceRegistry() {\n    const subject = extract(this.data, this.localProject);\n    return subject[LBD.hasReferenceRegistry][0][\"@id\"];\n  }\n\n  private async getAllReferenceRegistries() {\n    const partials = await this.findAllPartialProjects()\n    const registries = []\n\n    for (const partial of partials) {\n      const reg = await getQueryResult(partial, LBD.hasReferenceRegistry, this.fetch, true)\n      registries.push(reg + \"data\")\n    }\n\n    return registries\n  }\n\n  /**\n   * @description delete a concept by ID\n   * @param url the URL of the concept to be deleted\n   */\n  public async deleteConcept(url: string) {\n    const parts = url.split(\"/\");\n    const id = parts.pop();\n    const referenceRegistry = parts.join(\"/\");\n    const ref = new LbdConcept(this.session, referenceRegistry);\n    await ref.delete();\n  }\n\n  /**\n   * @description Find the main concept by one of its representations: an identifier and a dataset\n   * @param identifier the Identifier of the representation\n   * @param dataset the dataset where the representation resides\n   * @param distribution (optional) the distribution of the representation\n   * @returns \n   */\n  public async getConceptByIdentifier(\n    identifier: string,\n    dataset: string,\n    distribution?: string\n  ) {\n    const myEngine = newEngine();\n\n    // find all the reference registries of the aggregated partial projects\n    const partials = await this.findAllPartialProjects();\n    let sources = [];\n    for (const p of partials) {\n      const referenceRegistry: string = await getQueryResult(\n        p,\n        LBD.hasReferenceRegistry,\n        this.fetch,\n        true\n      );\n      const rq = `SELECT ?downloadURL ?dist WHERE {<${referenceRegistry}> <${DCAT.distribution}> ?dist . ?dist <${DCAT.downloadURL}> ?downloadURL . OPTIONAL {?dist <${DCAT.accessURL}> ?accessURL .}}`;\n      const results = await myEngine\n        .query(rq, { sources: [referenceRegistry], fetch: this.fetch })\n        .then((r: IQueryResultBindings) => r.bindings())\n        .then((b) =>\n          b.map((bi) => {\n            return {\n              downloadURL: bi.get(\"?downloadURL\"),\n              accessURL: bi.get(\"?accessURL\"),\n            };\n          })\n        );\n      sources = [...sources, ...results];\n    }\n\n    const downloadURLs = sources.map((item) => item.downloadURL.id);\n    const q = `SELECT ?concept ?alias WHERE {\n      ?concept <${LBD.hasReference}> ?ref .\n      ?ref <${LBD.inDataset}> <${dataset}> ;\n        <${LBD.hasIdentifier}> ?idUrl .\n      ?idUrl <http://schema.org/value> \"${identifier}\" .\n      OPTIONAL {?concept <${OWL.sameAs}> ?alias}\n  }`;\n\n    const aliases = new Set<string>();\n    await myEngine\n      .query(q, { sources: downloadURLs, fetch: this.fetch })\n      .then((r: IQueryResultBindings) => r.bindings())\n      .then((b) =>\n        b.forEach((bi) => {\n          aliases.add(bi.get(\"?concept\").value)\n          if (bi.get(\"?alias\")) aliases.add(bi.get(\"?alias\"));\n        })\n      );\n\n      const concept = {\n        aliases: [],\n        references: [] \n      }\n\n      for (let v of aliases.values()) {\n        concept.aliases.push(v)\n        const idQ = `SELECT ?dataset ?dist ?identifier WHERE {\n          <${v}> <${LBD.hasReference}> ?ref .\n          ?ref <${LBD.inDataset}> ?dataset ;\n            <${LBD.hasIdentifier}> ?idUrl .\n          ?idUrl <http://schema.org/value> ?identifier ;\n            <${LBD.inDistribution}> ?dist .\n        }`\n        const bindings = await myEngine.query(idQ, {sources: downloadURLs, fetch: this.fetch})\n          .then((response: IQueryResultBindings) => response.bindings())\n        bindings.map(b => {\n          concept.references.push({\n            dataset: b.get(\"?dataset\").value,\n            distribution: b.get(\"?dist\").value,\n            identifier: b.get(\"?identifier\").value\n          })\n      })\n    }\n\n    const subject = extract(this.data, this.localProject);\n    const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"];\n    const theConcept = new LbdConcept(this.session, referenceRegistry)\n    theConcept.init(concept)\n    return theConcept\n    //     const aliases = {}\n    //     asJson[\"results\"].bindings.forEach(item => {\n    //       const alias = item[\"alias\"].value\n    //       const distribution = item[\"dist\"].value\n    //       const dataset = item[\"dataset\"].value\n    //       const identifier = item[\"identifier\"].value\n\n    //       if (!Object.keys(aliases).includes(alias)) {\n    //         aliases[alias] = []\n    //       }\n    // -    })\n  }\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// QUERY ///////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * @description a direct query on project resources\n   * @param q The SPARQL query (string)\n   * @param sources The sources (array)\n   * @param asStream Whether to be consumed as a stream or not (default: false)\n   * @returns \n   */\n  public async directQuery(q: string, sources: string[], asStream: boolean = false) {\n    const registries = await this.getAllReferenceRegistries()\n    const results = await query(q, {sources, fetch: this.fetch, asStream, registries})\n    return results\n  }\n\n\n  // /**\n  //  * @description A query where datasets take the \n  //  * @param q \n  //  * @param datasets \n  //  * @param asStream \n  //  */\n  // public async indirectQuery(q: string, datasets: string[], asStream: boolean = false) {\n\n  // }\n}\n"],"file":"LbdProject.js"}