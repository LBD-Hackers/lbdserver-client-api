{"version":3,"sources":["../../../src/helpers/LbdDataset.ts"],"names":["LbdDataset","session","url","fetch","accessService","AccessService","dataService","DataService","lbdService","LBDService","method","then","result","status","headers","i","json","data","getDistributions","distributions","options","makePublic","datasetUrl","res","createContainer","aclDefault","ACL","Authorization","agentClass","FOAF","Agent","sparqlUpdate","undefined","deleteFile","q","DCAT","Dataset","DCTERMS","creator","info","webId","Object","keys","length","q0","key","init","deleteContainer","query","distribution","mimetype","distributionId","dist","LbdDistribution","create","dataset","distributionUrls","map","id","split","push"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./functions\"\nimport {v4} from \"uuid\"\nimport { ACL, DCAT, DCTERMS, FOAF, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport LbdDistribution from './LbdDistribution'\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\n\nexport default class LbdDataset {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public url: string;\n  public distributions: LbdDistribution[]\n  public data: object[];\n  private session: BrowserSession | NodeSession\n\n  constructor(session: BrowserSession | NodeSession, url: string) {\n    this.session = session\n    this.fetch = session.fetch;\n    this.url = url\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init() {\n    this.data = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.distributions = await this.getDistributions()\n  }\n\n  /**\n   * \n   * @param makePublic \n   * @param id\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns \n   */\n  public async create(\n    options: object = {},\n    makePublic?: boolean,\n  ) {\n    const datasetUrl = this.url\n\n    const status = await this.fetch(datasetUrl, {method: \"HEAD\"}).then(res => res.status)\n    if (status !== 200) {\n      await this.dataService.createContainer(datasetUrl, makePublic)\n\n      //workaround to allow inherited access rights\n\n      if (makePublic) {\n        let aclDefault = `INSERT {?rule <${ACL.default}> <${datasetUrl}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`\n        await this.dataService.sparqlUpdate(datasetUrl + \".acl\", aclDefault)\n      }\n\n      if (makePublic === undefined) {\n        this.dataService.deleteFile(datasetUrl + \".acl\")\n      }\n    }\n\n    let q = `INSERT DATA {<${datasetUrl}> a <${DCAT.Dataset}> ; <${DCTERMS.creator}> <${this.session.info.webId}>. }`\n\n    await this.dataService.sparqlUpdate(datasetUrl, q)\n    \n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `\n      for (const key of Object.keys(options)) {\n        q0 += `<${datasetUrl}> <${key}> \"${options[key]}\" .`\n      }    \n      q0 += \"}\"\n      await this.dataService.sparqlUpdate(datasetUrl, q0)\n    }\n    await this.init()\n  }\n\n  public async delete() {\n    await this.dataService.deleteContainer(this.url, true)\n    return\n  }\n\n  public async update(query) {\n      await this.dataService.sparqlUpdate(this.url, query)\n  }\n\n  /////////////////////////////////////////////////////////\n  //////////////////// DISTRIBUTIONS///////////////////////\n  /////////////////////////////////////////////////////////\n  public async addDistribution(distribution: File | Buffer, mimetype? ,options: object = {}, distributionId: string = v4(), makePublic: boolean = false) {      \n    const dist = new LbdDistribution(this.session, this, distributionId)\n    await dist.create(distribution, {}, mimetype, makePublic)\n    return dist\n  }\n\n  public getDistributions() {\n      const dataset = extract(this.data, this.url)\n      if (dataset[DCAT.distribution]) {\n        const distributionUrls = dataset[DCAT.distribution].map(i => i[\"@id\"])\n        const distributions = []\n        for (const url of distributionUrls) {\n          const id = url.split('/')[url.split('/').length -1]\n          const dist = new LbdDistribution(this.session, this, id)\n          distributions.push(dist)\n        }\n        return distributions\n      } else return []\n  }\n\n  public async deleteDistribution(distributionId: File[]) {\n\n  }\n\n}\n\n"],"file":"LbdDataset.js"}