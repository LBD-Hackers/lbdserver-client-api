{"version":3,"sources":["../../../src/helpers/LbdService.ts"],"names":["LBDService","session","verbose","fetch","accessService","AccessService","dataService","DataService","webId","getProjectRegistry","lbdLoc","length","aggregator","headers","Accept","then","t","json","data","myProjects","LDP","contains","map","i","stakeholder","myEngine","q","LBD","hasProjectRegistry","query","sources","res","bindings","bind","get","value","err","location","undefined","inbox","url","publiclyAccessible","info","replace","q0","sparqlUpdate","q1","Aggregator","accessRights","read","append","write","control","actor","setResourceAccess","ResourceType","CONTAINER","console","log","deleteContainer"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport { urlJoin } from \"url-join-ts\";\nimport DataService from \"./data-service\";\nimport { computeChecksumMd5 } from \"./utils\";\nimport { newEngine, IQueryResultBindings } from \"@comunica/actor-init-sparql\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  createSolidDataset,\n  buildThing,\n  getSolidDataset,\n  createThing,\n  setThing,\n  setUrl,\n  addUrl,\n  getThingAll,\n  getUrlAll,\n  setDatetime,\n  saveSolidDatasetAt,\n} from \"@inrupt/solid-client\";\nimport { extract } from \"./functions\";\nimport { RDF, SCHEMA_INRUPT, DCAT, LDP, AS, XSD, FOAF, DCTERMS } from \"@inrupt/vocab-common-rdf\";\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\nimport { v4 } from \"uuid\";\n\nexport default class LBDService {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  private session: BrowserSession | NodeSession;\n\n  constructor(session: BrowserSession | NodeSession, verbose: boolean = false) {\n    this.session = session;\n    this.fetch = session.fetch;\n    this.verbose = verbose;\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// PREPARATION //////////////////////\n  /////////////////////////////////////////////////////////\n  public async validateWebId(webId: string) {\n    const lbdLoc = await this.getProjectRegistry(webId);\n    if (lbdLoc && lbdLoc.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  public async getAllProjects(aggregator) {\n    const data = await this.fetch(aggregator, {\n      headers: { Accept: \"application/ld+json\" },\n    }).then((t) => t.json());\n    const myProjects = extract(data, aggregator)[LDP.contains].map(\n      (i) => i[\"@id\"]\n    );\n    return myProjects;\n  }\n\n  public async getProjectRegistry(\n    stakeholder: string\n  ): Promise<string | undefined> {\n    const myEngine = newEngine();\n    const q = `select ?loc where {<${stakeholder}> <${LBD.hasProjectRegistry}> ?loc}`;\n    const location = await myEngine\n      .query(q, { sources: [stakeholder], fetch: this.fetch })\n      .then((res: IQueryResultBindings) => res.bindings())\n      .then((bind: any) => bind.map((i) => i.get(\"?loc\").value))\n      .catch((err: Error) => {\n        throw err;\n      });\n    if (location && location.length > 0) {\n      return location[0];\n    } else {\n      return undefined;\n    }\n  }\n\n  public async getInbox(stakeholder: string): Promise<string | undefined> {\n    const myEngine = newEngine();\n    const q = `select ?inbox where {<${stakeholder}> <${LDP.inbox}> ?inbox}`;\n    const inbox = await myEngine\n      .query(q, { sources: [stakeholder], fetch: this.fetch })\n      .then((res: IQueryResultBindings) => res.bindings())\n      .then((bind: any) => bind.map((i) => i.get(\"?inbox\").value))\n      .catch((err: Error) => {\n        throw err;\n      });\n    if (inbox && inbox.length > 0) {\n      return inbox[0];\n    } else {\n      return undefined;\n    }\n  }\n\n//   public async inviteStakeholder(stakeholder: string, projectId: string) {\n//     const inbox = await this.getInbox(stakeholder);\n//     const id = v4();\n//     const url = inbox + id;\n//     const message = `<>\n//   a <${AS.Announce}> ;\n//   <${AS.actor}> <${this.session.info.webId}> ;\n//   <${AS.object}> <#invite> ;\n//   <${AS.target}> <${stakeholder}> ;\n//   <${AS.updated}> \"${new Date().toISOString()}\"^^${XSD.dateTime} .\n\n// <#invite> a ${LBD.ProjectInvite}; \n//   <${FOAF.primaryTopic}> <#project> .\n// <#project> a <${LBD.Project}> ;\n//     <${DCTERMS.identifier} \"${projectId}\" .\n//   `;\n\n//   const options = {\n//     method: \"POST\",\n//     body: message,\n//   }\n//     // await this.session.fetch()\n//   }\n\n  public async createProjectRegistry(\n    url: string = undefined,\n    publiclyAccessible: boolean = true\n  ): Promise<string> {\n    try {\n      const stakeholder = this.session.info.webId\n      if (!url) url = stakeholder.replace(\"/profile/card#me\", \"/lbd/\");\n      \n      const q0 = `INSERT DATA {\n          <${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .\n        }`;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n\n      // create the LBD registry (container / Aggregator)\n      const q1 = `INSERT DATA {\n        <${url}> a <${LBD.Aggregator}> .\n      }`;\n\n      // the updates immediately creates the container\n      await this.dataService.sparqlUpdate(url, q1);\n\n      let accessRights: AccessRights;\n      let actor: string | undefined;\n      if (publiclyAccessible) {\n        accessRights = {\n          read: true,\n          append: false,\n          write: false,\n          control: false,\n        };\n      } else {\n        accessRights = { read: true, append: true, write: true, control: true };\n        actor = stakeholder;\n      }\n      await this.accessService.setResourceAccess(\n        url,\n        accessRights,\n        ResourceType.CONTAINER,\n        actor\n      );\n      return url;\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n\n  public async removeProjectRegistry(stakeholder: string, url: string) {\n    try {\n      const q0 = `DELETE {<${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .}\n      WHERE {<${stakeholder}> <${LBD.hasProjectRegistry}> ?reg .}\n      `;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n      await this.dataService.deleteContainer(url, true);\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n}\n"],"file":"LbdService.js"}