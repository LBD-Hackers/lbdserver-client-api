{"version":3,"sources":["../../../src/helpers/functions.ts"],"names":["QueryEngine","require","N3","DataFactory","namedNode","literal","defaultGraph","quad","variable","translate","toSparql","extract","jsonld","uri","Object","assign","filter","i","prefixes","inference","myEngine","registries","fetch","store","Promise","resolve","reject","q","queryQuads","sources","quadStream","on","res","subject","id","replaceAll","object","startsWith","predicate","value","addQuad","err","streamToString","stream","chunks","chunk","push","Buffer","from","concat","toString","query","options","asStream","mutateQuery","variables","console","log","newQ","Store","result","resultToString","data","JSON","parse","findLowerLevel","obj","type","bgp","input","translation","usedVariables","Set","aliasNumber","aliases","patterns","pattern","keys","item","termType","has","newVName","newV","add","forEach","alias","newPattern","Array"],"mappings":"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","sourcesContent":["const QueryEngine = require('@comunica/query-sparql').QueryEngine;\r\nconst N3 = require('n3');\r\nconst { DataFactory } = N3;\r\nconst { namedNode, literal, defaultGraph, quad, variable } = DataFactory;\r\nconst {translate, toSparql} = require(\"sparqlalgebrajs\")\r\n\r\nfunction extract(jsonld: object[], uri: string) {\r\n  return Object.assign({}, ...jsonld.filter((i) => i[\"@id\"] === uri));\r\n}\r\n\r\nconst prefixes = `\r\nprefix owl: <http://www.w3.org/2002/07/owl#> \r\nprefix beo: <http://pi.pauwel.be/voc/buildingelement#>\r\nprefix props: <http://example.org/props#> \r\nprefix lbds: <https://w3id.org/lbdserver#>\r\nprefix schema: <http://schema.org/>\r\n`\r\n\r\nfunction inference(myEngine, { registries, fetch, store }): Promise<void> {\r\n  return new Promise(async (resolve, reject) => {\r\n      const q = prefixes + `\r\n      CONSTRUCT {\r\n       ?s1 owl:sameAs ?s2 .\r\n       ?s2 owl:sameAs ?s1 .\r\n      } WHERE {\r\n          ?concept1 lbds:hasReference/lbds:hasIdentifier/<http://schema.org/value> ?s1 .\r\n          ?concept2 lbds:hasReference/lbds:hasIdentifier/<http://schema.org/value> ?s2 .\r\n          ?concept1 owl:sameAs ?concept2 .\r\n      }`\r\n      const quadStream = await myEngine.queryQuads(q, {\r\n          sources: registries,\r\n          fetch\r\n      });\r\n\r\n      quadStream.on('data', (res) => {\r\n\r\n            const subject = res.subject.id.replaceAll('\"', '')\r\n            const object = res.object.id.replaceAll('\"', '')\r\n          if (subject.startsWith(\"http\") && object.startsWith(\"http\")) {\r\n            const q = quad(\r\n                namedNode(subject),\r\n                namedNode(res.predicate.value),\r\n                namedNode(object),\r\n                defaultGraph()\r\n            )\r\n            store.addQuad(q)\r\n          }\r\n\r\n      });\r\n\r\n      quadStream.on('error', (err) => {\r\n        reject(err)\r\n    });\r\n\r\n      quadStream.on('end', () => {\r\n          resolve()\r\n      })\r\n  })\r\n}\r\n\r\nfunction streamToString (stream): Promise<string> {\r\n  const chunks = [];\r\n  return new Promise((resolve, reject) => {\r\n    stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)));\r\n    stream.on('error', (err) => reject(err));\r\n    stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));\r\n  })\r\n}\r\n\r\nasync function query(q, options) {\r\n      let { sources, fetch, store, registries, asStream} = options\r\n      const {query, variables } = await mutateQuery(q)\r\n    //   const vars = variables.map((v: any) => v.value)\r\n\r\n        console.log('sources', sources)\r\n    console.log('registries', registries)\r\n    console.log('query', query)\r\n\r\n      const newQ = prefixes + \"Select * where {?s1 owl:sameAs ?s2} \"\r\n      const myEngine = new QueryEngine();\r\n      if (!store) store = new N3.Store();\r\n      \r\n      await inference(myEngine, { registries, fetch, store })\r\n      const result = await myEngine.query(query, { sources: [...sources, store], fetch })\r\n      const { data } = await myEngine.resultToString(result,\r\n          'application/sparql-results+json');\r\n      if (asStream) {\r\n          return data\r\n      } else {\r\n          return JSON.parse(await streamToString(data))\r\n      }\r\n}\r\n\r\nfunction findLowerLevel(obj, variables) {\r\n  if (!variables) variables = obj.variables\r\n  if (obj.type === \"bgp\") {\r\n      return {bgp: obj, variables}\r\n  } else {\r\n      return findLowerLevel(obj.input, variables)\r\n  }\r\n}\r\n\r\nasync function mutateQuery(query) {\r\n  const translation = translate(query);\r\n  const {bgp, variables} = findLowerLevel(translation, translation.variables)\r\n  const usedVariables = new Set()\r\n  let aliasNumber = 1\r\n  let aliases = {}\r\n  for (const pattern of bgp.patterns) {\r\n      for (const item of Object.keys(pattern)) {\r\n       if (pattern[item].termType === \"Variable\") {\r\n          if (usedVariables.has(pattern[item])) {\r\n              const newVName = `${pattern[item].value}_alias${aliasNumber}`\r\n              if (!aliases[pattern[item].value]) aliases[pattern[item].value] = []\r\n\r\n              aliases[pattern[item].value].push(newVName)\r\n              aliasNumber += 1\r\n              const newV = {termType: \"Variable\", value: newVName}\r\n              pattern[item] = newV\r\n          }\r\n          usedVariables.add(pattern[item])\r\n       }\r\n         \r\n      }\r\n  }\r\n  Object.keys(aliases).forEach(item => {\r\n      aliases[item].forEach(alias => {\r\n          const newPattern = quad(\r\n              variable(item),\r\n              namedNode(\"http://www.w3.org/2002/07/owl#sameAs\"),\r\n              variable(alias),\r\n              defaultGraph()\r\n          )\r\n          bgp.patterns.push(newPattern)\r\n      })\r\n  })\r\n  const q = {type: \"project\", input: {type: \"bgp\", patterns: bgp.patterns}, variables: Array.from(usedVariables)}\r\n  return {query: toSparql(q), variables: Array.from(usedVariables)}\r\n}\r\n\r\nexport { extract, streamToString, query };\r\n"],"file":"functions.js"}