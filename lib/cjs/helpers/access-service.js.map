{"version":3,"sources":["../../../src/helpers/access-service.ts"],"names":["AccessService","fetch","verbose","resourceURL","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","FILE","type","userWebID","DATASET","resourceWithAcl","getResourceAcl","resourceAcl","undefined","updatedAcl","newAccess","logAccessInfo","datasetWithAcl","Error","access","resource","agent","console","log","JSON","stringify","controlRead","controlWrite"],"mappings":"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","sourcesContent":["// Import from \"@inrupt/solid-client\"\r\nimport {\r\n    getSolidDatasetWithAcl,\r\n    setPublicResourceAccess,\r\n    hasResourceAcl,\r\n    hasAccessibleAcl,\r\n    getResourceAcl,\r\n    createAclFromFallbackAcl,\r\n    hasFallbackAcl,\r\n    saveAclFor,\r\n    setAgentResourceAccess,\r\n    getFileWithAcl\r\n} from \"@inrupt/solid-client\";\r\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\r\n\r\nexport default class AccessService{\r\n\r\n    public fetch;\r\n    public verbose: boolean = false;\r\n\r\n    constructor(fetch: any, verbose: boolean = false){\r\n        this.fetch = fetch;\r\n        this.verbose = verbose;\r\n    }\r\n\r\n    // Make a resource public\r\n    public async makePublic(resourceURL: string) {\r\n        // I would by default not grant the public appending rights...\r\n        const accessRights: AccessRights = { read: true, append: false, write: false, control: false };\r\n        return this.setResourceAccess(resourceURL, accessRights, ResourceType.CONTAINER);\r\n    }\r\n\r\n    public async makeFilePublic(resourceURL: string) {\r\n        const accessRights: AccessRights = { read: true, append: true, write: false, control: false };\r\n        return this.setResourceAccess(resourceURL, accessRights, ResourceType.FILE);\r\n    }\r\n\r\n    public async setResourceAccess(resourceURL: string, accessRights: AccessRights, type: ResourceType, userWebID?: string){\r\n\r\n        // Get resource with ACL\r\n        let resourceWithAcl: any\r\n        if(type == ResourceType.DATASET || type == ResourceType.CONTAINER){\r\n            resourceWithAcl = await getSolidDatasetWithAcl(resourceURL, {fetch: this.fetch});\r\n        }\r\n\r\n        if(type == ResourceType.FILE){\r\n            resourceWithAcl = await getFileWithAcl(resourceURL, {fetch: this.fetch});\r\n        }\r\n        \r\n        // Get resource ACL\r\n        const resourceAcl = await this.getResourceAcl(resourceWithAcl);\r\n        \r\n        // Update ACL access\r\n        let updatedAcl;\r\n\r\n        // If no user webID provided, set the public access\r\n        if(!userWebID || userWebID == undefined){\r\n            updatedAcl = setPublicResourceAccess(\r\n                resourceAcl,\r\n                accessRights,\r\n            );\r\n        }\r\n        \r\n        // If user webID provided, set the access for that particular user\r\n        else{\r\n            updatedAcl = setAgentResourceAccess(\r\n                resourceAcl,\r\n                userWebID,\r\n                accessRights,\r\n            );\r\n        }\r\n\r\n        // Save ACL\r\n        const newAccess = await saveAclFor(resourceWithAcl, updatedAcl, {fetch: this.fetch});\r\n\r\n        this.verbose && this.logAccessInfo(accessRights, resourceURL);\r\n\r\n        return newAccess;\r\n\r\n    }\r\n\r\n    // Obtain the SolidDataset's own ACL, if available,\r\n    // or initialise a new one, if possible:\r\n    private async getResourceAcl(datasetWithAcl: any){\r\n\r\n        let resourceAcl;\r\n        if (!hasResourceAcl(datasetWithAcl)) {\r\n        if (!hasAccessibleAcl(datasetWithAcl)) {\r\n            throw new Error(\r\n            \"The current user does not have permission to change access rights to this Resource.\"\r\n            );\r\n        }\r\n        if (!hasFallbackAcl(datasetWithAcl)) {\r\n            throw new Error(\r\n            \"The current user does not have permission to see who currently has access to this Resource.\"\r\n            );\r\n            // Alternatively, initialise a new empty ACL as follows,\r\n            // but be aware that if you do not give someone Control access,\r\n            // **nobody will ever be able to change Access permissions in the future**:\r\n            // resourceAcl = createAcl(myDatasetWithAcl);\r\n        }\r\n            resourceAcl = createAclFromFallbackAcl(datasetWithAcl);\r\n        } else {\r\n            resourceAcl = getResourceAcl(datasetWithAcl);\r\n        }\r\n\r\n        return resourceAcl;\r\n    }\r\n\r\n    private logAccessInfo(access: any, resource: string, agent: string = \"\"){\r\n        if (access === null) {\r\n            console.log(\"Could not load access details for this Resource.\");\r\n        } else {\r\n            if(!agent) console.log(`${agent}'s Access:: `, JSON.stringify(access));\r\n            else console.log(`Public Access:: `, JSON.stringify(access));\r\n            console.log(\"...\", agent, (access.read ? 'CAN' : 'CANNOT'), \"read the Resource\", resource);\r\n            console.log(\"...\", agent, (access.append ? 'CAN' : 'CANNOT'), \"add data to the Resource\", resource);\r\n            console.log(\"...\", agent, (access.write ? 'CAN' : 'CANNOT'), \"change data in the Resource\", resource);\r\n\r\n            if ('controlRead' in access){\r\n                console.log(\"...\", agent, (access.controlRead ? 'CAN' : 'CANNOT'), \"see access to the Resource\", resource);\r\n                console.log(\"...\", agent, (access.controlWrite ? 'CAN' : 'CANNOT'), \"change access to the Resource\", resource);\r\n            }else{\r\n                console.log(\"...\", agent, (access.control ? 'CAN' : 'CANNOT'), \"change access to the Resource\", resource);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}"],"file":"access-service.js"}