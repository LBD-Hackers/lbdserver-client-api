{"version":3,"sources":["../../../src/helpers/data-service.ts"],"names":["DataService","fetch","verbose","accessService","AccessService","file","targetFileURL","makePublic","contentType","requestOptions","method","headers","body","redirect","makeFilePublic","fileURL","console","log","fileUrl","query","response","containerURL","includeSubContainers","dataset","containerResources","resource","deleteContainer","deleteFile","datasetWithAcl"],"mappings":"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","sourcesContent":["// Import from \"@inrupt/solid-client\"\r\nimport {\r\n    getSolidDataset,\r\n    getFile,\r\n    createContainerAt,\r\n    deleteFile,\r\n    deleteContainer,\r\n    getContainedResourceUrlAll,\r\n    overwriteFile,\r\n    getSourceUrl,\r\n    isContainer\r\n} from \"@inrupt/solid-client\";\r\nimport AccessService from \"./access-service\";\r\nimport { Mimetype } from \"./BaseDefinitions\";\r\n\r\nexport default class DataService{\r\n\r\n    public fetch;\r\n    public verbose: boolean = false;\r\n    public accessService: AccessService;\r\n\r\n    constructor(fetch: any, verbose: boolean = false){\r\n        this.fetch = fetch;\r\n        this.verbose = verbose;\r\n        this.accessService = new AccessService(fetch);\r\n    }\r\n\r\n    /**\r\n     * FILES\r\n     */\r\n\r\n    // Upload File to the targetFileURL.\r\n    // If the targetFileURL exists, overwrite the file.\r\n    // If the targetFileURL does not exist, create the file at the location.\r\n    public async writeFileToPod(file: File|Buffer, targetFileURL: string, makePublic: boolean = false, contentType: string) {\r\n\r\n        var requestOptions = {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": contentType,\r\n            },\r\n            body: file,\r\n            redirect: \"follow\",\r\n          };\r\n          await this.fetch(targetFileURL, requestOptions);\r\n\r\n\r\n        // const savedFile = await overwriteFile(\r\n        //   targetFileURL,                            // URL for the file.\r\n        //   file,                                     // File\r\n        //   { contentType, fetch: this.fetch }        // mimetype if known, fetch from the authenticated session\r\n        // );\r\n        // this.verbose && console.log(`File saved at ${getSourceUrl(savedFile)}`);\r\n\r\n        if(makePublic){\r\n            await this.accessService.makeFilePublic(targetFileURL);\r\n        }\r\n\r\n        // return savedFile;\r\n\r\n    }\r\n\r\n\r\n    public async getFile(fileURL: string) {\r\n        this.verbose && console.log(`Getting file ${fileURL}...`);\r\n        return getFile(\r\n            fileURL,                // File in Pod to Read\r\n            { fetch: this.fetch }   // fetch from authenticated session\r\n        );\r\n    }\r\n\r\n    public async deleteFile(fileURL: string) {\r\n        this.verbose && console.log(`Deleting file ${fileURL}...`);\r\n        return deleteFile(\r\n            fileURL,                // File in Pod to Read\r\n            { fetch: this.fetch }   // fetch from authenticated session\r\n        );\r\n    }\r\n\r\n    /**\r\n     * SPARQL\r\n     */\r\n    public async sparqlUpdate(fileUrl: string, query: string) {\r\n    var requestOptions = {\r\n        method: \"PATCH\",\r\n        headers: { \"Content-Type\": \"application/sparql-update\" },\r\n        body: query,\r\n        redirect: \"follow\",\r\n    };\r\n    \r\n        const response =  await this.fetch(fileUrl, requestOptions);\r\n        return response\r\n    }\r\n\r\n\r\n    /**\r\n     * CONTAINERS\r\n     */\r\n\r\n    public async deleteContainer(containerURL: string, includeSubContainers: boolean = true) {\r\n\r\n        // If deleting subcontainers, we need to first get these\r\n        if(includeSubContainers){\r\n            console.log(`Deleting container ${containerURL} including its subfolders...`);\r\n            const dataset = await getSolidDataset( containerURL, { fetch: this.fetch } );\r\n            const containerResources = await getContainedResourceUrlAll( dataset );\r\n\r\n            // Delete resources (containers and files)\r\n            for(let resource of containerResources){\r\n                if(isContainer(resource)){\r\n                    await this.deleteContainer(resource, true);\r\n                }\r\n                else{\r\n                    await this.deleteFile(resource);\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(`Deleting container ${containerURL}...`);\r\n        return deleteContainer( containerURL, { fetch: this.fetch } );\r\n        \r\n    }\r\n\r\n    public async createContainer(containerURL: string, makePublic: boolean = false) {\r\n        \r\n        this.verbose && console.log(`Creating container ${containerURL}...`);\r\n\r\n        const datasetWithAcl = await createContainerAt(\r\n            containerURL,           // File in Pod to Read\r\n            { fetch: this.fetch }   // fetch from authenticated session\r\n        );\r\n\r\n        if(makePublic){\r\n            await this.accessService.makePublic(containerURL);\r\n        }\r\n\r\n        return datasetWithAcl;\r\n    }\r\n\r\n}"],"file":"data-service.js"}